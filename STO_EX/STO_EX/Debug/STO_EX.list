
STO_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca30  0800ca30  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca30  0800ca30  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca30  0800ca30  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca30  0800ca30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800ca38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d8  20000060  0800ca98  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002538  0800ca98  00022538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ce6  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8a  00000000  00000000  00039d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0003eb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00040268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029449  00000000  00000000  00041748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d39  00000000  00000000  0006ab91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59ac  00000000  00000000  0008c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c08  00000000  00000000  001722c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000060 	.word	0x20000060
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800bbc0 	.word	0x0800bbc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000064 	.word	0x20000064
 80001d0:	0800bbc0 	.word	0x0800bbc0

080001d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b4e      	ldr	r3, [pc, #312]	; (8000324 <MX_ADC1_Init+0x150>)
 80001ec:	4a4e      	ldr	r2, [pc, #312]	; (8000328 <MX_ADC1_Init+0x154>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b4c      	ldr	r3, [pc, #304]	; (8000324 <MX_ADC1_Init+0x150>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <MX_ADC1_Init+0x150>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <MX_ADC1_Init+0x150>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000202:	4b48      	ldr	r3, [pc, #288]	; (8000324 <MX_ADC1_Init+0x150>)
 8000204:	2201      	movs	r2, #1
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b46      	ldr	r3, [pc, #280]	; (8000324 <MX_ADC1_Init+0x150>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b45      	ldr	r3, [pc, #276]	; (8000324 <MX_ADC1_Init+0x150>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000214:	4b43      	ldr	r3, [pc, #268]	; (8000324 <MX_ADC1_Init+0x150>)
 8000216:	2201      	movs	r2, #1
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 800021a:	4b42      	ldr	r3, [pc, #264]	; (8000324 <MX_ADC1_Init+0x150>)
 800021c:	2206      	movs	r2, #6
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b40      	ldr	r3, [pc, #256]	; (8000324 <MX_ADC1_Init+0x150>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <MX_ADC1_Init+0x150>)
 800022a:	2200      	movs	r2, #0
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b3d      	ldr	r3, [pc, #244]	; (8000324 <MX_ADC1_Init+0x150>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000234:	4b3b      	ldr	r3, [pc, #236]	; (8000324 <MX_ADC1_Init+0x150>)
 8000236:	2201      	movs	r2, #1
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800023c:	4b39      	ldr	r3, [pc, #228]	; (8000324 <MX_ADC1_Init+0x150>)
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000242:	4b38      	ldr	r3, [pc, #224]	; (8000324 <MX_ADC1_Init+0x150>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <MX_ADC1_Init+0x150>)
 800024c:	2204      	movs	r2, #4
 800024e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000250:	4834      	ldr	r0, [pc, #208]	; (8000324 <MX_ADC1_Init+0x150>)
 8000252:	f004 f91d 	bl	8004490 <HAL_ADC_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800025c:	f002 fef9 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000260:	4b32      	ldr	r3, [pc, #200]	; (800032c <MX_ADC1_Init+0x158>)
 8000262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000264:	2306      	movs	r3, #6
 8000266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000268:	2307      	movs	r3, #7
 800026a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800026c:	237f      	movs	r3, #127	; 0x7f
 800026e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000270:	2304      	movs	r3, #4
 8000272:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	4619      	mov	r1, r3
 800027c:	4829      	ldr	r0, [pc, #164]	; (8000324 <MX_ADC1_Init+0x150>)
 800027e:	f004 faf5 	bl	800486c <HAL_ADC_ConfigChannel>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000288:	f002 fee3 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800028c:	4b28      	ldr	r3, [pc, #160]	; (8000330 <MX_ADC1_Init+0x15c>)
 800028e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000290:	230c      	movs	r3, #12
 8000292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	4619      	mov	r1, r3
 8000298:	4822      	ldr	r0, [pc, #136]	; (8000324 <MX_ADC1_Init+0x150>)
 800029a:	f004 fae7 	bl	800486c <HAL_ADC_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80002a4:	f002 fed5 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <MX_ADC1_Init+0x160>)
 80002aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002ac:	2312      	movs	r3, #18
 80002ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	4619      	mov	r1, r3
 80002b4:	481b      	ldr	r0, [pc, #108]	; (8000324 <MX_ADC1_Init+0x150>)
 80002b6:	f004 fad9 	bl	800486c <HAL_ADC_ConfigChannel>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80002c0:	f002 fec7 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <MX_ADC1_Init+0x164>)
 80002c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002c8:	2318      	movs	r3, #24
 80002ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	4619      	mov	r1, r3
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <MX_ADC1_Init+0x150>)
 80002d2:	f004 facb 	bl	800486c <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80002dc:	f002 feb9 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_ADC1_Init+0x168>)
 80002e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	4619      	mov	r1, r3
 80002ee:	480d      	ldr	r0, [pc, #52]	; (8000324 <MX_ADC1_Init+0x150>)
 80002f0:	f004 fabc 	bl	800486c <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80002fa:	f002 feaa 	bl	8003052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_ADC1_Init+0x16c>)
 8000300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000302:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_ADC1_Init+0x150>)
 800030e:	f004 faad 	bl	800486c <HAL_ADC_ConfigChannel>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000318:	f002 fe9b 	bl	8003052 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000088 	.word	0x20000088
 8000328:	50040000 	.word	0x50040000
 800032c:	04300002 	.word	0x04300002
 8000330:	08600004 	.word	0x08600004
 8000334:	0c900008 	.word	0x0c900008
 8000338:	10c00010 	.word	0x10c00010
 800033c:	14f00020 	.word	0x14f00020
 8000340:	19200040 	.word	0x19200040

08000344 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b0a4      	sub	sp, #144	; 0x90
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2268      	movs	r2, #104	; 0x68
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f00b fc23 	bl	800bbb0 <memset>
  if(adcHandle->Instance==ADC1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a49      	ldr	r2, [pc, #292]	; (8000494 <HAL_ADC_MspInit+0x150>)
 8000370:	4293      	cmp	r3, r2
 8000372:	f040 808b 	bne.w	800048c <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800037a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800037c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000380:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000382:	2303      	movs	r3, #3
 8000384:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800038a:	2308      	movs	r3, #8
 800038c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800038e:	2307      	movs	r3, #7
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000396:	2302      	movs	r3, #2
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800039a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800039e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4618      	mov	r0, r3
 80003a6:	f006 fd2b 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003b0:	f002 fe4f 	bl	8003052 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003b4:	4b38      	ldr	r3, [pc, #224]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b8:	4a37      	ldr	r2, [pc, #220]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c0:	4b35      	ldr	r3, [pc, #212]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003cc:	4b32      	ldr	r3, [pc, #200]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d0:	4a31      	ldr	r2, [pc, #196]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d8:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e8:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <HAL_ADC_MspInit+0x154>)
 80003f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003fc:	230f      	movs	r3, #15
 80003fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000400:	230b      	movs	r3, #11
 8000402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000410:	4619      	mov	r1, r3
 8000412:	4822      	ldr	r0, [pc, #136]	; (800049c <HAL_ADC_MspInit+0x158>)
 8000414:	f005 fc96 	bl	8005d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000418:	2303      	movs	r3, #3
 800041a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800041c:	230b      	movs	r3, #11
 800041e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f005 fc87 	bl	8005d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000438:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <HAL_ADC_MspInit+0x160>)
 800043a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800045a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 800045e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000462:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000466:	2220      	movs	r2, #32
 8000468:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000472:	f005 f91b 	bl	80056ac <HAL_DMA_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <HAL_ADC_MspInit+0x13c>
    {
      Error_Handler();
 800047c:	f002 fde9 	bl	8003052 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000484:	651a      	str	r2, [r3, #80]	; 0x50
 8000486:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <HAL_ADC_MspInit+0x15c>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800048c:	bf00      	nop
 800048e:	3790      	adds	r7, #144	; 0x90
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	50040000 	.word	0x50040000
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800
 80004a0:	200000f0 	.word	0x200000f0
 80004a4:	40020008 	.word	0x40020008

080004a8 <InitAdc>:
  }
}

/* USER CODE BEGIN 1 */
void InitAdc()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004ac:	217f      	movs	r1, #127	; 0x7f
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <InitAdc+0x1c>)
 80004b0:	f004 ff7e 	bl	80053b0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 6);
 80004b4:	2206      	movs	r2, #6
 80004b6:	4904      	ldr	r1, [pc, #16]	; (80004c8 <InitAdc+0x20>)
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <InitAdc+0x1c>)
 80004ba:	f004 f935 	bl	8004728 <HAL_ADC_Start_DMA>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000088 	.word	0x20000088
 80004c8:	2000007c 	.word	0x2000007c

080004cc <BreakupProcess>:
bool is_fault = false;

static void CheckSystem();

void BreakupProcess()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	breakup.value = value[5];
 80004d2:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <BreakupProcess+0xb8>)
 80004d4:	895b      	ldrh	r3, [r3, #10]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <BreakupProcess+0xbc>)
 80004da:	801a      	strh	r2, [r3, #0]

	if(breakup.value <= BREAKUP_TRIGGER && breakup.triggered == false)
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <BreakupProcess+0xbc>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d842      	bhi.n	800056e <BreakupProcess+0xa2>
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <BreakupProcess+0xbc>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	f083 0301 	eor.w	r3, r3, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d03b      	beq.n	800056e <BreakupProcess+0xa2>
	{
		if(startMillisCounter(BREAKUP_TIMER_TRIG_1) >= BREAKUP_TIMER_TRIG_2)
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 fede 	bl	80012b8 <startMillisCounter>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000502:	d338      	bcc.n	8000576 <BreakupProcess+0xaa>
		{
			ToSdCard(MANUALNE_WYZWOLENIE);
 8000504:	2002      	movs	r0, #2
 8000506:	f002 feab 	bl	8003260 <ToSdCard>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	481f      	ldr	r0, [pc, #124]	; (800058c <BreakupProcess+0xc0>)
 8000510:	f005 fdaa 	bl	8006068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	481c      	ldr	r0, [pc, #112]	; (800058c <BreakupProcess+0xc0>)
 800051c:	f005 fda4 	bl	8006068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000526:	481a      	ldr	r0, [pc, #104]	; (8000590 <BreakupProcess+0xc4>)
 8000528:	f005 fd9e 	bl	8006068 <HAL_GPIO_WritePin>
			if(startSecondsCounter(BREAKUP_TIMER_TRIG_CONFIG_1) >= config.time_breakup_trigger)
 800052c:	200a      	movs	r0, #10
 800052e:	f000 feaf 	bl	8001290 <startSecondsCounter>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <BreakupProcess+0xc8>)
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	b29b      	uxth	r3, r3
 800053c:	429a      	cmp	r2, r3
 800053e:	d31a      	bcc.n	8000576 <BreakupProcess+0xaa>
			{
				for(uint8_t i = 1; i <= EXTINGUISHER_COUNT_2; i++)
 8000540:	2301      	movs	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	e006      	b.n	8000554 <BreakupProcess+0x88>
				{
					WchichExtinguisher(i);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fabf 	bl	8001acc <WchichExtinguisher>
				for(uint8_t i = 1; i <= EXTINGUISHER_COUNT_2; i++)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	3301      	adds	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d9f5      	bls.n	8000546 <BreakupProcess+0x7a>
				}
				stopMillisCounter(BREAKUP_TIMER_TRIG_1);
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fed2 	bl	8001304 <stopMillisCounter>
				stopSecondsCounter(BREAKUP_TIMER_TRIG_CONFIG_1);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 febd 	bl	80012e0 <stopSecondsCounter>
				breakup.triggered = true;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <BreakupProcess+0xbc>)
 8000568:	2201      	movs	r2, #1
 800056a:	709a      	strb	r2, [r3, #2]
		if(startMillisCounter(BREAKUP_TIMER_TRIG_1) >= BREAKUP_TIMER_TRIG_2)
 800056c:	e003      	b.n	8000576 <BreakupProcess+0xaa>
			}
		}
	}
	else
		restartMillisCounter(BREAKUP_TIMER_TRIG_1);
 800056e:	2005      	movs	r0, #5
 8000570:	f000 feec 	bl	800134c <restartMillisCounter>
 8000574:	e000      	b.n	8000578 <BreakupProcess+0xac>
		if(startMillisCounter(BREAKUP_TIMER_TRIG_1) >= BREAKUP_TIMER_TRIG_2)
 8000576:	bf00      	nop

	CheckSystem();
 8000578:	f000 f80e 	bl	8000598 <CheckSystem>

}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000007c 	.word	0x2000007c
 8000588:	20000138 	.word	0x20000138
 800058c:	48000800 	.word	0x48000800
 8000590:	48000400 	.word	0x48000400
 8000594:	20000008 	.word	0x20000008

08000598 <CheckSystem>:


static void CheckSystem()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	static bool check_on;

	if(breakup.value >= BREAKUP_CHECK && breakup.triggered == false && is_fault == false)
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <CheckSystem+0x94>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d922      	bls.n	80005ee <CheckSystem+0x56>
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <CheckSystem+0x94>)
 80005aa:	789b      	ldrb	r3, [r3, #2]
 80005ac:	f083 0301 	eor.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d01b      	beq.n	80005ee <CheckSystem+0x56>
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <CheckSystem+0x98>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f083 0301 	eor.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d014      	beq.n	80005ee <CheckSystem+0x56>
	{
		if(startMillisCounter(BREAKUP_TIMER_CHECK_1) >= BREAKUP_TIMER_CHECK_2)
 80005c4:	2006      	movs	r0, #6
 80005c6:	f000 fe77 	bl	80012b8 <startMillisCounter>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b95      	cmp	r3, #149	; 0x95
 80005ce:	d92b      	bls.n	8000628 <CheckSystem+0x90>
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <CheckSystem+0x9c>)
 80005d6:	f005 fd47 	bl	8006068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	4815      	ldr	r0, [pc, #84]	; (8000638 <CheckSystem+0xa0>)
 80005e2:	f005 fd41 	bl	8006068 <HAL_GPIO_WritePin>
			check_on = true;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <CheckSystem+0xa4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
		if(startMillisCounter(BREAKUP_TIMER_CHECK_1) >= BREAKUP_TIMER_CHECK_2)
 80005ec:	e01c      	b.n	8000628 <CheckSystem+0x90>
		}
	}
	else if(check_on == true)
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <CheckSystem+0xa4>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d014      	beq.n	8000620 <CheckSystem+0x88>
	{
		stopSecondsCounter(BREAKUP_TIMER_CHECK_1);
 80005f6:	2006      	movs	r0, #6
 80005f8:	f000 fe72 	bl	80012e0 <stopSecondsCounter>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <CheckSystem+0x9c>)
 8000602:	f005 fd31 	bl	8006068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <CheckSystem+0xa0>)
 800060e:	f005 fd2b 	bl	8006068 <HAL_GPIO_WritePin>
		ToSdCard(SPRAWDZENIE_SYSTEMU);
 8000612:	2007      	movs	r0, #7
 8000614:	f002 fe24 	bl	8003260 <ToSdCard>
		check_on = false;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <CheckSystem+0xa4>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	}
	else
		restartMillisCounter(BREAKUP_TIMER_CHECK_1);
}
 800061e:	e003      	b.n	8000628 <CheckSystem+0x90>
		restartMillisCounter(BREAKUP_TIMER_CHECK_1);
 8000620:	2006      	movs	r0, #6
 8000622:	f000 fe93 	bl	800134c <restartMillisCounter>
}
 8000626:	e7ff      	b.n	8000628 <CheckSystem+0x90>
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000138 	.word	0x20000138
 8000630:	2000013c 	.word	0x2000013c
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400
 800063c:	2000013d 	.word	0x2000013d

08000640 <CheckFault>:


void CheckFault(bool fault)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	is_fault = fault;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <CheckFault+0x1c>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	7013      	strb	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	2000013c 	.word	0x2000013c

08000660 <SaveConfiguration>:
	.config_mode = false
};


static void SaveConfiguration(Configuration config)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	463b      	mov	r3, r7
 8000668:	e883 0003 	stmia.w	r3, {r0, r1}

	WriteToBackupReg(RTC_BKP_DET_CABLES, config.amount_det_cables);
 800066c:	783b      	ldrb	r3, [r7, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f88a 	bl	800078c <WriteToBackupReg>
	WriteToBackupReg(RTC_BKP_EXTINGUISHER, config.amount_extinguisher);
 8000678:	787b      	ldrb	r3, [r7, #1]
 800067a:	b29b      	uxth	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	2002      	movs	r0, #2
 8000680:	f000 f884 	bl	800078c <WriteToBackupReg>
	WriteToBackupReg(RTC_BKP_ZONE, config.amount_zone);
 8000684:	78bb      	ldrb	r3, [r7, #2]
 8000686:	b29b      	uxth	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f87e 	bl	800078c <WriteToBackupReg>
	WriteToBackupReg(RTC_BKP_TIME_DET_CABLE, config.time_cable_trigger);
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2004      	movs	r0, #4
 8000698:	f000 f878 	bl	800078c <WriteToBackupReg>
	WriteToBackupReg(RTC_BKP_TIME_BREAKUP, config.time_breakup_trigger);
 800069c:	793b      	ldrb	r3, [r7, #4]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2005      	movs	r0, #5
 80006a4:	f000 f872 	bl	800078c <WriteToBackupReg>
	WriteToBackupReg(RTC_BKP_TIME_DELAY, config.time_delay_trigger);
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	2006      	movs	r0, #6
 80006b0:	f000 f86c 	bl	800078c <WriteToBackupReg>

	ToSdCard(CONFIG_UPADATE);
 80006b4:	2014      	movs	r0, #20
 80006b6:	f002 fdd3 	bl	8003260 <ToSdCard>

	choice_cable_count = 1;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <SaveConfiguration+0x90>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
	extinguisher_count = 1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <SaveConfiguration+0x94>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	zone_count = 1;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <SaveConfiguration+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
	cable_trig_time = 1;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <SaveConfiguration+0x9c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
    breakup_trig_time = 1;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <SaveConfiguration+0xa0>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]

    EnabledDetCab(&config);
 80006d8:	463b      	mov	r3, r7
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fe48 	bl	8001370 <EnabledDetCab>
    GetParameter(&config);
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ff5e 	bl	80015a4 <GetParameter>

}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000001 	.word	0x20000001
 80006f8:	20000002 	.word	0x20000002
 80006fc:	20000003 	.word	0x20000003
 8000700:	20000004 	.word	0x20000004

08000704 <LoadConfiguration>:

void LoadConfiguration()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

	config.amount_det_cables = ReadBackupReg(RTC_BKP_DET_CABLES);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f863 	bl	80007d4 <ReadBackupReg>
 800070e:	4603      	mov	r3, r0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <LoadConfiguration+0x84>)
 8000714:	701a      	strb	r2, [r3, #0]
	config.amount_extinguisher = ReadBackupReg(RTC_BKP_EXTINGUISHER);
 8000716:	2002      	movs	r0, #2
 8000718:	f000 f85c 	bl	80007d4 <ReadBackupReg>
 800071c:	4603      	mov	r3, r0
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <LoadConfiguration+0x84>)
 8000722:	705a      	strb	r2, [r3, #1]
	config.amount_zone = ReadBackupReg(RTC_BKP_ZONE);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f855 	bl	80007d4 <ReadBackupReg>
 800072a:	4603      	mov	r3, r0
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <LoadConfiguration+0x84>)
 8000730:	709a      	strb	r2, [r3, #2]
	config.time_cable_trigger = ReadBackupReg(RTC_BKP_TIME_DET_CABLE);
 8000732:	2004      	movs	r0, #4
 8000734:	f000 f84e 	bl	80007d4 <ReadBackupReg>
 8000738:	4603      	mov	r3, r0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <LoadConfiguration+0x84>)
 800073e:	70da      	strb	r2, [r3, #3]
	config.time_breakup_trigger = ReadBackupReg(RTC_BKP_TIME_BREAKUP);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 f847 	bl	80007d4 <ReadBackupReg>
 8000746:	4603      	mov	r3, r0
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <LoadConfiguration+0x84>)
 800074c:	711a      	strb	r2, [r3, #4]
	config.time_delay_trigger = ReadBackupReg(RTC_BKP_TIME_DELAY);
 800074e:	2006      	movs	r0, #6
 8000750:	f000 f840 	bl	80007d4 <ReadBackupReg>
 8000754:	4603      	mov	r3, r0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <LoadConfiguration+0x84>)
 800075a:	715a      	strb	r2, [r3, #5]

	if(config.amount_det_cables != 0)
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <LoadConfiguration+0x84>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d003      	beq.n	800076c <LoadConfiguration+0x68>
	{
		ToSdCard(CONFIG_ACTUAL);
 8000764:	2015      	movs	r0, #21
 8000766:	f002 fd7b 	bl	8003260 <ToSdCard>
 800076a:	e004      	b.n	8000776 <LoadConfiguration+0x72>
	}
	else
	{
		ForceDefaultConfig();
 800076c:	f000 fce6 	bl	800113c <ForceDefaultConfig>
		ToSdCard(CONFIG_ACTUAL);
 8000770:	2015      	movs	r0, #21
 8000772:	f002 fd75 	bl	8003260 <ToSdCard>
	}
	EnabledDetCab(&config);
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <LoadConfiguration+0x84>)
 8000778:	f000 fdfa 	bl	8001370 <EnabledDetCab>
	GetParameter(&config);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <LoadConfiguration+0x84>)
 800077e:	f000 ff11 	bl	80015a4 <GetParameter>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008

0800078c <WriteToBackupReg>:

void WriteToBackupReg(uint32_t nr_reg, uint16_t value)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <WriteToBackupReg+0x40>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <WriteToBackupReg+0x40>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6593      	str	r3, [r2, #88]	; 0x58
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <WriteToBackupReg+0x40>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f005 fca4 	bl	80060fc <HAL_PWR_EnableBkUpAccess>

  HAL_RTCEx_BKUPWrite(&hrtc, nr_reg, value);
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	461a      	mov	r2, r3
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <WriteToBackupReg+0x44>)
 80007bc:	f007 f9a8 	bl	8007b10 <HAL_RTCEx_BKUPWrite>

  HAL_PWR_DisableBkUpAccess();
 80007c0:	f005 fcac 	bl	800611c <HAL_PWR_DisableBkUpAccess>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	200001e8 	.word	0x200001e8

080007d4 <ReadBackupReg>:

uint16_t ReadBackupReg(uint32_t nr_reg)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint16_t value;

  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <ReadBackupReg+0x40>)
 80007de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <ReadBackupReg+0x40>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6593      	str	r3, [r2, #88]	; 0x58
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <ReadBackupReg+0x40>)
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess();
 80007f4:	f005 fc82 	bl	80060fc <HAL_PWR_EnableBkUpAccess>

  value = HAL_RTCEx_BKUPRead(&hrtc, nr_reg);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <ReadBackupReg+0x44>)
 80007fc:	f007 f9a1 	bl	8007b42 <HAL_RTCEx_BKUPRead>
 8000800:	4603      	mov	r3, r0
 8000802:	81fb      	strh	r3, [r7, #14]

  HAL_PWR_DisableBkUpAccess();
 8000804:	f005 fc8a 	bl	800611c <HAL_PWR_DisableBkUpAccess>
  return value;
 8000808:	89fb      	ldrh	r3, [r7, #14]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	200001e8 	.word	0x200001e8

0800081c <ConfigurationMode>:

void ConfigurationMode()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	if(TryToModeConfig() == true)
 8000820:	f000 fbd8 	bl	8000fd4 <TryToModeConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d017      	beq.n	800085a <ConfigurationMode+0x3e>
	{
		if(startSecondsCounter(CONFIGURATION_TIMER) >= CONFIGURATION_ON_TIME)
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fd30 	bl	8001290 <startSecondsCounter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b04      	cmp	r3, #4
 8000834:	f240 80bc 	bls.w	80009b0 <ConfigurationMode+0x194>
		{

			ConfigurationModeIsOn(true);
 8000838:	2001      	movs	r0, #1
 800083a:	f002 fac5 	bl	8002dc8 <ConfigurationModeIsOn>
			HAL_Delay(1000);
 800083e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000842:	f003 fc01 	bl	8004048 <HAL_Delay>
			ConfigurationModeIsOn(false);
 8000846:	2000      	movs	r0, #0
 8000848:	f002 fabe 	bl	8002dc8 <ConfigurationModeIsOn>
			stopSecondsCounter(CONFIGURATION_TIMER);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fd47 	bl	80012e0 <stopSecondsCounter>
			config.config_mode = true;
 8000852:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <ConfigurationMode+0x1a4>)
 8000854:	2201      	movs	r2, #1
 8000856:	719a      	strb	r2, [r3, #6]
 8000858:	e0aa      	b.n	80009b0 <ConfigurationMode+0x194>
		}
	}
	else
		restartSecondsCounter(CONFIGURATION_TIMER);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fd64 	bl	8001328 <restartSecondsCounter>

	while(config.config_mode == true)
 8000860:	e0a6      	b.n	80009b0 <ConfigurationMode+0x194>
	{

		if (HAL_GPIO_ReadPin(SWITCH_SW_GPIO_Port, SWITCH_SW_Pin) == GPIO_PIN_RESET)
 8000862:	2104      	movs	r1, #4
 8000864:	4857      	ldr	r0, [pc, #348]	; (80009c4 <ConfigurationMode+0x1a8>)
 8000866:	f005 fbe7 	bl	8006038 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d106      	bne.n	800087e <ConfigurationMode+0x62>
		{
		    buttonSwPressed = false;
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <ConfigurationMode+0x1ac>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
            HAL_Delay(300);
 8000876:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800087a:	f003 fbe5 	bl	8004048 <HAL_Delay>
		    }
		if (HAL_GPIO_ReadPin(CHOICE_SW_GPIO_Port, CHOICE_SW_Pin) == GPIO_PIN_RESET)
 800087e:	2101      	movs	r1, #1
 8000880:	4850      	ldr	r0, [pc, #320]	; (80009c4 <ConfigurationMode+0x1a8>)
 8000882:	f005 fbd9 	bl	8006038 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d106      	bne.n	800089a <ConfigurationMode+0x7e>
		{
		    buttonChPressed = false;
 800088c:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <ConfigurationMode+0x1b0>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
            HAL_Delay(300);
 8000892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000896:	f003 fbd7 	bl	8004048 <HAL_Delay>
		    }

        switch(sw_change)
 800089a:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <ConfigurationMode+0x1b4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d86f      	bhi.n	8000984 <ConfigurationMode+0x168>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <ConfigurationMode+0x90>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008c5 	.word	0x080008c5
 80008b0:	080008e5 	.word	0x080008e5
 80008b4:	08000905 	.word	0x08000905
 80008b8:	08000925 	.word	0x08000925
 80008bc:	08000945 	.word	0x08000945
 80008c0:	08000965 	.word	0x08000965
        {
        case 0:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 80008c4:	2002      	movs	r0, #2
 80008c6:	f000 fce3 	bl	8001290 <startSecondsCounter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d96f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(2);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f000 fb53 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(CABLE_COUNT);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 f87c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 80008dc:	2002      	movs	r0, #2
 80008de:	f000 fd23 	bl	8001328 <restartSecondsCounter>
    	    }
            break;
 80008e2:	e065      	b.n	80009b0 <ConfigurationMode+0x194>
        case 1:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fcd3 	bl	8001290 <startSecondsCounter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d95f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(4);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f000 fb43 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(EXTINGUISHER_COUNT);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f86c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 80008fc:	2002      	movs	r0, #2
 80008fe:	f000 fd13 	bl	8001328 <restartSecondsCounter>
    	    }
    	    break;
 8000902:	e055      	b.n	80009b0 <ConfigurationMode+0x194>
        case 2:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000904:	2002      	movs	r0, #2
 8000906:	f000 fcc3 	bl	8001290 <startSecondsCounter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d94f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(6);
 8000910:	2006      	movs	r0, #6
 8000912:	f000 fb33 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(ZONE_COUNT);
 8000916:	2002      	movs	r0, #2
 8000918:	f000 f85c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fd03 	bl	8001328 <restartSecondsCounter>
    	    }
    	    break;
 8000922:	e045      	b.n	80009b0 <ConfigurationMode+0x194>
        case 3:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000924:	2002      	movs	r0, #2
 8000926:	f000 fcb3 	bl	8001290 <startSecondsCounter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d93f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(8);
 8000930:	2008      	movs	r0, #8
 8000932:	f000 fb23 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(CABLE_TRIG_TIME);
 8000936:	2003      	movs	r0, #3
 8000938:	f000 f84c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 800093c:	2002      	movs	r0, #2
 800093e:	f000 fcf3 	bl	8001328 <restartSecondsCounter>
    	    }
    	    break;
 8000942:	e035      	b.n	80009b0 <ConfigurationMode+0x194>
        case 4:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000944:	2002      	movs	r0, #2
 8000946:	f000 fca3 	bl	8001290 <startSecondsCounter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d92f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(10);
 8000950:	200a      	movs	r0, #10
 8000952:	f000 fb13 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(BREAKUP_TRIG_TIME);
 8000956:	2004      	movs	r0, #4
 8000958:	f000 f83c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fce3 	bl	8001328 <restartSecondsCounter>
    	    }
    	    break;
 8000962:	e025      	b.n	80009b0 <ConfigurationMode+0x194>
        case 5:
    	    if(startSecondsCounter(SWITCH_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fc93 	bl	8001290 <startSecondsCounter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d91f      	bls.n	80009b0 <ConfigurationMode+0x194>
    	    {
    	    BlinkSwitcheLed(12);
 8000970:	200c      	movs	r0, #12
 8000972:	f000 fb03 	bl	8000f7c <BlinkSwitcheLed>
    	    ChoiceValueToConfig(DELAY_TIME);
 8000976:	2005      	movs	r0, #5
 8000978:	f000 f82c 	bl	80009d4 <ChoiceValueToConfig>
    	    restartSecondsCounter(SWITCH_LED_TIMER_1);
 800097c:	2002      	movs	r0, #2
 800097e:	f000 fcd3 	bl	8001328 <restartSecondsCounter>
    	    }
    	    break;
 8000982:	e015      	b.n	80009b0 <ConfigurationMode+0x194>
        default:
	    config.config_mode = false;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <ConfigurationMode+0x1a4>)
 8000986:	2200      	movs	r2, #0
 8000988:	719a      	strb	r2, [r3, #6]
	    sw_change = 0;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <ConfigurationMode+0x1b4>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
		ConfigurationModeIsOn(true);
 8000990:	2001      	movs	r0, #1
 8000992:	f002 fa19 	bl	8002dc8 <ConfigurationModeIsOn>
		HAL_Delay(2000);
 8000996:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800099a:	f003 fb55 	bl	8004048 <HAL_Delay>
		ConfigurationModeIsOn(false);
 800099e:	2000      	movs	r0, #0
 80009a0:	f002 fa12 	bl	8002dc8 <ConfigurationModeIsOn>
		SaveConfiguration(config);
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <ConfigurationMode+0x1a4>)
 80009a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009aa:	f7ff fe59 	bl	8000660 <SaveConfiguration>
	    break;
 80009ae:	bf00      	nop
	while(config.config_mode == true)
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <ConfigurationMode+0x1a4>)
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f47f af54 	bne.w	8000862 <ConfigurationMode+0x46>

        }
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000008 	.word	0x20000008
 80009c4:	48000400 	.word	0x48000400
 80009c8:	2000013f 	.word	0x2000013f
 80009cc:	20000140 	.word	0x20000140
 80009d0:	2000013e 	.word	0x2000013e

080009d4 <ChoiceValueToConfig>:

static void ChoiceValueToConfig(switch_option_t option)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]

	switch(option)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	f200 8295 	bhi.w	8000f10 <ChoiceValueToConfig+0x53c>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <ChoiceValueToConfig+0x18>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000ad9 	.word	0x08000ad9
 80009f4:	08000bad 	.word	0x08000bad
 80009f8:	08000c81 	.word	0x08000c81
 80009fc:	08000d69 	.word	0x08000d69
 8000a00:	08000e3d 	.word	0x08000e3d
	{
	case CABLE_COUNT:
		switch(choice_cable_count)
 8000a04:	4bbe      	ldr	r3, [pc, #760]	; (8000d00 <ChoiceValueToConfig+0x32c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d84a      	bhi.n	8000aa4 <ChoiceValueToConfig+0xd0>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <ChoiceValueToConfig+0x40>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a45 	.word	0x08000a45
 8000a1c:	08000a65 	.word	0x08000a65
 8000a20:	08000a85 	.word	0x08000a85
		{
		case 1:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fc33 	bl	8001290 <startSecondsCounter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d94c      	bls.n	8000aca <ChoiceValueToConfig+0xf6>
	    	   {
	    	   BlinkChoiceLed(2);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f000 fa79 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_det_cables = OPTION_1;
 8000a36:	4bb3      	ldr	r3, [pc, #716]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fc73 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000a42:	e042      	b.n	8000aca <ChoiceValueToConfig+0xf6>

		case 2:
			if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fc23 	bl	8001290 <startSecondsCounter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d93e      	bls.n	8000ace <ChoiceValueToConfig+0xfa>
			   {
		   	   BlinkChoiceLed(4);
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 fa69 	bl	8000f28 <BlinkChoiceLed>
			   config.amount_det_cables = OPTION_2;
 8000a56:	4bab      	ldr	r3, [pc, #684]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	701a      	strb	r2, [r3, #0]
			   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fc63 	bl	8001328 <restartSecondsCounter>
			   }
			   break;
 8000a62:	e034      	b.n	8000ace <ChoiceValueToConfig+0xfa>
		case 3:
			if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fc13 	bl	8001290 <startSecondsCounter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d930      	bls.n	8000ad2 <ChoiceValueToConfig+0xfe>
			{
			   BlinkChoiceLed(6);
 8000a70:	2006      	movs	r0, #6
 8000a72:	f000 fa59 	bl	8000f28 <BlinkChoiceLed>
			   config.amount_det_cables = OPTION_3;
 8000a76:	4ba3      	ldr	r3, [pc, #652]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	701a      	strb	r2, [r3, #0]
			   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fc53 	bl	8001328 <restartSecondsCounter>
			   }
			   break;
 8000a82:	e026      	b.n	8000ad2 <ChoiceValueToConfig+0xfe>
		case 4:
			if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fc03 	bl	8001290 <startSecondsCounter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d922      	bls.n	8000ad6 <ChoiceValueToConfig+0x102>
			   {
			   BlinkChoiceLed(8);
 8000a90:	2008      	movs	r0, #8
 8000a92:	f000 fa49 	bl	8000f28 <BlinkChoiceLed>
			   config.amount_det_cables = OPTION_4;
 8000a96:	4b9b      	ldr	r3, [pc, #620]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	701a      	strb	r2, [r3, #0]
			   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 fc43 	bl	8001328 <restartSecondsCounter>
			   }
			   break;
 8000aa2:	e018      	b.n	8000ad6 <ChoiceValueToConfig+0x102>
		default:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fbf3 	bl	8001290 <startSecondsCounter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d908      	bls.n	8000ac2 <ChoiceValueToConfig+0xee>
	    	   {
	    	   BlinkChoiceLed(2);
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f000 fa39 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_det_cables = OPTION_1;
 8000ab6:	4b93      	ldr	r3, [pc, #588]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 fc33 	bl	8001328 <restartSecondsCounter>
	    	   }
			   choice_cable_count = 1;
 8000ac2:	4b8f      	ldr	r3, [pc, #572]	; (8000d00 <ChoiceValueToConfig+0x32c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e006      	b.n	8000ad8 <ChoiceValueToConfig+0x104>
	    	   break;
 8000aca:	bf00      	nop
 8000acc:	e004      	b.n	8000ad8 <ChoiceValueToConfig+0x104>
			   break;
 8000ace:	bf00      	nop
 8000ad0:	e002      	b.n	8000ad8 <ChoiceValueToConfig+0x104>
			   break;
 8000ad2:	bf00      	nop
 8000ad4:	e000      	b.n	8000ad8 <ChoiceValueToConfig+0x104>
			   break;
 8000ad6:	bf00      	nop
		}
	case EXTINGUISHER_COUNT:
        switch(extinguisher_count)
 8000ad8:	4b8b      	ldr	r3, [pc, #556]	; (8000d08 <ChoiceValueToConfig+0x334>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d84a      	bhi.n	8000b78 <ChoiceValueToConfig+0x1a4>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <ChoiceValueToConfig+0x114>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000b19 	.word	0x08000b19
 8000af0:	08000b39 	.word	0x08000b39
 8000af4:	08000b59 	.word	0x08000b59
        {
		case 1:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 fbc9 	bl	8001290 <startSecondsCounter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d94c      	bls.n	8000b9e <ChoiceValueToConfig+0x1ca>
	    	   {
	    	   BlinkChoiceLed(2);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fa0f 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_extinguisher = OPTION_1;
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	705a      	strb	r2, [r3, #1]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fc09 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000b16:	e042      	b.n	8000b9e <ChoiceValueToConfig+0x1ca>
		case 2:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fbb9 	bl	8001290 <startSecondsCounter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d93e      	bls.n	8000ba2 <ChoiceValueToConfig+0x1ce>
	    	   {
	    	   BlinkChoiceLed(4);
 8000b24:	2004      	movs	r0, #4
 8000b26:	f000 f9ff 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_extinguisher = OPTION_2;
 8000b2a:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	705a      	strb	r2, [r3, #1]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 fbf9 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000b36:	e034      	b.n	8000ba2 <ChoiceValueToConfig+0x1ce>
		case 3:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fba9 	bl	8001290 <startSecondsCounter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d930      	bls.n	8000ba6 <ChoiceValueToConfig+0x1d2>
	    	   {
	    	   BlinkChoiceLed(6);
 8000b44:	2006      	movs	r0, #6
 8000b46:	f000 f9ef 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_extinguisher = OPTION_3;
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	705a      	strb	r2, [r3, #1]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f000 fbe9 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000b56:	e026      	b.n	8000ba6 <ChoiceValueToConfig+0x1d2>
		case 4:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 fb99 	bl	8001290 <startSecondsCounter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d922      	bls.n	8000baa <ChoiceValueToConfig+0x1d6>
	    	   {
	    	   BlinkChoiceLed(8);
 8000b64:	2008      	movs	r0, #8
 8000b66:	f000 f9df 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_extinguisher = OPTION_4;
 8000b6a:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	705a      	strb	r2, [r3, #1]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 fbd9 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000b76:	e018      	b.n	8000baa <ChoiceValueToConfig+0x1d6>
		default:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 fb89 	bl	8001290 <startSecondsCounter>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d908      	bls.n	8000b96 <ChoiceValueToConfig+0x1c2>
	    	   {
	    	   BlinkChoiceLed(2);
 8000b84:	2002      	movs	r0, #2
 8000b86:	f000 f9cf 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_extinguisher = OPTION_1;
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	705a      	strb	r2, [r3, #1]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fbc9 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   extinguisher_count = 1;
 8000b96:	4b5c      	ldr	r3, [pc, #368]	; (8000d08 <ChoiceValueToConfig+0x334>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e006      	b.n	8000bac <ChoiceValueToConfig+0x1d8>
	    	   break;
 8000b9e:	bf00      	nop
 8000ba0:	e004      	b.n	8000bac <ChoiceValueToConfig+0x1d8>
	    	   break;
 8000ba2:	bf00      	nop
 8000ba4:	e002      	b.n	8000bac <ChoiceValueToConfig+0x1d8>
	    	   break;
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <ChoiceValueToConfig+0x1d8>
	    	   break;
 8000baa:	bf00      	nop
        }
    case ZONE_COUNT:
    	switch(zone_count)
 8000bac:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <ChoiceValueToConfig+0x338>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d84a      	bhi.n	8000c4c <ChoiceValueToConfig+0x278>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <ChoiceValueToConfig+0x1e8>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bcd 	.word	0x08000bcd
 8000bc0:	08000bed 	.word	0x08000bed
 8000bc4:	08000c0d 	.word	0x08000c0d
 8000bc8:	08000c2d 	.word	0x08000c2d
    	{
		case 1:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 fb5f 	bl	8001290 <startSecondsCounter>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d94c      	bls.n	8000c72 <ChoiceValueToConfig+0x29e>
	    	   {
	    	   BlinkChoiceLed(2);
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f000 f9a5 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_zone = OPTION_1;
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	709a      	strb	r2, [r3, #2]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fb9f 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000bea:	e042      	b.n	8000c72 <ChoiceValueToConfig+0x29e>
		case 2:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fb4f 	bl	8001290 <startSecondsCounter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d93e      	bls.n	8000c76 <ChoiceValueToConfig+0x2a2>
	    	   {
	    	   BlinkChoiceLed(4);
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f000 f995 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_zone = OPTION_2;
 8000bfe:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	709a      	strb	r2, [r3, #2]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fb8f 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000c0a:	e034      	b.n	8000c76 <ChoiceValueToConfig+0x2a2>
		case 3:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fb3f 	bl	8001290 <startSecondsCounter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d930      	bls.n	8000c7a <ChoiceValueToConfig+0x2a6>
	    	   {
	    	   BlinkChoiceLed(6);
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f000 f985 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_zone = OPTION_3;
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	709a      	strb	r2, [r3, #2]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fb7f 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000c2a:	e026      	b.n	8000c7a <ChoiceValueToConfig+0x2a6>
		case 4:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fb2f 	bl	8001290 <startSecondsCounter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d922      	bls.n	8000c7e <ChoiceValueToConfig+0x2aa>
	    	   {
	    	   BlinkChoiceLed(8);
 8000c38:	2008      	movs	r0, #8
 8000c3a:	f000 f975 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_zone = OPTION_4;
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	709a      	strb	r2, [r3, #2]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fb6f 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000c4a:	e018      	b.n	8000c7e <ChoiceValueToConfig+0x2aa>
		default:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fb1f 	bl	8001290 <startSecondsCounter>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d908      	bls.n	8000c6a <ChoiceValueToConfig+0x296>
	    	   {
	    	   BlinkChoiceLed(2);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f000 f965 	bl	8000f28 <BlinkChoiceLed>
	    	   config.amount_zone = OPTION_1;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	709a      	strb	r2, [r3, #2]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fb5f 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   zone_count = 1;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <ChoiceValueToConfig+0x338>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e006      	b.n	8000c80 <ChoiceValueToConfig+0x2ac>
	    	   break;
 8000c72:	bf00      	nop
 8000c74:	e004      	b.n	8000c80 <ChoiceValueToConfig+0x2ac>
	    	   break;
 8000c76:	bf00      	nop
 8000c78:	e002      	b.n	8000c80 <ChoiceValueToConfig+0x2ac>
	    	   break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <ChoiceValueToConfig+0x2ac>
	    	   break;
 8000c7e:	bf00      	nop
    	}
   case CABLE_TRIG_TIME:
    	switch(cable_trig_time)
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <ChoiceValueToConfig+0x33c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d854      	bhi.n	8000d34 <ChoiceValueToConfig+0x360>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <ChoiceValueToConfig+0x2bc>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000cc1 	.word	0x08000cc1
 8000c98:	08000ce1 	.word	0x08000ce1
 8000c9c:	08000d15 	.word	0x08000d15
    	{
		case 1:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 faf5 	bl	8001290 <startSecondsCounter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d956      	bls.n	8000d5a <ChoiceValueToConfig+0x386>
	    	   {
	    	   BlinkChoiceLed(2);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 f93b 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_cable_trigger = TIME_CABLE_OPTION_1;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	70da      	strb	r2, [r3, #3]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f000 fb35 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000cbe:	e04c      	b.n	8000d5a <ChoiceValueToConfig+0x386>
		case 2:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 fae5 	bl	8001290 <startSecondsCounter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d948      	bls.n	8000d5e <ChoiceValueToConfig+0x38a>
	    	   {
	    	   BlinkChoiceLed(4);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f000 f92b 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_cable_trigger = TIME_CABLE_OPTION_2;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	70da      	strb	r2, [r3, #3]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 fb25 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000cde:	e03e      	b.n	8000d5e <ChoiceValueToConfig+0x38a>
		case 3:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fad5 	bl	8001290 <startSecondsCounter>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d93a      	bls.n	8000d62 <ChoiceValueToConfig+0x38e>
	    	   {
	    	   BlinkChoiceLed(6);
 8000cec:	2006      	movs	r0, #6
 8000cee:	f000 f91b 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_cable_trigger = TIME_CABLE_OPTION_3;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <ChoiceValueToConfig+0x330>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	70da      	strb	r2, [r3, #3]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fb15 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000cfe:	e030      	b.n	8000d62 <ChoiceValueToConfig+0x38e>
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000001 	.word	0x20000001
 8000d0c:	20000002 	.word	0x20000002
 8000d10:	20000003 	.word	0x20000003
		case 4:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fabb 	bl	8001290 <startSecondsCounter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d922      	bls.n	8000d66 <ChoiceValueToConfig+0x392>
	    	   {
	    	   BlinkChoiceLed(8);
 8000d20:	2008      	movs	r0, #8
 8000d22:	f000 f901 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_cable_trigger = TIME_CABLE_OPTION_4;
 8000d26:	4b7c      	ldr	r3, [pc, #496]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000d28:	220f      	movs	r2, #15
 8000d2a:	70da      	strb	r2, [r3, #3]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 fafb 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000d32:	e018      	b.n	8000d66 <ChoiceValueToConfig+0x392>
		default:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 faab 	bl	8001290 <startSecondsCounter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d908      	bls.n	8000d52 <ChoiceValueToConfig+0x37e>
	    	   {
	    	   BlinkChoiceLed(2);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 f8f1 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_cable_trigger = TIME_CABLE_OPTION_1;
 8000d46:	4b74      	ldr	r3, [pc, #464]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	70da      	strb	r2, [r3, #3]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 faeb 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   cable_trig_time = 1;
 8000d52:	4b72      	ldr	r3, [pc, #456]	; (8000f1c <ChoiceValueToConfig+0x548>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e006      	b.n	8000d68 <ChoiceValueToConfig+0x394>
	    	   break;
 8000d5a:	bf00      	nop
 8000d5c:	e004      	b.n	8000d68 <ChoiceValueToConfig+0x394>
	    	   break;
 8000d5e:	bf00      	nop
 8000d60:	e002      	b.n	8000d68 <ChoiceValueToConfig+0x394>
	    	   break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <ChoiceValueToConfig+0x394>
	    	   break;
 8000d66:	bf00      	nop
    	}
   case BREAKUP_TRIG_TIME:
     	switch(breakup_trig_time)
 8000d68:	4b6d      	ldr	r3, [pc, #436]	; (8000f20 <ChoiceValueToConfig+0x54c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d84a      	bhi.n	8000e08 <ChoiceValueToConfig+0x434>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <ChoiceValueToConfig+0x3a4>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000dc9 	.word	0x08000dc9
 8000d84:	08000de9 	.word	0x08000de9
    	{
		case 1:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fa81 	bl	8001290 <startSecondsCounter>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d94c      	bls.n	8000e2e <ChoiceValueToConfig+0x45a>
	    	   {
	    	   BlinkChoiceLed(2);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f000 f8c7 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_breakup_trigger = TIME_BREAKUP_OPTION_1;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	711a      	strb	r2, [r3, #4]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f000 fac1 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000da6:	e042      	b.n	8000e2e <ChoiceValueToConfig+0x45a>
		case 2:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fa71 	bl	8001290 <startSecondsCounter>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d93e      	bls.n	8000e32 <ChoiceValueToConfig+0x45e>
	    	   {
	    	   BlinkChoiceLed(4);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f000 f8b7 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_breakup_trigger = TIME_BREAKUP_OPTION_2;
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	711a      	strb	r2, [r3, #4]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fab1 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000dc6:	e034      	b.n	8000e32 <ChoiceValueToConfig+0x45e>
		case 3:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 fa61 	bl	8001290 <startSecondsCounter>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d930      	bls.n	8000e36 <ChoiceValueToConfig+0x462>
	    	   {
	    	   BlinkChoiceLed(6);
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f000 f8a7 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_breakup_trigger = TIME_BREAKUP_OPTION_3;
 8000dda:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	711a      	strb	r2, [r3, #4]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 faa1 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000de6:	e026      	b.n	8000e36 <ChoiceValueToConfig+0x462>
		case 4:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 fa51 	bl	8001290 <startSecondsCounter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d922      	bls.n	8000e3a <ChoiceValueToConfig+0x466>
	    	   {
	    	   BlinkChoiceLed(8);
 8000df4:	2008      	movs	r0, #8
 8000df6:	f000 f897 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_breakup_trigger = TIME_BREAKUP_OPTION_4;
 8000dfa:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	711a      	strb	r2, [r3, #4]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fa91 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   break;
 8000e06:	e018      	b.n	8000e3a <ChoiceValueToConfig+0x466>
		default:
	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 fa41 	bl	8001290 <startSecondsCounter>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d908      	bls.n	8000e26 <ChoiceValueToConfig+0x452>
	    	   {
	    	   BlinkChoiceLed(2);
 8000e14:	2002      	movs	r0, #2
 8000e16:	f000 f887 	bl	8000f28 <BlinkChoiceLed>
	    	   config.time_breakup_trigger = TIME_BREAKUP_OPTION_1;
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	711a      	strb	r2, [r3, #4]
	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 fa81 	bl	8001328 <restartSecondsCounter>
	    	   }
	    	   breakup_trig_time = 1;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <ChoiceValueToConfig+0x54c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e006      	b.n	8000e3c <ChoiceValueToConfig+0x468>
	    	   break;
 8000e2e:	bf00      	nop
 8000e30:	e004      	b.n	8000e3c <ChoiceValueToConfig+0x468>
	    	   break;
 8000e32:	bf00      	nop
 8000e34:	e002      	b.n	8000e3c <ChoiceValueToConfig+0x468>
	    	   break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <ChoiceValueToConfig+0x468>
	    	   break;
 8000e3a:	bf00      	nop
    	}
        case DELAY_TIME:
          	switch(delay_trig_time)
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <ChoiceValueToConfig+0x550>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d84a      	bhi.n	8000edc <ChoiceValueToConfig+0x508>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <ChoiceValueToConfig+0x478>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e5d 	.word	0x08000e5d
 8000e50:	08000e7d 	.word	0x08000e7d
 8000e54:	08000e9d 	.word	0x08000e9d
 8000e58:	08000ebd 	.word	0x08000ebd
         	{
     		case 1:
     	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f000 fa17 	bl	8001290 <startSecondsCounter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d94c      	bls.n	8000f02 <ChoiceValueToConfig+0x52e>
     	    	   {
     	    	   BlinkChoiceLed(2);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 f85d 	bl	8000f28 <BlinkChoiceLed>
     	    	   config.time_delay_trigger = TIME_DELAY_OPTION_1;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000e70:	2205      	movs	r2, #5
 8000e72:	715a      	strb	r2, [r3, #5]
     	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 fa57 	bl	8001328 <restartSecondsCounter>
     	    	   }
     	    	   break;
 8000e7a:	e042      	b.n	8000f02 <ChoiceValueToConfig+0x52e>
     		case 2:
     	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fa07 	bl	8001290 <startSecondsCounter>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d93e      	bls.n	8000f06 <ChoiceValueToConfig+0x532>
     	    	   {
     	    	   BlinkChoiceLed(4);
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f000 f84d 	bl	8000f28 <BlinkChoiceLed>
     	    	   config.time_delay_trigger = TIME_DELAY_OPTION_2;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000e90:	220a      	movs	r2, #10
 8000e92:	715a      	strb	r2, [r3, #5]
     	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 fa47 	bl	8001328 <restartSecondsCounter>
     	    	   }
     	    	   break;
 8000e9a:	e034      	b.n	8000f06 <ChoiceValueToConfig+0x532>
     		case 3:
     	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f000 f9f7 	bl	8001290 <startSecondsCounter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d930      	bls.n	8000f0a <ChoiceValueToConfig+0x536>
     	    	   {
     	    	   BlinkChoiceLed(6);
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f000 f83d 	bl	8000f28 <BlinkChoiceLed>
     	    	   config.time_delay_trigger = TIME_DELAY_OPTION_3;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	715a      	strb	r2, [r3, #5]
     	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 fa37 	bl	8001328 <restartSecondsCounter>
     	    	   }
     	    	   break;
 8000eba:	e026      	b.n	8000f0a <ChoiceValueToConfig+0x536>
     		case 4:
     	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 f9e7 	bl	8001290 <startSecondsCounter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d922      	bls.n	8000f0e <ChoiceValueToConfig+0x53a>
     	    	   {
     	    	   BlinkChoiceLed(8);
 8000ec8:	2008      	movs	r0, #8
 8000eca:	f000 f82d 	bl	8000f28 <BlinkChoiceLed>
     	    	   config.time_delay_trigger = TIME_DELAY_OPTION_4;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000ed0:	2214      	movs	r2, #20
 8000ed2:	715a      	strb	r2, [r3, #5]
     	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fa27 	bl	8001328 <restartSecondsCounter>
     	    	   }
     	    	   break;
 8000eda:	e018      	b.n	8000f0e <ChoiceValueToConfig+0x53a>
     		default:
     	    	if(startSecondsCounter(CHOICE_LED_TIMER_1) >= SW_CH_LED_TIMER_1)
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 f9d7 	bl	8001290 <startSecondsCounter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d908      	bls.n	8000efa <ChoiceValueToConfig+0x526>
     	    	   {
     	    	   BlinkChoiceLed(2);
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f000 f81d 	bl	8000f28 <BlinkChoiceLed>
     	    	   config.time_delay_trigger = TIME_DELAY_OPTION_1;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <ChoiceValueToConfig+0x544>)
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	715a      	strb	r2, [r3, #5]
     	      	   restartSecondsCounter(CHOICE_LED_TIMER_1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fa17 	bl	8001328 <restartSecondsCounter>
     	    	   }
     	    	   delay_trig_time = 1;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <ChoiceValueToConfig+0x550>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
         	}

	}
}
 8000f00:	e006      	b.n	8000f10 <ChoiceValueToConfig+0x53c>
     	    	   break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <ChoiceValueToConfig+0x53c>
     	    	   break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <ChoiceValueToConfig+0x53c>
     	    	   break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <ChoiceValueToConfig+0x53c>
     	    	   break;
 8000f0e:	bf00      	nop
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000003 	.word	0x20000003
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000005 	.word	0x20000005

08000f28 <BlinkChoiceLed>:

static void BlinkChoiceLed(uint8_t count)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	static uint8_t x = 0;
	while(x <= count - 1)
 8000f32:	e013      	b.n	8000f5c <BlinkChoiceLed+0x34>
	{
    	if(startMillisCounter(CHOICE_LED_TIMER_2) >= SW_CH_LED_TIMER_2)
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f9bf 	bl	80012b8 <startMillisCounter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f40:	d30c      	bcc.n	8000f5c <BlinkChoiceLed+0x34>
    	{
    	HAL_GPIO_TogglePin(CHOICE_LED_GPIO_Port, CHOICE_LED_Pin);
 8000f42:	2102      	movs	r1, #2
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <BlinkChoiceLed+0x4c>)
 8000f46:	f005 f8a7 	bl	8006098 <HAL_GPIO_TogglePin>
    	stopMillisCounter(CHOICE_LED_TIMER_2);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 f9da 	bl	8001304 <stopMillisCounter>
    	x++;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <BlinkChoiceLed+0x50>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <BlinkChoiceLed+0x50>)
 8000f5a:	701a      	strb	r2, [r3, #0]
	while(x <= count - 1)
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <BlinkChoiceLed+0x50>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d8e6      	bhi.n	8000f34 <BlinkChoiceLed+0xc>
    	}
	}
   x = 0;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <BlinkChoiceLed+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400
 8000f78:	20000141 	.word	0x20000141

08000f7c <BlinkSwitcheLed>:

static void BlinkSwitcheLed(uint8_t count)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
static uint8_t x = 0;

  while(x <= count - 1)
 8000f86:	e014      	b.n	8000fb2 <BlinkSwitcheLed+0x36>
  {
    	if(startMillisCounter(SWITCH_LED_TIMER_2) >= SW_CH_LED_TIMER_2)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f995 	bl	80012b8 <startMillisCounter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f94:	d30d      	bcc.n	8000fb2 <BlinkSwitcheLed+0x36>
    	{
    	HAL_GPIO_TogglePin(SWITCH_LED_GPIO_Port, SWITCH_LED_Pin);
 8000f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <BlinkSwitcheLed+0x50>)
 8000f9c:	f005 f87c 	bl	8006098 <HAL_GPIO_TogglePin>
    	stopMillisCounter(SWITCH_LED_TIMER_2);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f9af 	bl	8001304 <stopMillisCounter>
    	x++;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <BlinkSwitcheLed+0x54>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <BlinkSwitcheLed+0x54>)
 8000fb0:	701a      	strb	r2, [r3, #0]
  while(x <= count - 1)
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <BlinkSwitcheLed+0x54>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8e5      	bhi.n	8000f88 <BlinkSwitcheLed+0xc>
    	}
  }
  x = 0;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <BlinkSwitcheLed+0x54>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	20000142 	.word	0x20000142

08000fd4 <TryToModeConfig>:

static bool TryToModeConfig()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SWITCH_SW_GPIO_Port, SWITCH_SW_Pin) == true &&
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <TryToModeConfig+0x2c>)
 8000fdc:	f005 f82c 	bl	8006038 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <TryToModeConfig+0x24>
	   HAL_GPIO_ReadPin(CHOICE_SW_GPIO_Port, CHOICE_SW_Pin) == true)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <TryToModeConfig+0x2c>)
 8000fea:	f005 f825 	bl	8006038 <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
	if(HAL_GPIO_ReadPin(SWITCH_SW_GPIO_Port, SWITCH_SW_Pin) == true &&
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <TryToModeConfig+0x24>
	{
		return true;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <TryToModeConfig+0x26>
	}
	else
		return false;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	48000400 	.word	0x48000400

08001004 <SwButtonCount>:

void SwButtonCount()
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	buttonSwPressed = true;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <SwButtonCount+0x2c>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
	if(config.config_mode == true)
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <SwButtonCount+0x30>)
 8001010:	799b      	ldrb	r3, [r3, #6]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <SwButtonCount+0x20>
	sw_change++;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <SwButtonCount+0x34>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SwButtonCount+0x34>)
 8001022:	701a      	strb	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000013f 	.word	0x2000013f
 8001034:	20000008 	.word	0x20000008
 8001038:	2000013e 	.word	0x2000013e

0800103c <SwButPressed>:

bool SwButPressed()
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	return buttonSwPressed;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <SwButPressed+0x14>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	2000013f 	.word	0x2000013f

08001054 <ChButtonCount>:

void ChButtonCount()
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	buttonChPressed = true;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <ChButtonCount+0xac>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
	if(config.config_mode == true)
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <ChButtonCount+0xb0>)
 8001060:	799b      	ldrb	r3, [r3, #6]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d046      	beq.n	80010f4 <ChButtonCount+0xa0>
	{
		if(sw_change == 0)
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <ChButtonCount+0xb4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <ChButtonCount+0x2a>
	        choice_cable_count++;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <ChButtonCount+0xb8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <ChButtonCount+0xb8>)
 800107a:	701a      	strb	r2, [r3, #0]
	    else if(sw_change == 4)
	    	breakup_trig_time++;
	    else if(sw_change == 5)
	    	delay_trig_time++;
	}
}
 800107c:	e03a      	b.n	80010f4 <ChButtonCount+0xa0>
		else if(sw_change == 1)
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <ChButtonCount+0xb4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d106      	bne.n	8001096 <ChButtonCount+0x42>
	    	extinguisher_count++;
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <ChButtonCount+0xbc>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <ChButtonCount+0xbc>)
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	e02e      	b.n	80010f4 <ChButtonCount+0xa0>
	    else if(sw_change == 2)
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <ChButtonCount+0xb4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d106      	bne.n	80010ae <ChButtonCount+0x5a>
	    	zone_count++;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <ChButtonCount+0xc0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <ChButtonCount+0xc0>)
 80010aa:	701a      	strb	r2, [r3, #0]
}
 80010ac:	e022      	b.n	80010f4 <ChButtonCount+0xa0>
	    else if(sw_change == 3)
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <ChButtonCount+0xb4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d106      	bne.n	80010c6 <ChButtonCount+0x72>
	    	cable_trig_time++;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <ChButtonCount+0xc4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <ChButtonCount+0xc4>)
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	e016      	b.n	80010f4 <ChButtonCount+0xa0>
	    else if(sw_change == 4)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <ChButtonCount+0xb4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d106      	bne.n	80010de <ChButtonCount+0x8a>
	    	breakup_trig_time++;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <ChButtonCount+0xc8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <ChButtonCount+0xc8>)
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	e00a      	b.n	80010f4 <ChButtonCount+0xa0>
	    else if(sw_change == 5)
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <ChButtonCount+0xb4>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d105      	bne.n	80010f4 <ChButtonCount+0xa0>
	    	delay_trig_time++;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <ChButtonCount+0xcc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <ChButtonCount+0xcc>)
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000140 	.word	0x20000140
 8001104:	20000008 	.word	0x20000008
 8001108:	2000013e 	.word	0x2000013e
 800110c:	20000000 	.word	0x20000000
 8001110:	20000001 	.word	0x20000001
 8001114:	20000002 	.word	0x20000002
 8001118:	20000003 	.word	0x20000003
 800111c:	20000004 	.word	0x20000004
 8001120:	20000005 	.word	0x20000005

08001124 <ChButPressed>:

bool ChButPressed()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return buttonChPressed;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <ChButPressed+0x14>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000140 	.word	0x20000140

0800113c <ForceDefaultConfig>:

static void ForceDefaultConfig()
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	config.amount_det_cables = DEFAULT_AMOUNT_DET_CABLES;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <ForceDefaultConfig+0x34>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
	config.amount_extinguisher = DEFAULT_AMOUNT_EXTINGUISHER;
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <ForceDefaultConfig+0x34>)
 8001148:	2202      	movs	r2, #2
 800114a:	705a      	strb	r2, [r3, #1]
	config.amount_zone = DEFAULT_AMOUNT_ZONE;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <ForceDefaultConfig+0x34>)
 800114e:	2201      	movs	r2, #1
 8001150:	709a      	strb	r2, [r3, #2]
	config.time_breakup_trigger = DEFAULT_TIME_BREAKUP_TRIGGER;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <ForceDefaultConfig+0x34>)
 8001154:	2200      	movs	r2, #0
 8001156:	711a      	strb	r2, [r3, #4]
	config.time_cable_trigger = DEFAULT_TIME_CABLE_TRIG;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <ForceDefaultConfig+0x34>)
 800115a:	220a      	movs	r2, #10
 800115c:	70da      	strb	r2, [r3, #3]
	config.config_mode = false;
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <ForceDefaultConfig+0x34>)
 8001160:	2200      	movs	r2, #0
 8001162:	719a      	strb	r2, [r3, #6]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <UpdateCounter>:
volatile Couter_T millis_counters[MILLIS_COUNTER_COUNT];



void UpdateCounter()
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;
	if(++millis == 1000)
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <UpdateCounter+0x98>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <UpdateCounter+0x98>)
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <UpdateCounter+0x98>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800118e:	d11c      	bne.n	80011ca <UpdateCounter+0x56>
	{
		millis = 0;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <UpdateCounter+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SECOUND_COUNTER_COUNT; ++i)
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e013      	b.n	80011c4 <UpdateCounter+0x50>
			{
				volatile Couter_T *counter = &second_counters[i];
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <UpdateCounter+0x9c>)
 80011a2:	4413      	add	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]

				if (counter->enabled)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <UpdateCounter+0x4a>
					++counter->counter;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	885b      	ldrh	r3, [r3, #2]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	805a      	strh	r2, [r3, #2]
	for (uint8_t i = 0; i < SECOUND_COUNTER_COUNT; ++i)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b0b      	cmp	r3, #11
 80011c8:	d9e8      	bls.n	800119c <UpdateCounter+0x28>
			}
	}
	for (uint8_t i = 0; i < MILLIS_COUNTER_COUNT; ++i)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	e013      	b.n	80011f8 <UpdateCounter+0x84>
	{
		volatile Couter_T *counter = &millis_counters[i];
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <UpdateCounter+0xa0>)
 80011d6:	4413      	add	r3, r2
 80011d8:	607b      	str	r3, [r7, #4]

		if (counter->enabled)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <UpdateCounter+0x7e>
			++counter->counter;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	805a      	strh	r2, [r3, #2]
	for (uint8_t i = 0; i < MILLIS_COUNTER_COUNT; ++i)
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73bb      	strb	r3, [r7, #14]
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d9e8      	bls.n	80011d0 <UpdateCounter+0x5c>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000190 	.word	0x20000190
 8001210:	20000144 	.word	0x20000144
 8001214:	20000174 	.word	0x20000174

08001218 <startCounter>:

uint16_t startCounter(volatile Couter_T *counter)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

		if (!counter->enabled)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f083 0301 	eor.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <startCounter+0x24>
		{
			counter->enabled = true;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
			counter->counter = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	805a      	strh	r2, [r3, #2]
		}

    return counter->counter;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	885b      	ldrh	r3, [r3, #2]
 8001240:	b29b      	uxth	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <stopCounter>:

void stopCounter(volatile Couter_T *counter)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]

	counter->enabled = false;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
	counter->counter = 0;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	805a      	strh	r2, [r3, #2]

}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <restartCounter>:
    counter->enabled = false;

}

void restartCounter(volatile Couter_T *counter)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	{
		counter->enabled = true;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
		counter->counter = 0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	805a      	strh	r2, [r3, #2]
	}
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <startSecondsCounter>:


uint16_t startSecondsCounter(uint8_t counter)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	return startCounter(&second_counters[counter]);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <startSecondsCounter+0x24>)
 80012a0:	4413      	add	r3, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffb8 	bl	8001218 <startCounter>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000144 	.word	0x20000144

080012b8 <startMillisCounter>:

uint16_t startMillisCounter(uint8_t counter)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	return startCounter(&millis_counters[counter]);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <startMillisCounter+0x24>)
 80012c8:	4413      	add	r3, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffa4 	bl	8001218 <startCounter>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000174 	.word	0x20000174

080012e0 <stopSecondsCounter>:

void stopSecondsCounter(uint8_t counter)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	stopCounter(&second_counters[counter]);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <stopSecondsCounter+0x20>)
 80012f0:	4413      	add	r3, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffab 	bl	800124e <stopCounter>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000144 	.word	0x20000144

08001304 <stopMillisCounter>:

void stopMillisCounter(uint8_t counter)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	stopCounter(&millis_counters[counter]);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <stopMillisCounter+0x20>)
 8001314:	4413      	add	r3, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff99 	bl	800124e <stopCounter>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000174 	.word	0x20000174

08001328 <restartSecondsCounter>:

void restartSecondsCounter(uint8_t counter)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	restartCounter(&second_counters[counter]);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <restartSecondsCounter+0x20>)
 8001338:	4413      	add	r3, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff97 	bl	800126e <restartCounter>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000144 	.word	0x20000144

0800134c <restartMillisCounter>:

void restartMillisCounter(uint8_t counter)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	restartCounter(&millis_counters[counter]);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <restartMillisCounter+0x20>)
 800135c:	4413      	add	r3, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff85 	bl	800126e <restartCounter>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000174 	.word	0x20000174

08001370 <EnabledDetCab>:
#include "adc.h"

Det_Cable det_cable[DET_CABLE_COUNT];

void EnabledDetCab(Configuration *config)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < config->amount_det_cables ; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e019      	b.n	80013b2 <EnabledDetCab+0x42>
	{
		if(i == 0)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <EnabledDetCab+0x1c>
			det_cable[3].enabled = true;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <EnabledDetCab+0x5c>)
 8001386:	2201      	movs	r2, #1
 8001388:	779a      	strb	r2, [r3, #30]
 800138a:	e00f      	b.n	80013ac <EnabledDetCab+0x3c>
		else if(i == 3)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d103      	bne.n	800139a <EnabledDetCab+0x2a>
			det_cable[0].enabled = true;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <EnabledDetCab+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e008      	b.n	80013ac <EnabledDetCab+0x3c>
		else
		det_cable[i].enabled = true;
 800139a:	490c      	ldr	r1, [pc, #48]	; (80013cc <EnabledDetCab+0x5c>)
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	440b      	add	r3, r1
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < config->amount_det_cables ; i++)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	dbdf      	blt.n	800137e <EnabledDetCab+0xe>
	}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000194 	.word	0x20000194

080013d0 <DetCableProcess>:

void DetCableProcess()
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0

	for(int i = 0; i < DET_CABLE_COUNT ; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	e03a      	b.n	8001452 <DetCableProcess+0x82>
	{
		Det_Cable *cable;
		cable = &det_cable[i];
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <DetCableProcess+0x98>)
 80013e8:	4413      	add	r3, r2
 80013ea:	603b      	str	r3, [r7, #0]

		if(cable->enabled == true)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d02b      	beq.n	800144c <DetCableProcess+0x7c>
		{
			cable->adc_value = value[i];
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <DetCableProcess+0x9c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	805a      	strh	r2, [r3, #2]

			cable->filter_triggered = (cable->adc_value >= DET_CABLE_TRIGGERED) ? det_cable[i].filter_triggered + 1 : 0;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800140a:	4293      	cmp	r3, r2
 800140c:	d90b      	bls.n	8001426 <DetCableProcess+0x56>
 800140e:	4916      	ldr	r1, [pc, #88]	; (8001468 <DetCableProcess+0x98>)
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	440b      	add	r3, r1
 800141c:	3305      	adds	r3, #5
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	e000      	b.n	8001428 <DetCableProcess+0x58>
 8001426:	2200      	movs	r2, #0
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	715a      	strb	r2, [r3, #5]
			cable->triggered = (cable->filter_triggered >= DET_CABLE_TRIGGERED_FILTER) ? true : false;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	2bc7      	cmp	r3, #199	; 0xc7
 8001432:	bf8c      	ite	hi
 8001434:	2301      	movhi	r3, #1
 8001436:	2300      	movls	r3, #0
 8001438:	b2da      	uxtb	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	711a      	strb	r2, [r3, #4]

            if(cable->filter_triggered >=254)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	2bfd      	cmp	r3, #253	; 0xfd
 8001444:	d902      	bls.n	800144c <DetCableProcess+0x7c>
            	cable->filter_triggered = 50;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2232      	movs	r2, #50	; 0x32
 800144a:	715a      	strb	r2, [r3, #5]
	for(int i = 0; i < DET_CABLE_COUNT ; i++)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b03      	cmp	r3, #3
 8001456:	ddc1      	ble.n	80013dc <DetCableProcess+0xc>
			//	not_connected = false;
		}

	}

}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000194 	.word	0x20000194
 800146c:	2000007c 	.word	0x2000007c

08001470 <DetCableService>:

bool DetCableService()
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

	for(int i = 0; i < DET_CABLE_COUNT ; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e067      	b.n	800154c <DetCableService+0xdc>
	{
		Det_Cable *cable_service;
		cable_service = &det_cable[i];
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4a36      	ldr	r2, [pc, #216]	; (8001560 <DetCableService+0xf0>)
 8001488:	4413      	add	r3, r2
 800148a:	603b      	str	r3, [r7, #0]

		if(cable_service->enabled == true)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d058      	beq.n	8001546 <DetCableService+0xd6>
		{
			cable_service->adc_value = value[i];
 8001494:	4a33      	ldr	r2, [pc, #204]	; (8001564 <DetCableService+0xf4>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800149c:	b29a      	uxth	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	805a      	strh	r2, [r3, #2]

			cable_service->filter_triggered = (cable_service->adc_value >= DET_CABLE_TRIGGERED) ? det_cable[i].filter_triggered + 1 : 0;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	885b      	ldrh	r3, [r3, #2]
 80014a6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d90b      	bls.n	80014c6 <DetCableService+0x56>
 80014ae:	492c      	ldr	r1, [pc, #176]	; (8001560 <DetCableService+0xf0>)
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	440b      	add	r3, r1
 80014bc:	3305      	adds	r3, #5
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	e000      	b.n	80014c8 <DetCableService+0x58>
 80014c6:	2200      	movs	r2, #0
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	715a      	strb	r2, [r3, #5]

			if(cable_service->filter_triggered == 200)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	2bc8      	cmp	r3, #200	; 0xc8
 80014d2:	d102      	bne.n	80014da <DetCableService+0x6a>
				cable_service->filter_triggered = 0;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	715a      	strb	r2, [r3, #5]

			if(cable_service->filter_triggered >= DET_CABLE_TRIGGERED_FILTER && cable_service->is_triggered == false)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2bc7      	cmp	r3, #199	; 0xc7
 80014e0:	d909      	bls.n	80014f6 <DetCableService+0x86>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7a1b      	ldrb	r3, [r3, #8]
 80014e6:	f083 0301 	eor.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <DetCableService+0x86>
			{
				cable_service->is_triggered = true;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	721a      	strb	r2, [r3, #8]
			}
			if(cable_service->is_triggered == true && cable_service->adc_value <= DET_CABLE_TRIGGERED)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	7a1b      	ldrb	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <DetCableService+0xa8>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001506:	4293      	cmp	r3, r2
 8001508:	d806      	bhi.n	8001518 <DetCableService+0xa8>
				cable_service->filter_trig_off++;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	7a5b      	ldrb	r3, [r3, #9]
 800150e:	3301      	adds	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	725a      	strb	r2, [r3, #9]
 8001516:	e002      	b.n	800151e <DetCableService+0xae>
			else
				cable_service->filter_trig_off = 0;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	725a      	strb	r2, [r3, #9]

			if(cable_service->filter_trig_off == 200)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7a5b      	ldrb	r3, [r3, #9]
 8001522:	2bc8      	cmp	r3, #200	; 0xc8
 8001524:	d102      	bne.n	800152c <DetCableService+0xbc>
				cable_service->filter_trig_off = 0;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	725a      	strb	r2, [r3, #9]

			if(cable_service->filter_trig_off >= DET_CABLE_TRIGGERED_FILTER)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7a5b      	ldrb	r3, [r3, #9]
 8001530:	2bc7      	cmp	r3, #199	; 0xc7
 8001532:	d902      	bls.n	800153a <DetCableService+0xca>
				cable_service->is_triggered = false;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	721a      	strb	r2, [r3, #8]

			if(cable_service->is_triggered == true)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7a1b      	ldrb	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <DetCableService+0xd6>
				return true;
 8001542:	2301      	movs	r3, #1
 8001544:	e006      	b.n	8001554 <DetCableService+0xe4>
	for(int i = 0; i < DET_CABLE_COUNT ; i++)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	dd94      	ble.n	800147c <DetCableService+0xc>
		}
	}
		return false;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000194 	.word	0x20000194
 8001564:	2000007c 	.word	0x2000007c

08001568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_DMA_Init+0x38>)
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <MX_DMA_Init+0x38>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6493      	str	r3, [r2, #72]	; 0x48
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_DMA_Init+0x38>)
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200b      	movs	r0, #11
 800158c:	f004 f84b 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001590:	200b      	movs	r0, #11
 8001592:	f004 f864 	bl	800565e <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <GetParameter>:
				[3] = { .is_connected = true }
		};


void GetParameter(Configuration *config)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	for(uint8_t i; i < config->amount_extinguisher; i++)
 80015ac:	e00a      	b.n	80015c4 <GetParameter+0x20>
	{
		extinguisher[i].enabled = true;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	490a      	ldr	r1, [pc, #40]	; (80015dc <GetParameter+0x38>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i; i < config->amount_extinguisher; i++)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3ef      	bcc.n	80015ae <GetParameter+0xa>
	}
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	20000010 	.word	0x20000010

080015e0 <ExtinguisherProcess>:

void ExtinguisherProcess(Configuration *config, bool wires_is_ok)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	static bool triggered_on;

	BreakUp *breakup_ext;
	breakup_ext = &breakup;
 80015ec:	4b90      	ldr	r3, [pc, #576]	; (8001830 <ExtinguisherProcess+0x250>)
 80015ee:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 4; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
 80015f4:	e1a9      	b.n	800194a <ExtinguisherProcess+0x36a>
	{
		Det_Cable *cable;
		cable = &det_cable[i];
 80015f6:	7dfa      	ldrb	r2, [r7, #23]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4a8c      	ldr	r2, [pc, #560]	; (8001834 <ExtinguisherProcess+0x254>)
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

		if(cable->triggered == true && cable->is_triggered == false && wires_is_ok == true && breakup_ext->triggered == false)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	791b      	ldrb	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8160 	beq.w	80018d0 <ExtinguisherProcess+0x2f0>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	7a1b      	ldrb	r3, [r3, #8]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8158 	beq.w	80018d0 <ExtinguisherProcess+0x2f0>
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8154 	beq.w	80018d0 <ExtinguisherProcess+0x2f0>
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 814c 	beq.w	80018d0 <ExtinguisherProcess+0x2f0>
		{
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163e:	487e      	ldr	r0, [pc, #504]	; (8001838 <ExtinguisherProcess+0x258>)
 8001640:	f004 fd12 	bl	8006068 <HAL_GPIO_WritePin>
			TimerToTrigExt(config->time_cable_trigger);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	78db      	ldrb	r3, [r3, #3]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fa85 	bl	8001b58 <TimerToTrigExt>
			switch(config->amount_zone)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	789b      	ldrb	r3, [r3, #2]
 8001652:	3b01      	subs	r3, #1
 8001654:	2b03      	cmp	r3, #3
 8001656:	f200 8135 	bhi.w	80018c4 <ExtinguisherProcess+0x2e4>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <ExtinguisherProcess+0x80>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	08001691 	.word	0x08001691
 8001668:	08001771 	.word	0x08001771
 800166c:	0800183d 	.word	0x0800183d
					{
					case 1:
							if(cable->enabled == true)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 811e 	beq.w	80018b6 <ExtinguisherProcess+0x2d6>
							{
								ExtinguisherTriggered(config->amount_zone, 1, 4);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	789b      	ldrb	r3, [r3, #2]
 800167e:	2204      	movs	r2, #4
 8001680:	2101      	movs	r1, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f972 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 8001688:	2003      	movs	r0, #3
 800168a:	f001 fde9 	bl	8003260 <ToSdCard>
							}
							break;
 800168e:	e112      	b.n	80018b6 <ExtinguisherProcess+0x2d6>
					case 2:
						if(config->amount_det_cables == 2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d11d      	bne.n	80016d4 <ExtinguisherProcess+0xf4>
						{
							if(i == 3)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d10a      	bne.n	80016b4 <ExtinguisherProcess+0xd4>
							{
							    ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7898      	ldrb	r0, [r3, #2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2101      	movs	r1, #1
 80016aa:	f000 f95f 	bl	800196c <ExtinguisherTriggered>
							    ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f001 fdd6 	bl	8003260 <ToSdCard>
							}
							if(i == 1)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 80ff 	bne.w	80018ba <ExtinguisherProcess+0x2da>
							{
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7898      	ldrb	r0, [r3, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2102      	movs	r1, #2
 80016c8:	f000 f950 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 80016cc:	2004      	movs	r0, #4
 80016ce:	f001 fdc7 	bl	8003260 <ToSdCard>
							{
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
							}
						}
						break;
 80016d2:	e0f2      	b.n	80018ba <ExtinguisherProcess+0x2da>
						else if(config->amount_det_cables == 3)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d120      	bne.n	800171e <ExtinguisherProcess+0x13e>
							if(i == 3 || i == 1)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d002      	beq.n	80016e8 <ExtinguisherProcess+0x108>
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10a      	bne.n	80016fe <ExtinguisherProcess+0x11e>
								ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7898      	ldrb	r0, [r3, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2101      	movs	r1, #1
 80016f4:	f000 f93a 	bl	800196c <ExtinguisherTriggered>
							    ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 fdb1 	bl	8003260 <ToSdCard>
							if(i == 2)
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 80da 	bne.w	80018ba <ExtinguisherProcess+0x2da>
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7898      	ldrb	r0, [r3, #2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	461a      	mov	r2, r3
 8001710:	2102      	movs	r1, #2
 8001712:	f000 f92b 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 8001716:	2004      	movs	r0, #4
 8001718:	f001 fda2 	bl	8003260 <ToSdCard>
						break;
 800171c:	e0cd      	b.n	80018ba <ExtinguisherProcess+0x2da>
						else if(config->amount_det_cables == 4)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b04      	cmp	r3, #4
 8001724:	f040 80c9 	bne.w	80018ba <ExtinguisherProcess+0x2da>
							if(i == 3 || i == 1)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d002      	beq.n	8001734 <ExtinguisherProcess+0x154>
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10a      	bne.n	800174a <ExtinguisherProcess+0x16a>
								ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7898      	ldrb	r0, [r3, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	461a      	mov	r2, r3
 800173e:	2101      	movs	r1, #1
 8001740:	f000 f914 	bl	800196c <ExtinguisherTriggered>
							    ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 8001744:	2003      	movs	r0, #3
 8001746:	f001 fd8b 	bl	8003260 <ToSdCard>
							if(i == 2 || i == 0)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d003      	beq.n	8001758 <ExtinguisherProcess+0x178>
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80b1 	bne.w	80018ba <ExtinguisherProcess+0x2da>
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7898      	ldrb	r0, [r3, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	461a      	mov	r2, r3
 8001762:	2102      	movs	r1, #2
 8001764:	f000 f902 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 8001768:	2004      	movs	r0, #4
 800176a:	f001 fd79 	bl	8003260 <ToSdCard>
						break;
 800176e:	e0a4      	b.n	80018ba <ExtinguisherProcess+0x2da>
					case 3:
						if(config->amount_det_cables == 3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d128      	bne.n	80017ca <ExtinguisherProcess+0x1ea>
						{
							if(i == 3)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d10a      	bne.n	8001794 <ExtinguisherProcess+0x1b4>
							{
							    ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7898      	ldrb	r0, [r3, #2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	461a      	mov	r2, r3
 8001788:	2101      	movs	r1, #1
 800178a:	f000 f8ef 	bl	800196c <ExtinguisherTriggered>
							    ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 800178e:	2003      	movs	r0, #3
 8001790:	f001 fd66 	bl	8003260 <ToSdCard>
							}
							if(i == 1)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10a      	bne.n	80017b0 <ExtinguisherProcess+0x1d0>
							{
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7898      	ldrb	r0, [r3, #2]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	785b      	ldrb	r3, [r3, #1]
 80017a2:	461a      	mov	r2, r3
 80017a4:	2102      	movs	r1, #2
 80017a6:	f000 f8e1 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 80017aa:	2004      	movs	r0, #4
 80017ac:	f001 fd58 	bl	8003260 <ToSdCard>
							}
							if(i == 2)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 8083 	bne.w	80018be <ExtinguisherProcess+0x2de>
								ExtinguisherTriggered(config->amount_zone, 3, config->amount_extinguisher);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7898      	ldrb	r0, [r3, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	461a      	mov	r2, r3
 80017c2:	2103      	movs	r1, #3
 80017c4:	f000 f8d2 	bl	800196c <ExtinguisherTriggered>
							{
								ExtinguisherTriggered(config->amount_zone, 3, config->amount_extinguisher);
								ToSdCard(WYZWOLENIE_KABEL_STREFA_3);
							}
						}
						break;
 80017c8:	e079      	b.n	80018be <ExtinguisherProcess+0x2de>
						else if(config->amount_det_cables == 4)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d175      	bne.n	80018be <ExtinguisherProcess+0x2de>
							if(i == 3 || i == 1)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d002      	beq.n	80017de <ExtinguisherProcess+0x1fe>
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10a      	bne.n	80017f4 <ExtinguisherProcess+0x214>
								ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7898      	ldrb	r0, [r3, #2]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	461a      	mov	r2, r3
 80017e8:	2101      	movs	r1, #1
 80017ea:	f000 f8bf 	bl	800196c <ExtinguisherTriggered>
							    ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f001 fd36 	bl	8003260 <ToSdCard>
							if(i == 2)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d10a      	bne.n	8001810 <ExtinguisherProcess+0x230>
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7898      	ldrb	r0, [r3, #2]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	461a      	mov	r2, r3
 8001804:	2102      	movs	r1, #2
 8001806:	f000 f8b1 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 800180a:	2004      	movs	r0, #4
 800180c:	f001 fd28 	bl	8003260 <ToSdCard>
							if(i == 0)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d153      	bne.n	80018be <ExtinguisherProcess+0x2de>
								ExtinguisherTriggered(config->amount_zone, 3, config->amount_extinguisher);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7898      	ldrb	r0, [r3, #2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	461a      	mov	r2, r3
 8001820:	2103      	movs	r1, #3
 8001822:	f000 f8a3 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_3);
 8001826:	2005      	movs	r0, #5
 8001828:	f001 fd1a 	bl	8003260 <ToSdCard>
						break;
 800182c:	e047      	b.n	80018be <ExtinguisherProcess+0x2de>
 800182e:	bf00      	nop
 8001830:	20000138 	.word	0x20000138
 8001834:	20000194 	.word	0x20000194
 8001838:	48000400 	.word	0x48000400
					case 4:
						if(config->amount_det_cables == 4)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d13e      	bne.n	80018c2 <ExtinguisherProcess+0x2e2>
						{
							if(i == 3)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d10a      	bne.n	8001860 <ExtinguisherProcess+0x280>
							{
								ExtinguisherTriggered(config->amount_zone, 1, config->amount_extinguisher);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7898      	ldrb	r0, [r3, #2]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	461a      	mov	r2, r3
 8001854:	2101      	movs	r1, #1
 8001856:	f000 f889 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_1);
 800185a:	2003      	movs	r0, #3
 800185c:	f001 fd00 	bl	8003260 <ToSdCard>
							}
							if(i == 1)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10a      	bne.n	800187c <ExtinguisherProcess+0x29c>
							{
								ExtinguisherTriggered(config->amount_zone, 2, config->amount_extinguisher);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7898      	ldrb	r0, [r3, #2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	2102      	movs	r1, #2
 8001872:	f000 f87b 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_2);
 8001876:	2004      	movs	r0, #4
 8001878:	f001 fcf2 	bl	8003260 <ToSdCard>
							}
							if(i == 2)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d10a      	bne.n	8001898 <ExtinguisherProcess+0x2b8>
							{
								ExtinguisherTriggered(config->amount_zone, 3, config->amount_extinguisher);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7898      	ldrb	r0, [r3, #2]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	461a      	mov	r2, r3
 800188c:	2103      	movs	r1, #3
 800188e:	f000 f86d 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_3);
 8001892:	2005      	movs	r0, #5
 8001894:	f001 fce4 	bl	8003260 <ToSdCard>
							}
							if(i == 0)
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <ExtinguisherProcess+0x2e2>
							{
								ExtinguisherTriggered(config->amount_zone, 4, config->amount_extinguisher);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7898      	ldrb	r0, [r3, #2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	461a      	mov	r2, r3
 80018a8:	2104      	movs	r1, #4
 80018aa:	f000 f85f 	bl	800196c <ExtinguisherTriggered>
								ToSdCard(WYZWOLENIE_KABEL_STREFA_4);
 80018ae:	2006      	movs	r0, #6
 80018b0:	f001 fcd6 	bl	8003260 <ToSdCard>
							}
						}
						break;
 80018b4:	e005      	b.n	80018c2 <ExtinguisherProcess+0x2e2>
							break;
 80018b6:	bf00      	nop
 80018b8:	e004      	b.n	80018c4 <ExtinguisherProcess+0x2e4>
						break;
 80018ba:	bf00      	nop
 80018bc:	e002      	b.n	80018c4 <ExtinguisherProcess+0x2e4>
						break;
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <ExtinguisherProcess+0x2e4>
						break;
 80018c2:	bf00      	nop
					}
			cable->is_triggered = true;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	721a      	strb	r2, [r3, #8]
			triggered_on = true;
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <ExtinguisherProcess+0x37c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]

		}
		if(triggered_on == true || breakup_ext->triggered == true)
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <ExtinguisherProcess+0x37c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d103      	bne.n	80018e0 <ExtinguisherProcess+0x300>
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d031      	beq.n	8001944 <ExtinguisherProcess+0x364>
		{
			if(startSecondsCounter(TRIGGERED_EXT_OFF_TIMER_1) >= TRIGGERED_EXT_OFF_TIMER_2)
 80018e0:	2005      	movs	r0, #5
 80018e2:	f7ff fcd5 	bl	8001290 <startSecondsCounter>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d92b      	bls.n	8001944 <ExtinguisherProcess+0x364>
			{
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	481b      	ldr	r0, [pc, #108]	; (8001960 <ExtinguisherProcess+0x380>)
 80018f2:	f004 fbb9 	bl	8006068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <ExtinguisherProcess+0x380>)
 80018fe:	f004 fbb3 	bl	8006068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	4816      	ldr	r0, [pc, #88]	; (8001964 <ExtinguisherProcess+0x384>)
 800190a:	f004 fbad 	bl	8006068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GAS1_GPIO_Port, GAS1_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <ExtinguisherProcess+0x380>)
 8001916:	f004 fba7 	bl	8006068 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GAS2_GPIO_Port, GAS2_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2104      	movs	r1, #4
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <ExtinguisherProcess+0x388>)
 8001920:	f004 fba2 	bl	8006068 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GAS3_GPIO_Port, GAS3_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <ExtinguisherProcess+0x384>)
 800192a:	f004 fb9d 	bl	8006068 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GAS4_GPIO_Port, GAS4_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <ExtinguisherProcess+0x384>)
 8001934:	f004 fb98 	bl	8006068 <HAL_GPIO_WritePin>
				triggered_on = false;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <ExtinguisherProcess+0x37c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
				stopSecondsCounter(TRIGGERED_EXT_OFF_TIMER_1);
 800193e:	2005      	movs	r0, #5
 8001940:	f7ff fcce 	bl	80012e0 <stopSecondsCounter>
	for(uint8_t i = 0; i < 4; i++)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	3301      	adds	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b03      	cmp	r3, #3
 800194e:	f67f ae52 	bls.w	80015f6 <ExtinguisherProcess+0x16>
			}
		}
	}
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001be 	.word	0x200001be
 8001960:	48000800 	.word	0x48000800
 8001964:	48000400 	.word	0x48000400
 8001968:	48000c00 	.word	0x48000c00

0800196c <ExtinguisherTriggered>:

void ExtinguisherTriggered(uint8_t how_many_zone, uint8_t wchich_zone, uint8_t ext_count)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	460b      	mov	r3, r1
 8001978:	71bb      	strb	r3, [r7, #6]
 800197a:	4613      	mov	r3, r2
 800197c:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 1; i <= EXTINGUISHER_COUNT_2; i++)
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e098      	b.n	8001ab6 <ExtinguisherTriggered+0x14a>
		{
		    Extinguisher *ext;
			ext = &extinguisher[i-1];
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <ExtinguisherTriggered+0x15c>)
 8001990:	4413      	add	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
			switch(how_many_zone)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3b01      	subs	r3, #1
 8001998:	2b03      	cmp	r3, #3
 800199a:	f200 8089 	bhi.w	8001ab0 <ExtinguisherTriggered+0x144>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <ExtinguisherTriggered+0x38>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019cd 	.word	0x080019cd
 80019ac:	08001a29 	.word	0x08001a29
 80019b0:	08001a75 	.word	0x08001a75
			{
			case 1:
				if(ext->enabled == true)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d074      	beq.n	8001aa6 <ExtinguisherTriggered+0x13a>
				{
					WchichExtinguisher(i);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f884 	bl	8001acc <WchichExtinguisher>
					ext->is_triggered = true;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2201      	movs	r2, #1
 80019c8:	709a      	strb	r2, [r3, #2]
				}
				break;
 80019ca:	e06c      	b.n	8001aa6 <ExtinguisherTriggered+0x13a>
			case 2:
				if(wchich_zone == 1)
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d10f      	bne.n	80019f2 <ExtinguisherTriggered+0x86>
				{
					if(ext_count == 2)
 80019d2:	797b      	ldrb	r3, [r7, #5]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d103      	bne.n	80019e0 <ExtinguisherTriggered+0x74>
					    WchichExtinguisher(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f000 f877 	bl	8001acc <WchichExtinguisher>
 80019de:	e008      	b.n	80019f2 <ExtinguisherTriggered+0x86>
					else if(ext_count >= 3)
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d905      	bls.n	80019f2 <ExtinguisherTriggered+0x86>
					{
						WchichExtinguisher(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 f870 	bl	8001acc <WchichExtinguisher>
					    WchichExtinguisher(2);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f000 f86d 	bl	8001acc <WchichExtinguisher>
					}
				}
				if(wchich_zone == 2)
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d158      	bne.n	8001aaa <ExtinguisherTriggered+0x13e>
				{
					if(ext_count == 2)
 80019f8:	797b      	ldrb	r3, [r7, #5]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d103      	bne.n	8001a06 <ExtinguisherTriggered+0x9a>
					    WchichExtinguisher(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f000 f864 	bl	8001acc <WchichExtinguisher>
					{
						WchichExtinguisher(3);
					    WchichExtinguisher(4);
					}
				}
				break;
 8001a04:	e051      	b.n	8001aaa <ExtinguisherTriggered+0x13e>
					else if(ext_count == 3)
 8001a06:	797b      	ldrb	r3, [r7, #5]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d103      	bne.n	8001a14 <ExtinguisherTriggered+0xa8>
						WchichExtinguisher(3);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f85d 	bl	8001acc <WchichExtinguisher>
				break;
 8001a12:	e04a      	b.n	8001aaa <ExtinguisherTriggered+0x13e>
					else if(ext_count == 4)
 8001a14:	797b      	ldrb	r3, [r7, #5]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d147      	bne.n	8001aaa <ExtinguisherTriggered+0x13e>
						WchichExtinguisher(3);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 f856 	bl	8001acc <WchichExtinguisher>
					    WchichExtinguisher(4);
 8001a20:	2004      	movs	r0, #4
 8001a22:	f000 f853 	bl	8001acc <WchichExtinguisher>
				break;
 8001a26:	e040      	b.n	8001aaa <ExtinguisherTriggered+0x13e>
			case 3:
				if(wchich_zone == 1)
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10f      	bne.n	8001a4e <ExtinguisherTriggered+0xe2>
				{
					if(ext_count == 3)
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d103      	bne.n	8001a3c <ExtinguisherTriggered+0xd0>
					    WchichExtinguisher(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f000 f849 	bl	8001acc <WchichExtinguisher>
 8001a3a:	e008      	b.n	8001a4e <ExtinguisherTriggered+0xe2>

					else if(ext_count == 4)
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d105      	bne.n	8001a4e <ExtinguisherTriggered+0xe2>
					{
						WchichExtinguisher(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 f842 	bl	8001acc <WchichExtinguisher>
					    WchichExtinguisher(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f000 f83f 	bl	8001acc <WchichExtinguisher>
					}
				}
				if(wchich_zone == 2)
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d102      	bne.n	8001a5a <ExtinguisherTriggered+0xee>
					WchichExtinguisher(2);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f000 f839 	bl	8001acc <WchichExtinguisher>
				if(wchich_zone == 3)
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d102      	bne.n	8001a66 <ExtinguisherTriggered+0xfa>
					WchichExtinguisher(3);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f833 	bl	8001acc <WchichExtinguisher>
				if(wchich_zone == 4)
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d120      	bne.n	8001aae <ExtinguisherTriggered+0x142>
					WchichExtinguisher(4);
 8001a6c:	2004      	movs	r0, #4
 8001a6e:	f000 f82d 	bl	8001acc <WchichExtinguisher>
			    break;
 8001a72:	e01c      	b.n	8001aae <ExtinguisherTriggered+0x142>
			case 4:
				if(wchich_zone == 1)
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <ExtinguisherTriggered+0x114>
				WchichExtinguisher(1);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f000 f826 	bl	8001acc <WchichExtinguisher>
				if(wchich_zone == 2)
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d102      	bne.n	8001a8c <ExtinguisherTriggered+0x120>
				WchichExtinguisher(2);
 8001a86:	2002      	movs	r0, #2
 8001a88:	f000 f820 	bl	8001acc <WchichExtinguisher>
				if(wchich_zone == 3)
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d102      	bne.n	8001a98 <ExtinguisherTriggered+0x12c>
				WchichExtinguisher(3);
 8001a92:	2003      	movs	r0, #3
 8001a94:	f000 f81a 	bl	8001acc <WchichExtinguisher>
				if(wchich_zone == 4)
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d108      	bne.n	8001ab0 <ExtinguisherTriggered+0x144>
				WchichExtinguisher(4);
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	f000 f814 	bl	8001acc <WchichExtinguisher>
 8001aa4:	e004      	b.n	8001ab0 <ExtinguisherTriggered+0x144>
				break;
 8001aa6:	bf00      	nop
 8001aa8:	e002      	b.n	8001ab0 <ExtinguisherTriggered+0x144>
				break;
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <ExtinguisherTriggered+0x144>
			    break;
 8001aae:	bf00      	nop
	for(uint8_t i = 1; i <= EXTINGUISHER_COUNT_2; i++)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	f67f af63 	bls.w	8001984 <ExtinguisherTriggered+0x18>
			}
		}
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000010 	.word	0x20000010

08001acc <WchichExtinguisher>:

void WchichExtinguisher(uint8_t number)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	switch(number)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d82f      	bhi.n	8001b3e <WchichExtinguisher+0x72>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <WchichExtinguisher+0x18>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b09 	.word	0x08001b09
 8001aec:	08001b1b 	.word	0x08001b1b
 8001af0:	08001b2d 	.word	0x08001b2d
	{
	case 1:
		HAL_GPIO_WritePin(GAS1_GPIO_Port, GAS1_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	4813      	ldr	r0, [pc, #76]	; (8001b48 <WchichExtinguisher+0x7c>)
 8001afc:	f004 fab4 	bl	8006068 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GAS4_GPIO_Port, GAS4_Pin, GPIO_PIN_SET);
		extinguisher[0].is_triggered = true;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <WchichExtinguisher+0x80>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	709a      	strb	r2, [r3, #2]
		break;
 8001b06:	e01a      	b.n	8001b3e <WchichExtinguisher+0x72>
	case 2:
		HAL_GPIO_WritePin(GAS2_GPIO_Port, GAS2_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <WchichExtinguisher+0x84>)
 8001b0e:	f004 faab 	bl	8006068 <HAL_GPIO_WritePin>
		extinguisher[1].is_triggered = true;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <WchichExtinguisher+0x80>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	715a      	strb	r2, [r3, #5]
		break;
 8001b18:	e011      	b.n	8001b3e <WchichExtinguisher+0x72>
	case 3:
		HAL_GPIO_WritePin(GAS3_GPIO_Port, GAS3_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <WchichExtinguisher+0x88>)
 8001b20:	f004 faa2 	bl	8006068 <HAL_GPIO_WritePin>
		extinguisher[2].is_triggered = true;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <WchichExtinguisher+0x80>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	721a      	strb	r2, [r3, #8]
		break;
 8001b2a:	e008      	b.n	8001b3e <WchichExtinguisher+0x72>
	case 4:
		HAL_GPIO_WritePin(GAS4_GPIO_Port, GAS4_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <WchichExtinguisher+0x88>)
 8001b32:	f004 fa99 	bl	8006068 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GAS1_GPIO_Port, GAS1_Pin, GPIO_PIN_SET);
		extinguisher[3].is_triggered = true;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <WchichExtinguisher+0x80>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	72da      	strb	r2, [r3, #11]
		break;
 8001b3c:	bf00      	nop
	}
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	20000010 	.word	0x20000010
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48000400 	.word	0x48000400

08001b58 <TimerToTrigExt>:

static void TimerToTrigExt(uint8_t time)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	static uint8_t ext_timer = 0;
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	4857      	ldr	r0, [pc, #348]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001b68:	f004 fa7e 	bl	8006068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4854      	ldr	r0, [pc, #336]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001b74:	f004 fa78 	bl	8006068 <HAL_GPIO_WritePin>
	stopSecondsCounter(TRIGGERED_EXT_OFF_TIMER_1);
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f7ff fbb1 	bl	80012e0 <stopSecondsCounter>

	while(ext_timer <= (time + Delay()))
 8001b7e:	e078      	b.n	8001c72 <TimerToTrigExt+0x11a>
	{
		if(ext_timer < (time/2) + Delay())
 8001b80:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461c      	mov	r4, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	f000 f8a1 	bl	8001cd4 <Delay>
 8001b92:	4603      	mov	r3, r0
 8001b94:	442b      	add	r3, r5
 8001b96:	429c      	cmp	r4, r3
 8001b98:	da13      	bge.n	8001bc2 <TimerToTrigExt+0x6a>
		{
			if(startMillisCounter(TIMER_EXTINGUISHER_2) >= EXT_LED_TIMER_1)
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f7ff fb8c 	bl	80012b8 <startMillisCounter>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001ba6:	d355      	bcc.n	8001c54 <TimerToTrigExt+0xfc>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001bac:	f004 fa74 	bl	8006098 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb4:	4843      	ldr	r0, [pc, #268]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001bb6:	f004 fa6f 	bl	8006098 <HAL_GPIO_TogglePin>
				restartMillisCounter(TIMER_EXTINGUISHER_2);
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7ff fbc6 	bl	800134c <restartMillisCounter>
 8001bc0:	e048      	b.n	8001c54 <TimerToTrigExt+0xfc>
			}
		}
		else if(ext_timer >= ((time/2)+ Delay()) && ext_timer < ((time - 3) + Delay()))
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461d      	mov	r5, r3
 8001bd0:	f000 f880 	bl	8001cd4 <Delay>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	442b      	add	r3, r5
 8001bd8:	429c      	cmp	r4, r3
 8001bda:	db1e      	blt.n	8001c1a <TimerToTrigExt+0xc2>
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461d      	mov	r5, r3
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	1edc      	subs	r4, r3, #3
 8001be6:	f000 f875 	bl	8001cd4 <Delay>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4423      	add	r3, r4
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	da13      	bge.n	8001c1a <TimerToTrigExt+0xc2>
		{
			if(startMillisCounter(TIMER_EXTINGUISHER_2) >= EXT_LED_TIMER_2)
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7ff fb60 	bl	80012b8 <startMillisCounter>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bfe:	d329      	bcc.n	8001c54 <TimerToTrigExt+0xfc>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	4830      	ldr	r0, [pc, #192]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001c04:	f004 fa48 	bl	8006098 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001c0e:	f004 fa43 	bl	8006098 <HAL_GPIO_TogglePin>
				restartMillisCounter(TIMER_EXTINGUISHER_2);
 8001c12:	2002      	movs	r0, #2
 8001c14:	f7ff fb9a 	bl	800134c <restartMillisCounter>
			if(startMillisCounter(TIMER_EXTINGUISHER_2) >= EXT_LED_TIMER_2)
 8001c18:	e01c      	b.n	8001c54 <TimerToTrigExt+0xfc>
			}
		}
		else if(ext_timer >= ((time - 3) + Delay()))
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461d      	mov	r5, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	1edc      	subs	r4, r3, #3
 8001c24:	f000 f856 	bl	8001cd4 <Delay>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4423      	add	r3, r4
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	db11      	blt.n	8001c54 <TimerToTrigExt+0xfc>
		{
			if(startMillisCounter(TIMER_EXTINGUISHER_2) >= EXT_LED_TIMER_3)
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff fb41 	bl	80012b8 <startMillisCounter>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2bc7      	cmp	r3, #199	; 0xc7
 8001c3a:	d90b      	bls.n	8001c54 <TimerToTrigExt+0xfc>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001c40:	f004 fa2a 	bl	8006098 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001c4a:	f004 fa25 	bl	8006098 <HAL_GPIO_TogglePin>
				restartMillisCounter(TIMER_EXTINGUISHER_2);
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f7ff fb7c 	bl	800134c <restartMillisCounter>
			}
		}
		if(startSecondsCounter(TIMER_EXTINGUISHER_1) >= TIMER_EXTINGUISHER_SEC)
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff fb1b 	bl	8001290 <startSecondsCounter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <TimerToTrigExt+0x11a>
		{
			ext_timer++;
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001c6a:	701a      	strb	r2, [r3, #0]
			restartSecondsCounter(TIMER_EXTINGUISHER_1);
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f7ff fb5b 	bl	8001328 <restartSecondsCounter>
	while(ext_timer <= (time + Delay()))
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461d      	mov	r5, r3
 8001c78:	79fc      	ldrb	r4, [r7, #7]
 8001c7a:	f000 f82b 	bl	8001cd4 <Delay>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4423      	add	r3, r4
 8001c82:	429d      	cmp	r5, r3
 8001c84:	f77f af7c 	ble.w	8001b80 <TimerToTrigExt+0x28>
		}
	}
	stopMillisCounter(TIMER_EXTINGUISHER_2);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff fb3b 	bl	8001304 <stopMillisCounter>
	stopSecondsCounter(TIMER_EXTINGUISHER_1);
 8001c8e:	2004      	movs	r0, #4
 8001c90:	f7ff fb26 	bl	80012e0 <stopSecondsCounter>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001c9a:	f004 f9e5 	bl	8006068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <TimerToTrigExt+0x16c>)
 8001ca6:	f004 f9df 	bl	8006068 <HAL_GPIO_WritePin>
	delay = 0;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <TimerToTrigExt+0x174>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
	max_delay_count = 0;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <TimerToTrigExt+0x178>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]

	ext_timer = 0;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <TimerToTrigExt+0x170>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	48000800 	.word	0x48000800
 8001cc8:	200001bf 	.word	0x200001bf
 8001ccc:	200001bd 	.word	0x200001bd
 8001cd0:	200001bc 	.word	0x200001bc

08001cd4 <Delay>:

static uint8_t Delay()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	static uint16_t delay_time_adc = 0;

	delay_time_adc = value[4];
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <Delay+0x54>)
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <Delay+0x58>)
 8001ce0:	801a      	strh	r2, [r3, #0]

	if(delay_time_adc >= DELAY_TRIGGER_ON && max_delay_count < DELAY_MAX_COUNT)
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <Delay+0x58>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d918      	bls.n	8001d20 <Delay+0x4c>
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <Delay+0x5c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d814      	bhi.n	8001d20 <Delay+0x4c>
	{
		delay = delay + config.time_delay_trigger;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <Delay+0x60>)
 8001cf8:	795a      	ldrb	r2, [r3, #5]
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <Delay+0x64>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <Delay+0x64>)
 8001d04:	701a      	strb	r2, [r3, #0]
		max_delay_count++;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <Delay+0x5c>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <Delay+0x5c>)
 8001d10:	701a      	strb	r2, [r3, #0]
		ToSdCard(OPOZNIENIE_ZADZIALANIA);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f001 faa4 	bl	8003260 <ToSdCard>
		HAL_Delay(300);
 8001d18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d1c:	f002 f994 	bl	8004048 <HAL_Delay>
	}
	return delay;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <Delay+0x64>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000007c 	.word	0x2000007c
 8001d2c:	200001c0 	.word	0x200001c0
 8001d30:	200001bc 	.word	0x200001bc
 8001d34:	20000008 	.word	0x20000008
 8001d38:	200001bd 	.word	0x200001bd

08001d3c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2110      	movs	r1, #16
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d48:	f004 f98e 	bl	8006068 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f002 f97b 	bl	8004048 <HAL_Delay>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d62:	f004 f981 	bl	8006068 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f002 f96e 	bl	8004048 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d7a:	bf00      	nop
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SPI_TxByte+0x30>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d1f8      	bne.n	8001d7c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d8a:	1df9      	adds	r1, r7, #7
 8001d8c:	2364      	movs	r3, #100	; 0x64
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <SPI_TxByte+0x30>)
 8001d92:	f005 ff8f 	bl	8007cb4 <HAL_SPI_Transmit>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20002294 	.word	0x20002294

08001da4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001db0:	bf00      	nop
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <SPI_TxBuffer+0x30>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d1f8      	bne.n	8001db2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <SPI_TxBuffer+0x30>)
 8001dc8:	f005 ff74 	bl	8007cb4 <HAL_SPI_Transmit>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20002294 	.word	0x20002294

08001dd8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001dde:	23ff      	movs	r3, #255	; 0xff
 8001de0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001de2:	bf00      	nop
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <SPI_RxByte+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d1f8      	bne.n	8001de4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001df2:	1dba      	adds	r2, r7, #6
 8001df4:	1df9      	adds	r1, r7, #7
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <SPI_RxByte+0x34>)
 8001dfe:	f006 f8c7 	bl	8007f90 <HAL_SPI_TransmitReceive>

	return data;
 8001e02:	79bb      	ldrb	r3, [r7, #6]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20002294 	.word	0x20002294

08001e10 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001e18:	f7ff ffde 	bl	8001dd8 <SPI_RxByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	701a      	strb	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <SD_ReadyWait+0x30>)
 8001e34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e38:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001e3a:	f7ff ffcd 	bl	8001dd8 <SPI_RxByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2bff      	cmp	r3, #255	; 0xff
 8001e46:	d003      	beq.n	8001e50 <SD_ReadyWait+0x24>
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SD_ReadyWait+0x30>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f4      	bne.n	8001e3a <SD_ReadyWait+0xe>

	return res;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200001c4 	.word	0x200001c4

08001e60 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001e66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001e6a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001e6c:	f7ff ff73 	bl	8001d56 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	e005      	b.n	8001e82 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001e76:	20ff      	movs	r0, #255	; 0xff
 8001e78:	f7ff ff7a 	bl	8001d70 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	ddf6      	ble.n	8001e76 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001e88:	f7ff ff58 	bl	8001d3c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001e8c:	2340      	movs	r3, #64	; 0x40
 8001e8e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001ea0:	2395      	movs	r3, #149	; 0x95
 8001ea2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2106      	movs	r1, #6
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff7b 	bl	8001da4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001eae:	e002      	b.n	8001eb6 <SD_PowerOn+0x56>
	{
		cnt--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001eb6:	f7ff ff8f 	bl	8001dd8 <SPI_RxByte>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d002      	beq.n	8001ec6 <SD_PowerOn+0x66>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f4      	bne.n	8001eb0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001ec6:	f7ff ff46 	bl	8001d56 <DESELECT>
	SPI_TxByte(0XFF);
 8001eca:	20ff      	movs	r0, #255	; 0xff
 8001ecc:	f7ff ff50 	bl	8001d70 <SPI_TxByte>

	PowerFlag = 1;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <SD_PowerOn+0x80>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001c7 	.word	0x200001c7

08001ee4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <SD_PowerOff+0x14>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	200001c7 	.word	0x200001c7

08001efc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <SD_CheckPower+0x14>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200001c7 	.word	0x200001c7

08001f14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <SD_RxDataBlock+0x58>)
 8001f20:	22c8      	movs	r2, #200	; 0xc8
 8001f22:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001f24:	f7ff ff58 	bl	8001dd8 <SPI_RxByte>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d103      	bne.n	8001f3a <SD_RxDataBlock+0x26>
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <SD_RxDataBlock+0x58>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f4      	bne.n	8001f24 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8001f3e:	d001      	beq.n	8001f44 <SD_RxDataBlock+0x30>
 8001f40:	2300      	movs	r3, #0
 8001f42:	e00f      	b.n	8001f64 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff60 	bl	8001e10 <SPI_RxBytePtr>
	} while(len--);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f4      	bne.n	8001f44 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001f5a:	f7ff ff3d 	bl	8001dd8 <SPI_RxByte>
	SPI_RxByte();
 8001f5e:	f7ff ff3b 	bl	8001dd8 <SPI_RxByte>

	return TRUE;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200001c2 	.word	0x200001c2

08001f70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001f80:	f7ff ff54 	bl	8001e2c <SD_ReadyWait>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2bff      	cmp	r3, #255	; 0xff
 8001f88:	d001      	beq.n	8001f8e <SD_TxDataBlock+0x1e>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e02f      	b.n	8001fee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff feed 	bl	8001d70 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2bfd      	cmp	r3, #253	; 0xfd
 8001f9a:	d020      	beq.n	8001fde <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff feff 	bl	8001da4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001fa6:	f7ff ff17 	bl	8001dd8 <SPI_RxByte>
		SPI_RxByte();
 8001faa:	f7ff ff15 	bl	8001dd8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001fae:	e00b      	b.n	8001fc8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001fb0:	f7ff ff12 	bl	8001dd8 <SPI_RxByte>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d006      	beq.n	8001fd0 <SD_TxDataBlock+0x60>
			i++;
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d9f0      	bls.n	8001fb0 <SD_TxDataBlock+0x40>
 8001fce:	e000      	b.n	8001fd2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001fd0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ff00 	bl	8001dd8 <SPI_RxByte>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0fa      	beq.n	8001fd4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d101      	bne.n	8001fec <SD_TxDataBlock+0x7c>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <SD_TxDataBlock+0x7e>

	return FALSE;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	6039      	str	r1, [r7, #0]
 8002000:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002002:	f7ff ff13 	bl	8001e2c <SD_ReadyWait>
 8002006:	4603      	mov	r3, r0
 8002008:	2bff      	cmp	r3, #255	; 0xff
 800200a:	d001      	beq.n	8002010 <SD_SendCmd+0x1a>
 800200c:	23ff      	movs	r3, #255	; 0xff
 800200e:	e042      	b.n	8002096 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff feac 	bl	8001d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	0e1b      	lsrs	r3, r3, #24
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fea6 	bl	8001d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fea0 	bl	8001d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fe9a 	bl	8001d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fe95 	bl	8001d70 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d102      	bne.n	8002052 <SD_SendCmd+0x5c>
 800204c:	2395      	movs	r3, #149	; 0x95
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e007      	b.n	8002062 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b48      	cmp	r3, #72	; 0x48
 8002056:	d102      	bne.n	800205e <SD_SendCmd+0x68>
 8002058:	2387      	movs	r3, #135	; 0x87
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e001      	b.n	8002062 <SD_SendCmd+0x6c>
	else crc = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fe83 	bl	8001d70 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b4c      	cmp	r3, #76	; 0x4c
 800206e:	d101      	bne.n	8002074 <SD_SendCmd+0x7e>
 8002070:	f7ff feb2 	bl	8001dd8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002074:	230a      	movs	r3, #10
 8002076:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002078:	f7ff feae 	bl	8001dd8 <SPI_RxByte>
 800207c:	4603      	mov	r3, r0
 800207e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002080:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da05      	bge.n	8002094 <SD_SendCmd+0x9e>
 8002088:	7bbb      	ldrb	r3, [r7, #14]
 800208a:	3b01      	subs	r3, #1
 800208c:	73bb      	strb	r3, [r7, #14]
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f1      	bne.n	8002078 <SD_SendCmd+0x82>

	return res;
 8002094:	7b7b      	ldrb	r3, [r7, #13]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SD_disk_initialize+0x14>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d1      	b.n	8002258 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <SD_disk_initialize+0x1c0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <SD_disk_initialize+0x2a>
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <SD_disk_initialize+0x1c0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e0c6      	b.n	8002258 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80020ca:	f7ff fec9 	bl	8001e60 <SD_PowerOn>

	/* slave select */
	SELECT();
 80020ce:	f7ff fe35 	bl	8001d3c <SELECT>

	/* check disk type */
	type = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80020d6:	2100      	movs	r1, #0
 80020d8:	2040      	movs	r0, #64	; 0x40
 80020da:	f7ff ff8c 	bl	8001ff6 <SD_SendCmd>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	f040 80a1 	bne.w	8002228 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <SD_disk_initialize+0x1c4>)
 80020e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80020ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80020f2:	2048      	movs	r0, #72	; 0x48
 80020f4:	f7ff ff7f 	bl	8001ff6 <SD_SendCmd>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d155      	bne.n	80021aa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e00c      	b.n	800211e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002104:	7bfc      	ldrb	r4, [r7, #15]
 8002106:	f7ff fe67 	bl	8001dd8 <SPI_RxByte>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	f104 0310 	add.w	r3, r4, #16
 8002112:	443b      	add	r3, r7
 8002114:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3301      	adds	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d9ef      	bls.n	8002104 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002124:	7abb      	ldrb	r3, [r7, #10]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d17e      	bne.n	8002228 <SD_disk_initialize+0x188>
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	2baa      	cmp	r3, #170	; 0xaa
 800212e:	d17b      	bne.n	8002228 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002130:	2100      	movs	r1, #0
 8002132:	2077      	movs	r0, #119	; 0x77
 8002134:	f7ff ff5f 	bl	8001ff6 <SD_SendCmd>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d807      	bhi.n	800214e <SD_disk_initialize+0xae>
 800213e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002142:	2069      	movs	r0, #105	; 0x69
 8002144:	f7ff ff57 	bl	8001ff6 <SD_SendCmd>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800214e:	4b45      	ldr	r3, [pc, #276]	; (8002264 <SD_disk_initialize+0x1c4>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ec      	bne.n	8002130 <SD_disk_initialize+0x90>
 8002156:	e000      	b.n	800215a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002158:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <SD_disk_initialize+0x1c4>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d062      	beq.n	8002228 <SD_disk_initialize+0x188>
 8002162:	2100      	movs	r1, #0
 8002164:	207a      	movs	r0, #122	; 0x7a
 8002166:	f7ff ff46 	bl	8001ff6 <SD_SendCmd>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d15b      	bne.n	8002228 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e00c      	b.n	8002190 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8002176:	7bfc      	ldrb	r4, [r7, #15]
 8002178:	f7ff fe2e 	bl	8001dd8 <SPI_RxByte>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	f104 0310 	add.w	r3, r4, #16
 8002184:	443b      	add	r3, r7
 8002186:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	3301      	adds	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d9ef      	bls.n	8002176 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002196:	7a3b      	ldrb	r3, [r7, #8]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SD_disk_initialize+0x104>
 80021a0:	230c      	movs	r3, #12
 80021a2:	e000      	b.n	80021a6 <SD_disk_initialize+0x106>
 80021a4:	2304      	movs	r3, #4
 80021a6:	73bb      	strb	r3, [r7, #14]
 80021a8:	e03e      	b.n	8002228 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80021aa:	2100      	movs	r1, #0
 80021ac:	2077      	movs	r0, #119	; 0x77
 80021ae:	f7ff ff22 	bl	8001ff6 <SD_SendCmd>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d808      	bhi.n	80021ca <SD_disk_initialize+0x12a>
 80021b8:	2100      	movs	r1, #0
 80021ba:	2069      	movs	r0, #105	; 0x69
 80021bc:	f7ff ff1b 	bl	8001ff6 <SD_SendCmd>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d801      	bhi.n	80021ca <SD_disk_initialize+0x12a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e000      	b.n	80021cc <SD_disk_initialize+0x12c>
 80021ca:	2301      	movs	r3, #1
 80021cc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d10e      	bne.n	80021f2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80021d4:	2100      	movs	r1, #0
 80021d6:	2077      	movs	r0, #119	; 0x77
 80021d8:	f7ff ff0d 	bl	8001ff6 <SD_SendCmd>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d80e      	bhi.n	8002200 <SD_disk_initialize+0x160>
 80021e2:	2100      	movs	r1, #0
 80021e4:	2069      	movs	r0, #105	; 0x69
 80021e6:	f7ff ff06 	bl	8001ff6 <SD_SendCmd>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <SD_disk_initialize+0x160>
 80021f0:	e00c      	b.n	800220c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80021f2:	2100      	movs	r1, #0
 80021f4:	2041      	movs	r0, #65	; 0x41
 80021f6:	f7ff fefe 	bl	8001ff6 <SD_SendCmd>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <SD_disk_initialize+0x1c4>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e2      	bne.n	80021ce <SD_disk_initialize+0x12e>
 8002208:	e000      	b.n	800220c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800220a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <SD_disk_initialize+0x1c4>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <SD_disk_initialize+0x184>
 8002214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002218:	2050      	movs	r0, #80	; 0x50
 800221a:	f7ff feec 	bl	8001ff6 <SD_SendCmd>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SD_disk_initialize+0x188>
 8002224:	2300      	movs	r3, #0
 8002226:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <SD_disk_initialize+0x1c8>)
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800222e:	f7ff fd92 	bl	8001d56 <DESELECT>
	SPI_RxByte();
 8002232:	f7ff fdd1 	bl	8001dd8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <SD_disk_initialize+0x1c0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SD_disk_initialize+0x1c0>)
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e001      	b.n	8002252 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800224e:	f7ff fe49 	bl	8001ee4 <SD_PowerOff>
	}

	return Stat;
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <SD_disk_initialize+0x1c0>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	2000001c 	.word	0x2000001c
 8002264:	200001c2 	.word	0x200001c2
 8002268:	200001c6 	.word	0x200001c6

0800226c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SD_disk_status+0x14>
 800227c:	2301      	movs	r3, #1
 800227e:	e002      	b.n	8002286 <SD_disk_status+0x1a>
	return Stat;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SD_disk_status+0x28>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000001c 	.word	0x2000001c

08002298 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <SD_disk_read+0x1c>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <SD_disk_read+0x20>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e051      	b.n	800235c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <SD_disk_read+0xcc>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SD_disk_read+0x32>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e048      	b.n	800235c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <SD_disk_read+0xd0>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <SD_disk_read+0x44>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	025b      	lsls	r3, r3, #9
 80022da:	607b      	str	r3, [r7, #4]

	SELECT();
 80022dc:	f7ff fd2e 	bl	8001d3c <SELECT>

	if (count == 1)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d111      	bne.n	800230a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	2051      	movs	r0, #81	; 0x51
 80022ea:	f7ff fe84 	bl	8001ff6 <SD_SendCmd>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d129      	bne.n	8002348 <SD_disk_read+0xb0>
 80022f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f7ff fe0b 	bl	8001f14 <SD_RxDataBlock>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d021      	beq.n	8002348 <SD_disk_read+0xb0>
 8002304:	2300      	movs	r3, #0
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	e01e      	b.n	8002348 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	2052      	movs	r0, #82	; 0x52
 800230e:	f7ff fe72 	bl	8001ff6 <SD_SendCmd>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d117      	bne.n	8002348 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f7ff fdf9 	bl	8001f14 <SD_RxDataBlock>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <SD_disk_read+0xa6>
				buff += 512;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800232e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	3b01      	subs	r3, #1
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ed      	bne.n	8002318 <SD_disk_read+0x80>
 800233c:	e000      	b.n	8002340 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800233e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002340:	2100      	movs	r1, #0
 8002342:	204c      	movs	r0, #76	; 0x4c
 8002344:	f7ff fe57 	bl	8001ff6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002348:	f7ff fd05 	bl	8001d56 <DESELECT>
	SPI_RxByte();
 800234c:	f7ff fd44 	bl	8001dd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000001c 	.word	0x2000001c
 8002368:	200001c6 	.word	0x200001c6

0800236c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4603      	mov	r3, r0
 800237a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <SD_disk_write+0x1c>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <SD_disk_write+0x20>
 8002388:	2304      	movs	r3, #4
 800238a:	e06b      	b.n	8002464 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <SD_disk_write+0x100>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SD_disk_write+0x32>
 800239a:	2303      	movs	r3, #3
 800239c:	e062      	b.n	8002464 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800239e:	4b33      	ldr	r3, [pc, #204]	; (800246c <SD_disk_write+0x100>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SD_disk_write+0x44>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e059      	b.n	8002464 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <SD_disk_write+0x104>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <SD_disk_write+0x56>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	607b      	str	r3, [r7, #4]

	SELECT();
 80023c2:	f7ff fcbb 	bl	8001d3c <SELECT>

	if (count == 1)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d110      	bne.n	80023ee <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	2058      	movs	r0, #88	; 0x58
 80023d0:	f7ff fe11 	bl	8001ff6 <SD_SendCmd>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13a      	bne.n	8002450 <SD_disk_write+0xe4>
 80023da:	21fe      	movs	r1, #254	; 0xfe
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f7ff fdc7 	bl	8001f70 <SD_TxDataBlock>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d033      	beq.n	8002450 <SD_disk_write+0xe4>
			count = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	e030      	b.n	8002450 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <SD_disk_write+0x104>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80023fa:	2100      	movs	r1, #0
 80023fc:	2077      	movs	r0, #119	; 0x77
 80023fe:	f7ff fdfa 	bl	8001ff6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	2057      	movs	r0, #87	; 0x57
 8002406:	f7ff fdf6 	bl	8001ff6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	2059      	movs	r0, #89	; 0x59
 800240e:	f7ff fdf2 	bl	8001ff6 <SD_SendCmd>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11b      	bne.n	8002450 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002418:	21fc      	movs	r1, #252	; 0xfc
 800241a:	68b8      	ldr	r0, [r7, #8]
 800241c:	f7ff fda8 	bl	8001f70 <SD_TxDataBlock>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <SD_disk_write+0xd0>
				buff += 512;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800242c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <SD_disk_write+0xac>
 800243a:	e000      	b.n	800243e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800243c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800243e:	21fd      	movs	r1, #253	; 0xfd
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff fd95 	bl	8001f70 <SD_TxDataBlock>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <SD_disk_write+0xe4>
			{
				count = 1;
 800244c:	2301      	movs	r3, #1
 800244e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002450:	f7ff fc81 	bl	8001d56 <DESELECT>
	SPI_RxByte();
 8002454:	f7ff fcc0 	bl	8001dd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000001c 	.word	0x2000001c
 8002470:	200001c6 	.word	0x200001c6

08002474 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	603a      	str	r2, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	460b      	mov	r3, r1
 8002482:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <SD_disk_ioctl+0x1e>
 800248e:	2304      	movs	r3, #4
 8002490:	e115      	b.n	80026be <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d124      	bne.n	80024e8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d012      	beq.n	80024cc <SD_disk_ioctl+0x58>
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	dc1a      	bgt.n	80024e0 <SD_disk_ioctl+0x6c>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <SD_disk_ioctl+0x40>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d006      	beq.n	80024c0 <SD_disk_ioctl+0x4c>
 80024b2:	e015      	b.n	80024e0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80024b4:	f7ff fd16 	bl	8001ee4 <SD_PowerOff>
			res = RES_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024be:	e0fc      	b.n	80026ba <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80024c0:	f7ff fcce 	bl	8001e60 <SD_PowerOn>
			res = RES_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024ca:	e0f6      	b.n	80026ba <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	1c5c      	adds	r4, r3, #1
 80024d0:	f7ff fd14 	bl	8001efc <SD_CheckPower>
 80024d4:	4603      	mov	r3, r0
 80024d6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80024de:	e0ec      	b.n	80026ba <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80024e0:	2304      	movs	r3, #4
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024e6:	e0e8      	b.n	80026ba <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024e8:	4b77      	ldr	r3, [pc, #476]	; (80026c8 <SD_disk_ioctl+0x254>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <SD_disk_ioctl+0x86>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0e1      	b.n	80026be <SD_disk_ioctl+0x24a>

		SELECT();
 80024fa:	f7ff fc1f 	bl	8001d3c <SELECT>

		switch (ctrl)
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	2b0d      	cmp	r3, #13
 8002502:	f200 80cb 	bhi.w	800269c <SD_disk_ioctl+0x228>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <SD_disk_ioctl+0x98>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	08002607 	.word	0x08002607
 8002510:	08002545 	.word	0x08002545
 8002514:	080025f7 	.word	0x080025f7
 8002518:	0800269d 	.word	0x0800269d
 800251c:	0800269d 	.word	0x0800269d
 8002520:	0800269d 	.word	0x0800269d
 8002524:	0800269d 	.word	0x0800269d
 8002528:	0800269d 	.word	0x0800269d
 800252c:	0800269d 	.word	0x0800269d
 8002530:	0800269d 	.word	0x0800269d
 8002534:	0800269d 	.word	0x0800269d
 8002538:	08002619 	.word	0x08002619
 800253c:	0800263d 	.word	0x0800263d
 8002540:	08002661 	.word	0x08002661
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002544:	2100      	movs	r1, #0
 8002546:	2049      	movs	r0, #73	; 0x49
 8002548:	f7ff fd55 	bl	8001ff6 <SD_SendCmd>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80a8 	bne.w	80026a4 <SD_disk_ioctl+0x230>
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	2110      	movs	r1, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fcda 	bl	8001f14 <SD_RxDataBlock>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 809e 	beq.w	80026a4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002568:	7b3b      	ldrb	r3, [r7, #12]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10e      	bne.n	8002590 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002572:	7d7b      	ldrb	r3, [r7, #21]
 8002574:	b29a      	uxth	r2, r3
 8002576:	7d3b      	ldrb	r3, [r7, #20]
 8002578:	b29b      	uxth	r3, r3
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	4413      	add	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002586:	8bfb      	ldrh	r3, [r7, #30]
 8002588:	029a      	lsls	r2, r3, #10
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e02e      	b.n	80025ee <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002590:	7c7b      	ldrb	r3, [r7, #17]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	b2da      	uxtb	r2, r3
 8002598:	7dbb      	ldrb	r3, [r7, #22]
 800259a:	09db      	lsrs	r3, r3, #7
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4413      	add	r3, r2
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	7d7b      	ldrb	r3, [r7, #21]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0306 	and.w	r3, r3, #6
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3302      	adds	r3, #2
 80025b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80025b8:	7d3b      	ldrb	r3, [r7, #20]
 80025ba:	099b      	lsrs	r3, r3, #6
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	7cbb      	ldrb	r3, [r7, #18]
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4413      	add	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80025e0:	8bfa      	ldrh	r2, [r7, #30]
 80025e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025e6:	3b09      	subs	r3, #9
 80025e8:	409a      	lsls	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80025f4:	e056      	b.n	80026a4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002604:	e055      	b.n	80026b2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002606:	f7ff fc11 	bl	8001e2c <SD_ReadyWait>
 800260a:	4603      	mov	r3, r0
 800260c:	2bff      	cmp	r3, #255	; 0xff
 800260e:	d14b      	bne.n	80026a8 <SD_disk_ioctl+0x234>
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002616:	e047      	b.n	80026a8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002618:	2100      	movs	r1, #0
 800261a:	2049      	movs	r0, #73	; 0x49
 800261c:	f7ff fceb 	bl	8001ff6 <SD_SendCmd>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d142      	bne.n	80026ac <SD_disk_ioctl+0x238>
 8002626:	2110      	movs	r1, #16
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f7ff fc73 	bl	8001f14 <SD_RxDataBlock>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03b      	beq.n	80026ac <SD_disk_ioctl+0x238>
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800263a:	e037      	b.n	80026ac <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800263c:	2100      	movs	r1, #0
 800263e:	204a      	movs	r0, #74	; 0x4a
 8002640:	f7ff fcd9 	bl	8001ff6 <SD_SendCmd>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d132      	bne.n	80026b0 <SD_disk_ioctl+0x23c>
 800264a:	2110      	movs	r1, #16
 800264c:	6a38      	ldr	r0, [r7, #32]
 800264e:	f7ff fc61 	bl	8001f14 <SD_RxDataBlock>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02b      	beq.n	80026b0 <SD_disk_ioctl+0x23c>
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800265e:	e027      	b.n	80026b0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002660:	2100      	movs	r1, #0
 8002662:	207a      	movs	r0, #122	; 0x7a
 8002664:	f7ff fcc7 	bl	8001ff6 <SD_SendCmd>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d116      	bne.n	800269c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002674:	e00b      	b.n	800268e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002676:	6a3c      	ldr	r4, [r7, #32]
 8002678:	1c63      	adds	r3, r4, #1
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	f7ff fbac 	bl	8001dd8 <SPI_RxByte>
 8002680:	4603      	mov	r3, r0
 8002682:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002688:	3301      	adds	r3, #1
 800268a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800268e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002692:	2b03      	cmp	r3, #3
 8002694:	d9ef      	bls.n	8002676 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800269c:	2304      	movs	r3, #4
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026a2:	e006      	b.n	80026b2 <SD_disk_ioctl+0x23e>
			break;
 80026a4:	bf00      	nop
 80026a6:	e004      	b.n	80026b2 <SD_disk_ioctl+0x23e>
			break;
 80026a8:	bf00      	nop
 80026aa:	e002      	b.n	80026b2 <SD_disk_ioctl+0x23e>
			break;
 80026ac:	bf00      	nop
 80026ae:	e000      	b.n	80026b2 <SD_disk_ioctl+0x23e>
			break;
 80026b0:	bf00      	nop
		}

		DESELECT();
 80026b2:	f7ff fb50 	bl	8001d56 <DESELECT>
		SPI_RxByte();
 80026b6:	f7ff fb8f 	bl	8001dd8 <SPI_RxByte>
	}

	return res;
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026be:	4618      	mov	r0, r3
 80026c0:	372c      	adds	r7, #44	; 0x2c
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000001c 	.word	0x2000001c

080026cc <CheckWires>:
static bool CheckDetCableConnected();
bool CheckDelayButConnected();
static void CheckBattery();

bool CheckWires()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	static bool led_off = false;

	if(CheckExtConnected() == false || CheckDetCableConnected() == false || CheckDelayButConnected() == false)
 80026d0:	f000 f86a 	bl	80027a8 <CheckExtConnected>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <CheckWires+0x34>
 80026e0:	f000 f93c 	bl	800295c <CheckDetCableConnected>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <CheckWires+0x34>
 80026f0:	f000 fa00 	bl	8002af4 <CheckDelayButConnected>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01a      	beq.n	8002736 <CheckWires+0x6a>
	{
		if(startSecondsCounter(CHECK_WIRES_TIMER_1) >= CHECK_WIRES_TIMER_2)
 8002700:	2006      	movs	r0, #6
 8002702:	f7fe fdc5 	bl	8001290 <startSecondsCounter>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <CheckWires+0x66>
		{
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800270c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002710:	481f      	ldr	r0, [pc, #124]	; (8002790 <CheckWires+0xc4>)
 8002712:	f003 fcc1 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(ALARM_GPIO_Port, ALARM_Pin);
 8002716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271a:	481e      	ldr	r0, [pc, #120]	; (8002794 <CheckWires+0xc8>)
 800271c:	f003 fcbc 	bl	8006098 <HAL_GPIO_TogglePin>
			restartSecondsCounter(CHECK_WIRES_TIMER_1);
 8002720:	2006      	movs	r0, #6
 8002722:	f7fe fe01 	bl	8001328 <restartSecondsCounter>
			led_off = true;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <CheckWires+0xcc>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
			CheckFault(true);
 800272c:	2001      	movs	r0, #1
 800272e:	f7fd ff87 	bl	8000640 <CheckFault>
		}
		return false;
 8002732:	2300      	movs	r3, #0
 8002734:	e029      	b.n	800278a <CheckWires+0xbe>
	}
	else
	{
		CheckBattery();
 8002736:	f000 fa0b 	bl	8002b50 <CheckBattery>
		if(led_off == true)
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <CheckWires+0xcc>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d022      	beq.n	8002788 <CheckWires+0xbc>
		{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002748:	4811      	ldr	r0, [pc, #68]	; (8002790 <CheckWires+0xc4>)
 800274a:	f003 fc8d 	bl	8006068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <CheckWires+0xc4>)
 8002754:	f003 fc88 	bl	8006068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <CheckWires+0xc8>)
 8002760:	f003 fc82 	bl	8006068 <HAL_GPIO_WritePin>
			stopSecondsCounter(CHECK_WIRES_TIMER_1);
 8002764:	2006      	movs	r0, #6
 8002766:	f7fe fdbb 	bl	80012e0 <stopSecondsCounter>
			led_off = false;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <CheckWires+0xcc>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
			sd_fault_ext_con = false;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <CheckWires+0xd0>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
			sd_fault_det_cable_con = false;
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <CheckWires+0xd4>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
			sd_fault_delay_but_con = false;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <CheckWires+0xd8>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
			CheckFault(false);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fd ff5c 	bl	8000640 <CheckFault>
		}
		return true;
 8002788:	2301      	movs	r3, #1
	}

}
 800278a:	4618      	mov	r0, r3
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	48000800 	.word	0x48000800
 8002794:	48000400 	.word	0x48000400
 8002798:	200001cb 	.word	0x200001cb
 800279c:	200001c8 	.word	0x200001c8
 80027a0:	200001c9 	.word	0x200001c9
 80027a4:	200001ca 	.word	0x200001ca

080027a8 <CheckExtConnected>:

static bool CheckExtConnected()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < EXTINGUISHER_COUNT_2; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	e0bf      	b.n	8002934 <CheckExtConnected+0x18c>
	{
		Extinguisher *check_ext;
		check_ext = &extinguisher[i];
 80027b4:	79fa      	ldrb	r2, [r7, #7]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	4a63      	ldr	r2, [pc, #396]	; (800294c <CheckExtConnected+0x1a4>)
 80027be:	4413      	add	r3, r2
 80027c0:	603b      	str	r3, [r7, #0]

		if(check_ext->enabled == true && check_ext->is_triggered == false)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80b1 	beq.w	800292e <CheckExtConnected+0x186>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a9 	beq.w	800292e <CheckExtConnected+0x186>
		{
			switch(i)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f200 80a2 	bhi.w	8002928 <CheckExtConnected+0x180>
 80027e4:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <CheckExtConnected+0x44>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	08002847 	.word	0x08002847
 80027f4:	0800288f 	.word	0x0800288f
 80027f8:	080028d5 	.word	0x080028d5
			{
			case 0:
				if(HAL_GPIO_ReadPin(GAS1_OK_GPIO_Port, GAS1_OK_Pin) == GPIO_PIN_SET)
 80027fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002800:	4853      	ldr	r0, [pc, #332]	; (8002950 <CheckExtConnected+0x1a8>)
 8002802:	f003 fc19 	bl	8006038 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	f040 8086 	bne.w	800291a <CheckExtConnected+0x172>
				{
					if(startMillisCounter(FAULT_EXT_CON_1) >= FAULT_EXT_CON_2)
 800280e:	2003      	movs	r0, #3
 8002810:	f7fe fd52 	bl	80012b8 <startMillisCounter>
 8002814:	4603      	mov	r3, r0
 8002816:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800281a:	d312      	bcc.n	8002842 <CheckExtConnected+0x9a>
					{
						check_ext->is_connected = false;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	705a      	strb	r2, [r3, #1]
						if(sd_fault_ext_con == false)
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <CheckExtConnected+0x1ac>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <CheckExtConnected+0x94>
						{
						ToSdCard(BRAK_GAS1);
 8002830:	2008      	movs	r0, #8
 8002832:	f000 fd15 	bl	8003260 <ToSdCard>
						sd_fault_ext_con = true;
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <CheckExtConnected+0x1ac>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_EXT_CON_1);
 800283c:	2003      	movs	r0, #3
 800283e:	f7fe fd61 	bl	8001304 <stopMillisCounter>
					}
					return false;
 8002842:	2300      	movs	r3, #0
 8002844:	e07e      	b.n	8002944 <CheckExtConnected+0x19c>
				}
				break;

			case 1:
				if(HAL_GPIO_ReadPin(GAS2_OK_GPIO_Port, GAS2_OK_Pin) == GPIO_PIN_SET)
 8002846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284a:	4841      	ldr	r0, [pc, #260]	; (8002950 <CheckExtConnected+0x1a8>)
 800284c:	f003 fbf4 	bl	8006038 <HAL_GPIO_ReadPin>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d163      	bne.n	800291e <CheckExtConnected+0x176>
				{
					if(startMillisCounter(FAULT_EXT_CON_1) >= FAULT_EXT_CON_2)
 8002856:	2003      	movs	r0, #3
 8002858:	f7fe fd2e 	bl	80012b8 <startMillisCounter>
 800285c:	4603      	mov	r3, r0
 800285e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002862:	d312      	bcc.n	800288a <CheckExtConnected+0xe2>
					{
						check_ext->is_connected = false;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	705a      	strb	r2, [r3, #1]
						if(sd_fault_ext_con == false)
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <CheckExtConnected+0x1ac>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <CheckExtConnected+0xdc>
						{
						ToSdCard(BRAK_GAS2);
 8002878:	2009      	movs	r0, #9
 800287a:	f000 fcf1 	bl	8003260 <ToSdCard>
						sd_fault_ext_con = true;
 800287e:	4b35      	ldr	r3, [pc, #212]	; (8002954 <CheckExtConnected+0x1ac>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_EXT_CON_1);
 8002884:	2003      	movs	r0, #3
 8002886:	f7fe fd3d 	bl	8001304 <stopMillisCounter>
					}
					return false;
 800288a:	2300      	movs	r3, #0
 800288c:	e05a      	b.n	8002944 <CheckExtConnected+0x19c>
				}
				break;

			case 2:
				if(HAL_GPIO_ReadPin(GAS3_OK_GPIO_Port, GAS3_OK_Pin) == GPIO_PIN_SET)
 800288e:	2108      	movs	r1, #8
 8002890:	4831      	ldr	r0, [pc, #196]	; (8002958 <CheckExtConnected+0x1b0>)
 8002892:	f003 fbd1 	bl	8006038 <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d142      	bne.n	8002922 <CheckExtConnected+0x17a>
				{
					if(startMillisCounter(FAULT_EXT_CON_1) >= FAULT_EXT_CON_2)
 800289c:	2003      	movs	r0, #3
 800289e:	f7fe fd0b 	bl	80012b8 <startMillisCounter>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028a8:	d312      	bcc.n	80028d0 <CheckExtConnected+0x128>
					{
						check_ext->is_connected = false;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	705a      	strb	r2, [r3, #1]
						if(sd_fault_ext_con == false)
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <CheckExtConnected+0x1ac>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <CheckExtConnected+0x122>
						{
						ToSdCard(BRAK_GAS3);
 80028be:	200a      	movs	r0, #10
 80028c0:	f000 fcce 	bl	8003260 <ToSdCard>
						sd_fault_ext_con = true;
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <CheckExtConnected+0x1ac>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_EXT_CON_1);
 80028ca:	2003      	movs	r0, #3
 80028cc:	f7fe fd1a 	bl	8001304 <stopMillisCounter>
					}
					return false;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e037      	b.n	8002944 <CheckExtConnected+0x19c>
				}
				break;

			case 3:
				if(HAL_GPIO_ReadPin(GAS4_OK_GPIO_Port, GAS4_OK_Pin) == GPIO_PIN_SET)
 80028d4:	2120      	movs	r1, #32
 80028d6:	4820      	ldr	r0, [pc, #128]	; (8002958 <CheckExtConnected+0x1b0>)
 80028d8:	f003 fbae 	bl	8006038 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d121      	bne.n	8002926 <CheckExtConnected+0x17e>
				{
					if(startMillisCounter(FAULT_EXT_CON_1) >= FAULT_EXT_CON_2)
 80028e2:	2003      	movs	r0, #3
 80028e4:	f7fe fce8 	bl	80012b8 <startMillisCounter>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028ee:	d312      	bcc.n	8002916 <CheckExtConnected+0x16e>
					{
						check_ext->is_connected = false;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	705a      	strb	r2, [r3, #1]
						if(sd_fault_ext_con == false)
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <CheckExtConnected+0x1ac>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <CheckExtConnected+0x168>
						{
						ToSdCard(BRAK_GAS4);
 8002904:	200b      	movs	r0, #11
 8002906:	f000 fcab 	bl	8003260 <ToSdCard>
						sd_fault_ext_con = true;
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <CheckExtConnected+0x1ac>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_EXT_CON_1);
 8002910:	2003      	movs	r0, #3
 8002912:	f7fe fcf7 	bl	8001304 <stopMillisCounter>
					}
					return false;
 8002916:	2300      	movs	r3, #0
 8002918:	e014      	b.n	8002944 <CheckExtConnected+0x19c>
				break;
 800291a:	bf00      	nop
 800291c:	e004      	b.n	8002928 <CheckExtConnected+0x180>
				break;
 800291e:	bf00      	nop
 8002920:	e002      	b.n	8002928 <CheckExtConnected+0x180>
				break;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <CheckExtConnected+0x180>
				}
				break;
 8002926:	bf00      	nop
			}
			check_ext->is_connected = true;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < EXTINGUISHER_COUNT_2; i++)
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	3301      	adds	r3, #1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b03      	cmp	r3, #3
 8002938:	f67f af3c 	bls.w	80027b4 <CheckExtConnected+0xc>
		}

	}
	restartMillisCounter(FAULT_EXT_CON_1);
 800293c:	2003      	movs	r0, #3
 800293e:	f7fe fd05 	bl	800134c <restartMillisCounter>
	return true;
 8002942:	2301      	movs	r3, #1

}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000010 	.word	0x20000010
 8002950:	48000800 	.word	0x48000800
 8002954:	200001c8 	.word	0x200001c8
 8002958:	48000400 	.word	0x48000400

0800295c <CheckDetCableConnected>:

static bool CheckDetCableConnected()
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < DET_CABLE_COUNT; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e0b4      	b.n	8002ad2 <CheckDetCableConnected+0x176>
	{
		Det_Cable *cable_f;
		cable_f = &det_cable[i];
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4a5e      	ldr	r2, [pc, #376]	; (8002aec <CheckDetCableConnected+0x190>)
 8002974:	4413      	add	r3, r2
 8002976:	603b      	str	r3, [r7, #0]

		if(cable_f->enabled == true && cable_f->is_triggered == false)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a5 	beq.w	8002acc <CheckDetCableConnected+0x170>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7a1b      	ldrb	r3, [r3, #8]
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 809d 	beq.w	8002acc <CheckDetCableConnected+0x170>
		{
			switch(i)
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b03      	cmp	r3, #3
 8002996:	f200 8096 	bhi.w	8002ac6 <CheckDetCableConnected+0x16a>
 800299a:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <CheckDetCableConnected+0x44>)
 800299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a0:	08002a77 	.word	0x08002a77
 80029a4:	080029f3 	.word	0x080029f3
 80029a8:	08002a35 	.word	0x08002a35
 80029ac:	080029b1 	.word	0x080029b1
			{
			case 3:
				if(cable_f->adc_value <= DET_CABLE_WRONG_CON)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	885b      	ldrh	r3, [r3, #2]
 80029b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80029b8:	d87e      	bhi.n	8002ab8 <CheckDetCableConnected+0x15c>
				{
					if(startMillisCounter(FAULT_DET_CABLE_CON_1) >= FAULT_DET_CABLE_CON_2)
 80029ba:	2004      	movs	r0, #4
 80029bc:	f7fe fc7c 	bl	80012b8 <startMillisCounter>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80029c6:	d312      	bcc.n	80029ee <CheckDetCableConnected+0x92>
					{
						cable_f->wrong_connection = true;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	719a      	strb	r2, [r3, #6]
						if(sd_fault_det_cable_con == false)
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <CheckDetCableConnected+0x194>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f083 0301 	eor.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <CheckDetCableConnected+0x8c>
						{
						ToSdCard(BRAK_KABLA_DET1);
 80029dc:	200c      	movs	r0, #12
 80029de:	f000 fc3f 	bl	8003260 <ToSdCard>
						sd_fault_det_cable_con = true;
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <CheckDetCableConnected+0x194>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_DET_CABLE_CON_1);
 80029e8:	2004      	movs	r0, #4
 80029ea:	f7fe fc8b 	bl	8001304 <stopMillisCounter>
					}
					return false;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e077      	b.n	8002ae2 <CheckDetCableConnected+0x186>
				}
				break;
			case 1:
				if(cable_f->adc_value <= DET_CABLE_WRONG_CON)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	885b      	ldrh	r3, [r3, #2]
 80029f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80029fa:	d85f      	bhi.n	8002abc <CheckDetCableConnected+0x160>
				{
					if(startMillisCounter(FAULT_DET_CABLE_CON_1) >= FAULT_DET_CABLE_CON_2)
 80029fc:	2004      	movs	r0, #4
 80029fe:	f7fe fc5b 	bl	80012b8 <startMillisCounter>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a08:	d312      	bcc.n	8002a30 <CheckDetCableConnected+0xd4>
					{
						cable_f->wrong_connection = true;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	719a      	strb	r2, [r3, #6]
						if(sd_fault_det_cable_con == false)
 8002a10:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <CheckDetCableConnected+0xce>
						{
						ToSdCard(BRAK_KABLA_DET2);
 8002a1e:	200d      	movs	r0, #13
 8002a20:	f000 fc1e 	bl	8003260 <ToSdCard>
						sd_fault_det_cable_con = true;
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_DET_CABLE_CON_1);
 8002a2a:	2004      	movs	r0, #4
 8002a2c:	f7fe fc6a 	bl	8001304 <stopMillisCounter>
					}
					return false;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e056      	b.n	8002ae2 <CheckDetCableConnected+0x186>
				}
				break;
			case 2:
				if(cable_f->adc_value <= DET_CABLE_WRONG_CON)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	885b      	ldrh	r3, [r3, #2]
 8002a38:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a3c:	d840      	bhi.n	8002ac0 <CheckDetCableConnected+0x164>
				{
					if(startMillisCounter(FAULT_DET_CABLE_CON_1) >= FAULT_DET_CABLE_CON_2)
 8002a3e:	2004      	movs	r0, #4
 8002a40:	f7fe fc3a 	bl	80012b8 <startMillisCounter>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a4a:	d312      	bcc.n	8002a72 <CheckDetCableConnected+0x116>
					{
						cable_f->wrong_connection = true;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	719a      	strb	r2, [r3, #6]
						if(sd_fault_det_cable_con == false)
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <CheckDetCableConnected+0x110>
						{
						ToSdCard(BRAK_KABLA_DET3);
 8002a60:	200e      	movs	r0, #14
 8002a62:	f000 fbfd 	bl	8003260 <ToSdCard>
						sd_fault_det_cable_con = true;
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_DET_CABLE_CON_1);
 8002a6c:	2004      	movs	r0, #4
 8002a6e:	f7fe fc49 	bl	8001304 <stopMillisCounter>
					}
					return false;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e035      	b.n	8002ae2 <CheckDetCableConnected+0x186>
				}
				break;
			case 0:
				if(cable_f->adc_value <= DET_CABLE_WRONG_CON)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	885b      	ldrh	r3, [r3, #2]
 8002a7a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a7e:	d821      	bhi.n	8002ac4 <CheckDetCableConnected+0x168>
				{
					if(startMillisCounter(FAULT_DET_CABLE_CON_1) >= FAULT_DET_CABLE_CON_2)
 8002a80:	2004      	movs	r0, #4
 8002a82:	f7fe fc19 	bl	80012b8 <startMillisCounter>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a8c:	d312      	bcc.n	8002ab4 <CheckDetCableConnected+0x158>
					{
						cable_f->wrong_connection = true;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2201      	movs	r2, #1
 8002a92:	719a      	strb	r2, [r3, #6]
						if(sd_fault_det_cable_con == false)
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <CheckDetCableConnected+0x152>
						{
						ToSdCard(BRAK_KABLA_DET4);
 8002aa2:	200f      	movs	r0, #15
 8002aa4:	f000 fbdc 	bl	8003260 <ToSdCard>
						sd_fault_det_cable_con = true;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <CheckDetCableConnected+0x194>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
						}
						stopMillisCounter(FAULT_DET_CABLE_CON_1);
 8002aae:	2004      	movs	r0, #4
 8002ab0:	f7fe fc28 	bl	8001304 <stopMillisCounter>
					}
					return false;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e014      	b.n	8002ae2 <CheckDetCableConnected+0x186>
				break;
 8002ab8:	bf00      	nop
 8002aba:	e004      	b.n	8002ac6 <CheckDetCableConnected+0x16a>
				break;
 8002abc:	bf00      	nop
 8002abe:	e002      	b.n	8002ac6 <CheckDetCableConnected+0x16a>
				break;
 8002ac0:	bf00      	nop
 8002ac2:	e000      	b.n	8002ac6 <CheckDetCableConnected+0x16a>
				}
				break;
 8002ac4:	bf00      	nop
			}
			cable_f->wrong_connection = false;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	719a      	strb	r2, [r3, #6]
	for(uint8_t i = 0; i < DET_CABLE_COUNT; i++)
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	71fb      	strb	r3, [r7, #7]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	f67f af47 	bls.w	8002968 <CheckDetCableConnected+0xc>
		}
	}
	restartMillisCounter(FAULT_DET_CABLE_CON_1);
 8002ada:	2004      	movs	r0, #4
 8002adc:	f7fe fc36 	bl	800134c <restartMillisCounter>
	return true;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000194 	.word	0x20000194
 8002af0:	200001c9 	.word	0x200001c9

08002af4 <CheckDelayButConnected>:

bool CheckDelayButConnected()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	static uint16_t delay_value = 0;

	delay_value = value[4];
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <CheckDelayButConnected+0x50>)
 8002afa:	891b      	ldrh	r3, [r3, #8]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <CheckDelayButConnected+0x54>)
 8002b00:	801a      	strh	r2, [r3, #0]

	if(delay_value <= DELAY_TRIGGER_FAULT)
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <CheckDelayButConnected+0x54>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b0a:	d818      	bhi.n	8002b3e <CheckDelayButConnected+0x4a>
	{
		if(startMillisCounter(FAULT_DET_CABLE_CON_1) >= FAULT_DET_CABLE_CON_2)
 8002b0c:	2004      	movs	r0, #4
 8002b0e:	f7fe fbd3 	bl	80012b8 <startMillisCounter>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002b18:	d30f      	bcc.n	8002b3a <CheckDelayButConnected+0x46>
		{
		if(sd_fault_delay_but_con == false)
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <CheckDelayButConnected+0x58>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <CheckDelayButConnected+0x40>
		{
		  ToSdCard(BRAK_DELAY);
 8002b28:	2017      	movs	r0, #23
 8002b2a:	f000 fb99 	bl	8003260 <ToSdCard>
		  sd_fault_delay_but_con = true;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <CheckDelayButConnected+0x58>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
		stopMillisCounter(FAULT_DET_CABLE_CON_1);
 8002b34:	2004      	movs	r0, #4
 8002b36:	f7fe fbe5 	bl	8001304 <stopMillisCounter>
		}
		return false;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <CheckDelayButConnected+0x4c>
	}
	return true;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000007c 	.word	0x2000007c
 8002b48:	200001cc 	.word	0x200001cc
 8002b4c:	200001ca 	.word	0x200001ca

08002b50 <CheckBattery>:

static void CheckBattery()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	static bool check_bat_1;

	if(HAL_GPIO_ReadPin(LOW_BAT_GPIO_Port, LOW_BAT_Pin) == GPIO_PIN_RESET && check_bat_1 == false)
 8002b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b58:	481e      	ldr	r0, [pc, #120]	; (8002bd4 <CheckBattery+0x84>)
 8002b5a:	f003 fa6d 	bl	8006038 <HAL_GPIO_ReadPin>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11c      	bne.n	8002b9e <CheckBattery+0x4e>
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <CheckBattery+0x88>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	f083 0301 	eor.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d015      	beq.n	8002b9e <CheckBattery+0x4e>
	{
		if(startSecondsCounter(LOW_BAT_TIMER) >= 5)
 8002b72:	200b      	movs	r0, #11
 8002b74:	f7fe fb8c 	bl	8001290 <startSecondsCounter>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d928      	bls.n	8002bd0 <CheckBattery+0x80>
		{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b84:	4815      	ldr	r0, [pc, #84]	; (8002bdc <CheckBattery+0x8c>)
 8002b86:	f003 fa6f 	bl	8006068 <HAL_GPIO_WritePin>
			ToSdCard(BATERIA);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 fb68 	bl	8003260 <ToSdCard>
			check_bat_1 = true;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <CheckBattery+0x88>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
			restartSecondsCounter(LOW_BAT_TIMER);
 8002b96:	200b      	movs	r0, #11
 8002b98:	f7fe fbc6 	bl	8001328 <restartSecondsCounter>
		if(startSecondsCounter(LOW_BAT_TIMER) >= 5)
 8002b9c:	e018      	b.n	8002bd0 <CheckBattery+0x80>
		}
	}
	else if(HAL_GPIO_ReadPin(LOW_BAT_GPIO_Port, LOW_BAT_Pin) == GPIO_PIN_SET && check_bat_1 == true)
 8002b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <CheckBattery+0x84>)
 8002ba4:	f003 fa48 	bl	8006038 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d110      	bne.n	8002bd0 <CheckBattery+0x80>
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <CheckBattery+0x88>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <CheckBattery+0x80>
	{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <CheckBattery+0x8c>)
 8002bbe:	f003 fa53 	bl	8006068 <HAL_GPIO_WritePin>
		check_bat_1 = false;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <CheckBattery+0x88>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
		stopSecondsCounter(LOW_BAT_TIMER);
 8002bc8:	200b      	movs	r0, #11
 8002bca:	f7fe fb89 	bl	80012e0 <stopSecondsCounter>
	}
}
 8002bce:	e7ff      	b.n	8002bd0 <CheckBattery+0x80>
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	200001ce 	.word	0x200001ce
 8002bdc:	48000800 	.word	0x48000800

08002be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	4a6f      	ldr	r2, [pc, #444]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c0e:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c32:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	4b5e      	ldr	r3, [pc, #376]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	4a5d      	ldr	r2, [pc, #372]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4a:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <MX_GPIO_Init+0x1d8>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2110      	movs	r1, #16
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f003 f9f7 	bl	8006068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHOICE_LED_Pin|SWITCH_LED_Pin|ALARM_Pin|LED_SERWIS_Pin
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f243 4152 	movw	r1, #13394	; 0x3452
 8002c80:	484e      	ldr	r0, [pc, #312]	; (8002dbc <MX_GPIO_Init+0x1dc>)
 8002c82:	f003 f9f1 	bl	8006068 <HAL_GPIO_WritePin>
                          |GAS3_Pin|GAS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin|GAS1_Pin, GPIO_PIN_RESET);
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 6118 	mov.w	r1, #2432	; 0x980
 8002c8c:	484c      	ldr	r0, [pc, #304]	; (8002dc0 <MX_GPIO_Init+0x1e0>)
 8002c8e:	f003 f9eb 	bl	8006068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GAS2_GPIO_Port, GAS2_Pin, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2104      	movs	r1, #4
 8002c96:	484b      	ldr	r0, [pc, #300]	; (8002dc4 <MX_GPIO_Init+0x1e4>)
 8002c98:	f003 f9e6 	bl	8006068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb6:	f003 f845 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8002cba:	2310      	movs	r3, #16
 8002cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	483c      	ldr	r0, [pc, #240]	; (8002dc0 <MX_GPIO_Init+0x1e0>)
 8002cce:	f003 f839 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CHOICE_SW_Pin|SWITCH_SW_Pin;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4835      	ldr	r0, [pc, #212]	; (8002dbc <MX_GPIO_Init+0x1dc>)
 8002ce8:	f003 f82c 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CHOICE_LED_Pin|SWITCH_LED_Pin|ALARM_Pin|LED_SERWIS_Pin
 8002cec:	f243 4352 	movw	r3, #13394	; 0x3452
 8002cf0:	617b      	str	r3, [r7, #20]
                          |GAS3_Pin|GAS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4619      	mov	r1, r3
 8002d04:	482d      	ldr	r0, [pc, #180]	; (8002dbc <MX_GPIO_Init+0x1dc>)
 8002d06:	f003 f81d 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|GAS1_Pin;
 8002d0a:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8002d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	4827      	ldr	r0, [pc, #156]	; (8002dc0 <MX_GPIO_Init+0x1e0>)
 8002d24:	f003 f80e 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GAS1_OK_Pin|GAS2_OK_Pin;
 8002d28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d36:	f107 0314 	add.w	r3, r7, #20
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4820      	ldr	r0, [pc, #128]	; (8002dc0 <MX_GPIO_Init+0x1e0>)
 8002d3e:	f003 f801 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GAS2_Pin;
 8002d42:	2304      	movs	r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GAS2_GPIO_Port, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <MX_GPIO_Init+0x1e4>)
 8002d5a:	f002 fff3 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GAS3_OK_Pin|GAS4_OK_Pin;
 8002d5e:	2328      	movs	r3, #40	; 0x28
 8002d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4812      	ldr	r0, [pc, #72]	; (8002dbc <MX_GPIO_Init+0x1dc>)
 8002d72:	f002 ffe7 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SERWIS_IN_Pin|LOW_BAT_Pin;
 8002d76:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480c      	ldr	r0, [pc, #48]	; (8002dbc <MX_GPIO_Init+0x1dc>)
 8002d8c:	f002 ffda 	bl	8005d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2107      	movs	r1, #7
 8002d94:	2006      	movs	r0, #6
 8002d96:	f002 fc46 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d9a:	2006      	movs	r0, #6
 8002d9c:	f002 fc5f 	bl	800565e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2106      	movs	r1, #6
 8002da4:	2008      	movs	r0, #8
 8002da6:	f002 fc3e 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002daa:	2008      	movs	r0, #8
 8002dac:	f002 fc57 	bl	800565e <HAL_NVIC_EnableIRQ>

}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	48000c00 	.word	0x48000c00

08002dc8 <ConfigurationModeIsOn>:
#include "stdbool.h"



void ConfigurationModeIsOn(bool led)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
	if(led == true)
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <ConfigurationModeIsOn+0x28>
	{
		HAL_GPIO_WritePin(SWITCH_LED_GPIO_Port, SWITCH_LED_Pin, GPIO_PIN_SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dde:	480c      	ldr	r0, [pc, #48]	; (8002e10 <ConfigurationModeIsOn+0x48>)
 8002de0:	f003 f942 	bl	8006068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHOICE_LED_GPIO_Port, CHOICE_LED_Pin, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2102      	movs	r1, #2
 8002de8:	4809      	ldr	r0, [pc, #36]	; (8002e10 <ConfigurationModeIsOn+0x48>)
 8002dea:	f003 f93d 	bl	8006068 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(SWITCH_LED_GPIO_Port, SWITCH_LED_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(CHOICE_LED_GPIO_Port, CHOICE_LED_Pin, GPIO_PIN_RESET);
	}
}
 8002dee:	e00a      	b.n	8002e06 <ConfigurationModeIsOn+0x3e>
		HAL_GPIO_WritePin(SWITCH_LED_GPIO_Port, SWITCH_LED_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <ConfigurationModeIsOn+0x48>)
 8002df8:	f003 f936 	bl	8006068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CHOICE_LED_GPIO_Port, CHOICE_LED_Pin, GPIO_PIN_RESET);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <ConfigurationModeIsOn+0x48>)
 8002e02:	f003 f931 	bl	8006068 <HAL_GPIO_WritePin>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	48000400 	.word	0x48000400

08002e14 <InitProcess>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void InitProcess()
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e1c:	4835      	ldr	r0, [pc, #212]	; (8002ef4 <InitProcess+0xe0>)
 8002e1e:	f003 f93b 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	4834      	ldr	r0, [pc, #208]	; (8002ef8 <InitProcess+0xe4>)
 8002e26:	f003 f937 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e2e:	4832      	ldr	r0, [pc, #200]	; (8002ef8 <InitProcess+0xe4>)
 8002e30:	f003 f932 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002e34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e38:	f001 f906 	bl	8004048 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e40:	482c      	ldr	r0, [pc, #176]	; (8002ef4 <InitProcess+0xe0>)
 8002e42:	f003 f929 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	482b      	ldr	r0, [pc, #172]	; (8002ef8 <InitProcess+0xe4>)
 8002e4a:	f003 f925 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e52:	4829      	ldr	r0, [pc, #164]	; (8002ef8 <InitProcess+0xe4>)
 8002e54:	f003 f920 	bl	8006098 <HAL_GPIO_TogglePin>
		    HAL_Delay(500);
 8002e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e5c:	f001 f8f4 	bl	8004048 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e64:	4823      	ldr	r0, [pc, #140]	; (8002ef4 <InitProcess+0xe0>)
 8002e66:	f003 f917 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	4822      	ldr	r0, [pc, #136]	; (8002ef8 <InitProcess+0xe4>)
 8002e6e:	f003 f913 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e76:	4820      	ldr	r0, [pc, #128]	; (8002ef8 <InitProcess+0xe4>)
 8002e78:	f003 f90e 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e80:	f001 f8e2 	bl	8004048 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e88:	481a      	ldr	r0, [pc, #104]	; (8002ef4 <InitProcess+0xe0>)
 8002e8a:	f003 f905 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	4819      	ldr	r0, [pc, #100]	; (8002ef8 <InitProcess+0xe4>)
 8002e92:	f003 f901 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e9a:	4817      	ldr	r0, [pc, #92]	; (8002ef8 <InitProcess+0xe4>)
 8002e9c:	f003 f8fc 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ea4:	f001 f8d0 	bl	8004048 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eac:	4811      	ldr	r0, [pc, #68]	; (8002ef4 <InitProcess+0xe0>)
 8002eae:	f003 f8f3 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <InitProcess+0xe4>)
 8002eb6:	f003 f8ef 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ebe:	480e      	ldr	r0, [pc, #56]	; (8002ef8 <InitProcess+0xe4>)
 8002ec0:	f003 f8ea 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ec8:	f001 f8be 	bl	8004048 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8002ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed0:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <InitProcess+0xe0>)
 8002ed2:	f003 f8e1 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin( LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <InitProcess+0xe4>)
 8002eda:	f003 f8dd 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <InitProcess+0xe4>)
 8002ee4:	f003 f8d8 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eec:	f001 f8ac 	bl	8004048 <HAL_Delay>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	48000400 	.word	0x48000400
 8002ef8:	48000800 	.word	0x48000800

08002efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f00:	f001 f82d 	bl	8003f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f04:	f000 f828 	bl	8002f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f08:	f7ff fe6a 	bl	8002be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f0c:	f7fe fb2c 	bl	8001568 <MX_DMA_Init>
  MX_RTC_Init();
 8002f10:	f000 f8a4 	bl	800305c <MX_RTC_Init>
  MX_SPI1_Init();
 8002f14:	f000 feda 	bl	8003ccc <MX_SPI1_Init>
  MX_FATFS_Init();
 8002f18:	f005 fbb2 	bl	8008680 <MX_FATFS_Init>
  MX_ADC1_Init();
 8002f1c:	f7fd f95a 	bl	80001d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  InitProcess();
 8002f20:	f7ff ff78 	bl	8002e14 <InitProcess>
  RtcInit();
 8002f24:	f000 f8f2 	bl	800310c <RtcInit>
  InitAdc();
 8002f28:	f7fd fabe 	bl	80004a8 <InitAdc>
  InitSd();
 8002f2c:	f000 f920 	bl	8003170 <InitSd>
  LoadConfiguration();
 8002f30:	f7fd fbe8 	bl	8000704 <LoadConfiguration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ServiceProcess();
 8002f34:	f000 fdf4 	bl	8003b20 <ServiceProcess>
	  DetCableProcess();
 8002f38:	f7fe fa4a 	bl	80013d0 <DetCableProcess>
	  ExtinguisherProcess(&config, CheckWires());
 8002f3c:	f7ff fbc6 	bl	80026cc <CheckWires>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4619      	mov	r1, r3
 8002f44:	4803      	ldr	r0, [pc, #12]	; (8002f54 <main+0x58>)
 8002f46:	f7fe fb4b 	bl	80015e0 <ExtinguisherProcess>
	  BreakupProcess();
 8002f4a:	f7fd fabf 	bl	80004cc <BreakupProcess>
	  ConfigurationMode();
 8002f4e:	f7fd fc65 	bl	800081c <ConfigurationMode>
	  ServiceProcess();
 8002f52:	e7ef      	b.n	8002f34 <main+0x38>
 8002f54:	20000008 	.word	0x20000008

08002f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b096      	sub	sp, #88	; 0x58
 8002f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	2244      	movs	r2, #68	; 0x44
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f008 fe22 	bl	800bbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f7e:	f003 f8eb 	bl	8006158 <HAL_PWREx_ControlVoltageScaling>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f88:	f000 f863 	bl	8003052 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f8c:	f003 f8b6 	bl	80060fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <SystemClock_Config+0xb0>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <SystemClock_Config+0xb0>)
 8002f98:	f023 0318 	bic.w	r3, r3, #24
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
 8002fa0:	2315      	movs	r3, #21
 8002fa2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 f91e 	bl	8006204 <HAL_RCC_OscConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002fce:	f000 f840 	bl	8003052 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd2:	230f      	movs	r3, #15
 8002fd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fd1e 	bl	8006a2c <HAL_RCC_ClockConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002ff6:	f000 f82c 	bl	8003052 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002ffa:	f004 f96d 	bl	80072d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002ffe:	bf00      	nop
 8003000:	3758      	adds	r7, #88	; 0x58
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
	 if (GPIO_Pin == SWITCH_SW_Pin && !SwButPressed()) {
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d109      	bne.n	8003030 <HAL_GPIO_EXTI_Callback+0x24>
 800301c:	f7fe f80e 	bl	800103c <SwButPressed>
 8003020:	4603      	mov	r3, r0
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_GPIO_EXTI_Callback+0x24>
		 SwButtonCount();
 800302c:	f7fd ffea 	bl	8001004 <SwButtonCount>
	  }

	 if (GPIO_Pin == CHOICE_SW_Pin && !ChButPressed()) {
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d109      	bne.n	800304a <HAL_GPIO_EXTI_Callback+0x3e>
 8003036:	f7fe f875 	bl	8001124 <ChButPressed>
 800303a:	4603      	mov	r3, r0
 800303c:	f083 0301 	eor.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_GPIO_EXTI_Callback+0x3e>
	 	 ChButtonCount();
 8003046:	f7fe f805 	bl	8001054 <ChButtonCount>
	 }
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003056:	b672      	cpsid	i
}
 8003058:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800305a:	e7fe      	b.n	800305a <Error_Handler+0x8>

0800305c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <MX_RTC_Init+0x48>)
 8003062:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <MX_RTC_Init+0x4c>)
 8003064:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <MX_RTC_Init+0x48>)
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <MX_RTC_Init+0x48>)
 800306e:	227f      	movs	r2, #127	; 0x7f
 8003070:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_RTC_Init+0x48>)
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <MX_RTC_Init+0x48>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_RTC_Init+0x48>)
 8003080:	2200      	movs	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <MX_RTC_Init+0x48>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_RTC_Init+0x48>)
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <MX_RTC_Init+0x48>)
 8003092:	f004 fa23 	bl	80074dc <HAL_RTC_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800309c:	f7ff ffd9 	bl	8003052 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200001e8 	.word	0x200001e8
 80030a8:	40002800 	.word	0x40002800

080030ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b09c      	sub	sp, #112	; 0x70
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	2268      	movs	r2, #104	; 0x68
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f008 fd77 	bl	800bbb0 <memset>
  if(rtcHandle->Instance==RTC)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_RTC_MspInit+0x58>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d117      	bne.n	80030fc <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fe8f 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030e8:	f7ff ffb3 	bl	8003052 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RTC_MspInit+0x5c>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_RTC_MspInit+0x5c>)
 80030f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80030fc:	bf00      	nop
 80030fe:	3770      	adds	r7, #112	; 0x70
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40002800 	.word	0x40002800
 8003108:	40021000 	.word	0x40021000

0800310c <RtcInit>:
  }
}

/* USER CODE BEGIN 1 */
void RtcInit()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(CHOICE_SW_GPIO_Port, CHOICE_SW_Pin) == 1)
 8003110:	2101      	movs	r1, #1
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <RtcInit+0x54>)
 8003114:	f002 ff90 	bl	8006038 <HAL_GPIO_ReadPin>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11e      	bne.n	800315c <RtcInit+0x50>
	{
	  	 today.Year = 24;
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <RtcInit+0x58>)
 8003120:	2218      	movs	r2, #24
 8003122:	70da      	strb	r2, [r3, #3]
	  	 today.Month = 3;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <RtcInit+0x58>)
 8003126:	2203      	movs	r2, #3
 8003128:	705a      	strb	r2, [r3, #1]
	  	 today.Date = 8;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <RtcInit+0x58>)
 800312c:	2208      	movs	r2, #8
 800312e:	709a      	strb	r2, [r3, #2]
	  	 today.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <RtcInit+0x58>)
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
	  	 HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 8003136:	2200      	movs	r2, #0
 8003138:	490a      	ldr	r1, [pc, #40]	; (8003164 <RtcInit+0x58>)
 800313a:	480b      	ldr	r0, [pc, #44]	; (8003168 <RtcInit+0x5c>)
 800313c:	f004 fb42 	bl	80077c4 <HAL_RTC_SetDate>

	  	 new_time.Hours = 9;
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <RtcInit+0x60>)
 8003142:	2209      	movs	r2, #9
 8003144:	701a      	strb	r2, [r3, #0]
	  	 new_time.Minutes = 50;
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <RtcInit+0x60>)
 8003148:	2232      	movs	r2, #50	; 0x32
 800314a:	705a      	strb	r2, [r3, #1]
	  	 new_time.Seconds = 0;
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <RtcInit+0x60>)
 800314e:	2200      	movs	r2, #0
 8003150:	709a      	strb	r2, [r3, #2]
	  	 HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8003152:	2200      	movs	r2, #0
 8003154:	4905      	ldr	r1, [pc, #20]	; (800316c <RtcInit+0x60>)
 8003156:	4804      	ldr	r0, [pc, #16]	; (8003168 <RtcInit+0x5c>)
 8003158:	f004 fa3b 	bl	80075d2 <HAL_RTC_SetTime>
	}

}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	48000400 	.word	0x48000400
 8003164:	200001d0 	.word	0x200001d0
 8003168:	200001e8 	.word	0x200001e8
 800316c:	200001d4 	.word	0x200001d4

08003170 <InitSd>:

static void OpenFile();
static void CloseFile();

void InitSd()
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af04      	add	r7, sp, #16

	fres = f_mount(&fs,"", 0);
 8003176:	2200      	movs	r2, #0
 8003178:	492f      	ldr	r1, [pc, #188]	; (8003238 <InitSd+0xc8>)
 800317a:	4830      	ldr	r0, [pc, #192]	; (800323c <InitSd+0xcc>)
 800317c:	f007 fcca 	bl	800ab14 <f_mount>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <InitSd+0xd0>)
 8003186:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "STO.txt", FA_OPEN_EXISTING);
 8003188:	2200      	movs	r2, #0
 800318a:	492e      	ldr	r1, [pc, #184]	; (8003244 <InitSd+0xd4>)
 800318c:	482e      	ldr	r0, [pc, #184]	; (8003248 <InitSd+0xd8>)
 800318e:	f007 fd07 	bl	800aba0 <f_open>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <InitSd+0xd0>)
 8003198:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_RESET && fres != FR_OK)
 800319a:	2110      	movs	r1, #16
 800319c:	482b      	ldr	r0, [pc, #172]	; (800324c <InitSd+0xdc>)
 800319e:	f002 ff4b 	bl	8006038 <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d125      	bne.n	80031f4 <InitSd+0x84>
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <InitSd+0xd0>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d021      	beq.n	80031f4 <InitSd+0x84>
	{
    HAL_Delay(500);
 80031b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031b4:	f000 ff48 	bl	8004048 <HAL_Delay>
    fres = f_mount(&fs,"", 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	491f      	ldr	r1, [pc, #124]	; (8003238 <InitSd+0xc8>)
 80031bc:	481f      	ldr	r0, [pc, #124]	; (800323c <InitSd+0xcc>)
 80031be:	f007 fca9 	bl	800ab14 <f_mount>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <InitSd+0xd0>)
 80031c8:	701a      	strb	r2, [r3, #0]
    fres = f_open(&fil, "STO.txt", FA_OPEN_APPEND | FA_WRITE);
 80031ca:	2232      	movs	r2, #50	; 0x32
 80031cc:	491d      	ldr	r1, [pc, #116]	; (8003244 <InitSd+0xd4>)
 80031ce:	481e      	ldr	r0, [pc, #120]	; (8003248 <InitSd+0xd8>)
 80031d0:	f007 fce6 	bl	800aba0 <f_open>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <InitSd+0xd0>)
 80031da:	701a      	strb	r2, [r3, #0]
	   if(fres != FR_OK)
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <InitSd+0xd0>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <InitSd+0x78>
	   {
	   Error_Handler();
 80031e4:	f7ff ff35 	bl	8003052 <Error_Handler>
	   }
	f_puts("Czas                                Zdarzenie\n", &fil);
 80031e8:	4917      	ldr	r1, [pc, #92]	; (8003248 <InitSd+0xd8>)
 80031ea:	4819      	ldr	r0, [pc, #100]	; (8003250 <InitSd+0xe0>)
 80031ec:	f008 f957 	bl	800b49e <f_puts>
	CloseFile();
 80031f0:	f000 fc7c 	bl	8003aec <CloseFile>
    }
	OpenFile();
 80031f4:	f000 fc4a 	bl	8003a8c <OpenFile>
	f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Zalaczenie systemu\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <InitSd+0xe4>)
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <InitSd+0xe4>)
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	461d      	mov	r5, r3
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <InitSd+0xe4>)
 8003208:	789b      	ldrb	r3, [r3, #2]
 800320a:	4619      	mov	r1, r3
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <InitSd+0xe8>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <InitSd+0xe8>)
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	461c      	mov	r4, r3
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <InitSd+0xe8>)
 800321a:	789b      	ldrb	r3, [r3, #2]
 800321c:	9303      	str	r3, [sp, #12]
 800321e:	9402      	str	r4, [sp, #8]
 8003220:	9001      	str	r0, [sp, #4]
 8003222:	9100      	str	r1, [sp, #0]
 8003224:	462b      	mov	r3, r5
 8003226:	490d      	ldr	r1, [pc, #52]	; (800325c <InitSd+0xec>)
 8003228:	4807      	ldr	r0, [pc, #28]	; (8003248 <InitSd+0xd8>)
 800322a:	f008 f95d 	bl	800b4e8 <f_printf>
	CloseFile();
 800322e:	f000 fc5d 	bl	8003aec <CloseFile>
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	0800bbd8 	.word	0x0800bbd8
 800323c:	2000020c 	.word	0x2000020c
 8003240:	20002274 	.word	0x20002274
 8003244:	0800bbdc 	.word	0x0800bbdc
 8003248:	20001244 	.word	0x20001244
 800324c:	48000800 	.word	0x48000800
 8003250:	0800bbe4 	.word	0x0800bbe4
 8003254:	2000228c 	.word	0x2000228c
 8003258:	20002278 	.word	0x20002278
 800325c:	0800bc14 	.word	0x0800bc14

08003260 <ToSdCard>:

void ToSdCard(zdarzenia_t sd_event)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af04      	add	r7, sp, #16
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
   Configuration *config_sd = &config;
 800326a:	4ba4      	ldr	r3, [pc, #656]	; (80034fc <ToSdCard+0x29c>)
 800326c:	60fb      	str	r3, [r7, #12]

	switch(sd_event)
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b17      	cmp	r3, #23
 8003272:	f200 83e7 	bhi.w	8003a44 <ToSdCard+0x7e4>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <ToSdCard+0x1c>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	08003321 	.word	0x08003321
 8003280:	080032dd 	.word	0x080032dd
 8003284:	08003365 	.word	0x08003365
 8003288:	080033a9 	.word	0x080033a9
 800328c:	080033ed 	.word	0x080033ed
 8003290:	08003431 	.word	0x08003431
 8003294:	08003475 	.word	0x08003475
 8003298:	080034b9 	.word	0x080034b9
 800329c:	0800352d 	.word	0x0800352d
 80032a0:	08003571 	.word	0x08003571
 80032a4:	080035b5 	.word	0x080035b5
 80032a8:	080035f9 	.word	0x080035f9
 80032ac:	0800363d 	.word	0x0800363d
 80032b0:	08003681 	.word	0x08003681
 80032b4:	080036c5 	.word	0x080036c5
 80032b8:	08003709 	.word	0x08003709
 80032bc:	0800374d 	.word	0x0800374d
 80032c0:	080037c1 	.word	0x080037c1
 80032c4:	08003805 	.word	0x08003805
 80032c8:	08003849 	.word	0x08003849
 80032cc:	0800388d 	.word	0x0800388d
 80032d0:	08003925 	.word	0x08003925
 80032d4:	080039bd 	.word	0x080039bd
 80032d8:	08003a01 	.word	0x08003a01
	{
	case BATERIA:

		OpenFile();
 80032dc:	f000 fbd6 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                niski poziom baterii\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80032e0:	4b87      	ldr	r3, [pc, #540]	; (8003500 <ToSdCard+0x2a0>)
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80032e8:	4b85      	ldr	r3, [pc, #532]	; (8003500 <ToSdCard+0x2a0>)
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	461d      	mov	r5, r3
 80032ee:	4b84      	ldr	r3, [pc, #528]	; (8003500 <ToSdCard+0x2a0>)
 80032f0:	789b      	ldrb	r3, [r3, #2]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <ToSdCard+0x2a4>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	4b82      	ldr	r3, [pc, #520]	; (8003504 <ToSdCard+0x2a4>)
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	461c      	mov	r4, r3
 8003300:	4b80      	ldr	r3, [pc, #512]	; (8003504 <ToSdCard+0x2a4>)
 8003302:	789b      	ldrb	r3, [r3, #2]
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	9402      	str	r4, [sp, #8]
 8003308:	9001      	str	r0, [sp, #4]
 800330a:	9100      	str	r1, [sp, #0]
 800330c:	462b      	mov	r3, r5
 800330e:	497e      	ldr	r1, [pc, #504]	; (8003508 <ToSdCard+0x2a8>)
 8003310:	487e      	ldr	r0, [pc, #504]	; (800350c <ToSdCard+0x2ac>)
 8003312:	f008 f8e9 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003316:	2318      	movs	r3, #24
 8003318:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800331a:	f000 fbe7 	bl	8003aec <CloseFile>
		break;
 800331e:	e391      	b.n	8003a44 <ToSdCard+0x7e4>
	case OPOZNIENIE_ZADZIALANIA:

		OpenFile();
 8003320:	f000 fbb4 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                opoznienie zadziałania\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <ToSdCard+0x2a0>)
 8003326:	78db      	ldrb	r3, [r3, #3]
 8003328:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800332c:	4b74      	ldr	r3, [pc, #464]	; (8003500 <ToSdCard+0x2a0>)
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	461d      	mov	r5, r3
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <ToSdCard+0x2a0>)
 8003334:	789b      	ldrb	r3, [r3, #2]
 8003336:	4619      	mov	r1, r3
 8003338:	4b72      	ldr	r3, [pc, #456]	; (8003504 <ToSdCard+0x2a4>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	4b71      	ldr	r3, [pc, #452]	; (8003504 <ToSdCard+0x2a4>)
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	461c      	mov	r4, r3
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <ToSdCard+0x2a4>)
 8003346:	789b      	ldrb	r3, [r3, #2]
 8003348:	9303      	str	r3, [sp, #12]
 800334a:	9402      	str	r4, [sp, #8]
 800334c:	9001      	str	r0, [sp, #4]
 800334e:	9100      	str	r1, [sp, #0]
 8003350:	462b      	mov	r3, r5
 8003352:	496f      	ldr	r1, [pc, #444]	; (8003510 <ToSdCard+0x2b0>)
 8003354:	486d      	ldr	r0, [pc, #436]	; (800350c <ToSdCard+0x2ac>)
 8003356:	f008 f8c7 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 800335a:	2318      	movs	r3, #24
 800335c:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800335e:	f000 fbc5 	bl	8003aec <CloseFile>
		break;
 8003362:	e36f      	b.n	8003a44 <ToSdCard+0x7e4>
	case MANUALNE_WYZWOLENIE:

		OpenFile();
 8003364:	f000 fb92 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                reczne wyzwolenie gaśnicy\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003368:	4b65      	ldr	r3, [pc, #404]	; (8003500 <ToSdCard+0x2a0>)
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003370:	4b63      	ldr	r3, [pc, #396]	; (8003500 <ToSdCard+0x2a0>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	461d      	mov	r5, r3
 8003376:	4b62      	ldr	r3, [pc, #392]	; (8003500 <ToSdCard+0x2a0>)
 8003378:	789b      	ldrb	r3, [r3, #2]
 800337a:	4619      	mov	r1, r3
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <ToSdCard+0x2a4>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <ToSdCard+0x2a4>)
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	461c      	mov	r4, r3
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <ToSdCard+0x2a4>)
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	9303      	str	r3, [sp, #12]
 800338e:	9402      	str	r4, [sp, #8]
 8003390:	9001      	str	r0, [sp, #4]
 8003392:	9100      	str	r1, [sp, #0]
 8003394:	462b      	mov	r3, r5
 8003396:	495f      	ldr	r1, [pc, #380]	; (8003514 <ToSdCard+0x2b4>)
 8003398:	485c      	ldr	r0, [pc, #368]	; (800350c <ToSdCard+0x2ac>)
 800339a:	f008 f8a5 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 800339e:	2318      	movs	r3, #24
 80033a0:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80033a2:	f000 fba3 	bl	8003aec <CloseFile>
		break;
 80033a6:	e34d      	b.n	8003a44 <ToSdCard+0x7e4>
	case WYZWOLENIE_KABEL_STREFA_1:

		OpenFile();
 80033a8:	f000 fb70 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                kabel detekcyjny - wyzwolenie gasnicy strefa 1\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80033ac:	4b54      	ldr	r3, [pc, #336]	; (8003500 <ToSdCard+0x2a0>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80033b4:	4b52      	ldr	r3, [pc, #328]	; (8003500 <ToSdCard+0x2a0>)
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	461d      	mov	r5, r3
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <ToSdCard+0x2a0>)
 80033bc:	789b      	ldrb	r3, [r3, #2]
 80033be:	4619      	mov	r1, r3
 80033c0:	4b50      	ldr	r3, [pc, #320]	; (8003504 <ToSdCard+0x2a4>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <ToSdCard+0x2a4>)
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	461c      	mov	r4, r3
 80033cc:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <ToSdCard+0x2a4>)
 80033ce:	789b      	ldrb	r3, [r3, #2]
 80033d0:	9303      	str	r3, [sp, #12]
 80033d2:	9402      	str	r4, [sp, #8]
 80033d4:	9001      	str	r0, [sp, #4]
 80033d6:	9100      	str	r1, [sp, #0]
 80033d8:	462b      	mov	r3, r5
 80033da:	494f      	ldr	r1, [pc, #316]	; (8003518 <ToSdCard+0x2b8>)
 80033dc:	484b      	ldr	r0, [pc, #300]	; (800350c <ToSdCard+0x2ac>)
 80033de:	f008 f883 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80033e2:	2318      	movs	r3, #24
 80033e4:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80033e6:	f000 fb81 	bl	8003aec <CloseFile>
		break;
 80033ea:	e32b      	b.n	8003a44 <ToSdCard+0x7e4>

	case WYZWOLENIE_KABEL_STREFA_2:

		OpenFile();
 80033ec:	f000 fb4e 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                kabel detekcyjny - wyzwolenie gasnicy strefa 2\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <ToSdCard+0x2a0>)
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80033f8:	4b41      	ldr	r3, [pc, #260]	; (8003500 <ToSdCard+0x2a0>)
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	461d      	mov	r5, r3
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <ToSdCard+0x2a0>)
 8003400:	789b      	ldrb	r3, [r3, #2]
 8003402:	4619      	mov	r1, r3
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <ToSdCard+0x2a4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <ToSdCard+0x2a4>)
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	461c      	mov	r4, r3
 8003410:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <ToSdCard+0x2a4>)
 8003412:	789b      	ldrb	r3, [r3, #2]
 8003414:	9303      	str	r3, [sp, #12]
 8003416:	9402      	str	r4, [sp, #8]
 8003418:	9001      	str	r0, [sp, #4]
 800341a:	9100      	str	r1, [sp, #0]
 800341c:	462b      	mov	r3, r5
 800341e:	493f      	ldr	r1, [pc, #252]	; (800351c <ToSdCard+0x2bc>)
 8003420:	483a      	ldr	r0, [pc, #232]	; (800350c <ToSdCard+0x2ac>)
 8003422:	f008 f861 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003426:	2318      	movs	r3, #24
 8003428:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800342a:	f000 fb5f 	bl	8003aec <CloseFile>
		break;
 800342e:	e309      	b.n	8003a44 <ToSdCard+0x7e4>

	case WYZWOLENIE_KABEL_STREFA_3:

		OpenFile();
 8003430:	f000 fb2c 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                kabel detekcyjny - wyzwolenie gasnicy strefa 3\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <ToSdCard+0x2a0>)
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <ToSdCard+0x2a0>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	461d      	mov	r5, r3
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <ToSdCard+0x2a0>)
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	4619      	mov	r1, r3
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <ToSdCard+0x2a4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <ToSdCard+0x2a4>)
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	461c      	mov	r4, r3
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <ToSdCard+0x2a4>)
 8003456:	789b      	ldrb	r3, [r3, #2]
 8003458:	9303      	str	r3, [sp, #12]
 800345a:	9402      	str	r4, [sp, #8]
 800345c:	9001      	str	r0, [sp, #4]
 800345e:	9100      	str	r1, [sp, #0]
 8003460:	462b      	mov	r3, r5
 8003462:	492f      	ldr	r1, [pc, #188]	; (8003520 <ToSdCard+0x2c0>)
 8003464:	4829      	ldr	r0, [pc, #164]	; (800350c <ToSdCard+0x2ac>)
 8003466:	f008 f83f 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 800346a:	2318      	movs	r3, #24
 800346c:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800346e:	f000 fb3d 	bl	8003aec <CloseFile>
		break;
 8003472:	e2e7      	b.n	8003a44 <ToSdCard+0x7e4>

	case WYZWOLENIE_KABEL_STREFA_4:

		OpenFile();
 8003474:	f000 fb0a 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                kabel detekcyjny - wyzwolenie gasnicy strefa 4\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <ToSdCard+0x2a0>)
 800347a:	78db      	ldrb	r3, [r3, #3]
 800347c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <ToSdCard+0x2a0>)
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	461d      	mov	r5, r3
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <ToSdCard+0x2a0>)
 8003488:	789b      	ldrb	r3, [r3, #2]
 800348a:	4619      	mov	r1, r3
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <ToSdCard+0x2a4>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <ToSdCard+0x2a4>)
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	461c      	mov	r4, r3
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <ToSdCard+0x2a4>)
 800349a:	789b      	ldrb	r3, [r3, #2]
 800349c:	9303      	str	r3, [sp, #12]
 800349e:	9402      	str	r4, [sp, #8]
 80034a0:	9001      	str	r0, [sp, #4]
 80034a2:	9100      	str	r1, [sp, #0]
 80034a4:	462b      	mov	r3, r5
 80034a6:	491f      	ldr	r1, [pc, #124]	; (8003524 <ToSdCard+0x2c4>)
 80034a8:	4818      	ldr	r0, [pc, #96]	; (800350c <ToSdCard+0x2ac>)
 80034aa:	f008 f81d 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80034ae:	2318      	movs	r3, #24
 80034b0:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80034b2:	f000 fb1b 	bl	8003aec <CloseFile>
		break;
 80034b6:	e2c5      	b.n	8003a44 <ToSdCard+0x7e4>

	case SPRAWDZENIE_SYSTEMU:

		OpenFile();
 80034b8:	f000 fae8 	bl	8003a8c <OpenFile>
	    f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Sprawdzenie działania systemu\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <ToSdCard+0x2a0>)
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <ToSdCard+0x2a0>)
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	461d      	mov	r5, r3
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <ToSdCard+0x2a0>)
 80034cc:	789b      	ldrb	r3, [r3, #2]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <ToSdCard+0x2a4>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <ToSdCard+0x2a4>)
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	461c      	mov	r4, r3
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <ToSdCard+0x2a4>)
 80034de:	789b      	ldrb	r3, [r3, #2]
 80034e0:	9303      	str	r3, [sp, #12]
 80034e2:	9402      	str	r4, [sp, #8]
 80034e4:	9001      	str	r0, [sp, #4]
 80034e6:	9100      	str	r1, [sp, #0]
 80034e8:	462b      	mov	r3, r5
 80034ea:	490f      	ldr	r1, [pc, #60]	; (8003528 <ToSdCard+0x2c8>)
 80034ec:	4807      	ldr	r0, [pc, #28]	; (800350c <ToSdCard+0x2ac>)
 80034ee:	f007 fffb 	bl	800b4e8 <f_printf>
	    sd_event = BRAK;
 80034f2:	2318      	movs	r3, #24
 80034f4:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80034f6:	f000 faf9 	bl	8003aec <CloseFile>
		break;
 80034fa:	e2a3      	b.n	8003a44 <ToSdCard+0x7e4>
 80034fc:	20000008 	.word	0x20000008
 8003500:	2000228c 	.word	0x2000228c
 8003504:	20002278 	.word	0x20002278
 8003508:	0800bc58 	.word	0x0800bc58
 800350c:	20001244 	.word	0x20001244
 8003510:	0800bc9c 	.word	0x0800bc9c
 8003514:	0800bce4 	.word	0x0800bce4
 8003518:	0800bd30 	.word	0x0800bd30
 800351c:	0800bd90 	.word	0x0800bd90
 8003520:	0800bdf0 	.word	0x0800bdf0
 8003524:	0800be50 	.word	0x0800be50
 8003528:	0800beb0 	.word	0x0800beb0

	case BRAK_GAS1:

		OpenFile();
 800352c:	f000 faae 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Gasnica 1 nie podłaczona\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003530:	4b97      	ldr	r3, [pc, #604]	; (8003790 <ToSdCard+0x530>)
 8003532:	78db      	ldrb	r3, [r3, #3]
 8003534:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003538:	4b95      	ldr	r3, [pc, #596]	; (8003790 <ToSdCard+0x530>)
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	461d      	mov	r5, r3
 800353e:	4b94      	ldr	r3, [pc, #592]	; (8003790 <ToSdCard+0x530>)
 8003540:	789b      	ldrb	r3, [r3, #2]
 8003542:	4619      	mov	r1, r3
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <ToSdCard+0x534>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	4b92      	ldr	r3, [pc, #584]	; (8003794 <ToSdCard+0x534>)
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	461c      	mov	r4, r3
 8003550:	4b90      	ldr	r3, [pc, #576]	; (8003794 <ToSdCard+0x534>)
 8003552:	789b      	ldrb	r3, [r3, #2]
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	9402      	str	r4, [sp, #8]
 8003558:	9001      	str	r0, [sp, #4]
 800355a:	9100      	str	r1, [sp, #0]
 800355c:	462b      	mov	r3, r5
 800355e:	498e      	ldr	r1, [pc, #568]	; (8003798 <ToSdCard+0x538>)
 8003560:	488e      	ldr	r0, [pc, #568]	; (800379c <ToSdCard+0x53c>)
 8003562:	f007 ffc1 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003566:	2318      	movs	r3, #24
 8003568:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800356a:	f000 fabf 	bl	8003aec <CloseFile>
		 break;
 800356e:	e269      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_GAS2:

		OpenFile();
 8003570:	f000 fa8c 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Gasnica 2 nie podłaczona\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003574:	4b86      	ldr	r3, [pc, #536]	; (8003790 <ToSdCard+0x530>)
 8003576:	78db      	ldrb	r3, [r3, #3]
 8003578:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800357c:	4b84      	ldr	r3, [pc, #528]	; (8003790 <ToSdCard+0x530>)
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	461d      	mov	r5, r3
 8003582:	4b83      	ldr	r3, [pc, #524]	; (8003790 <ToSdCard+0x530>)
 8003584:	789b      	ldrb	r3, [r3, #2]
 8003586:	4619      	mov	r1, r3
 8003588:	4b82      	ldr	r3, [pc, #520]	; (8003794 <ToSdCard+0x534>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	4b81      	ldr	r3, [pc, #516]	; (8003794 <ToSdCard+0x534>)
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	461c      	mov	r4, r3
 8003594:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <ToSdCard+0x534>)
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9402      	str	r4, [sp, #8]
 800359c:	9001      	str	r0, [sp, #4]
 800359e:	9100      	str	r1, [sp, #0]
 80035a0:	462b      	mov	r3, r5
 80035a2:	497f      	ldr	r1, [pc, #508]	; (80037a0 <ToSdCard+0x540>)
 80035a4:	487d      	ldr	r0, [pc, #500]	; (800379c <ToSdCard+0x53c>)
 80035a6:	f007 ff9f 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80035aa:	2318      	movs	r3, #24
 80035ac:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80035ae:	f000 fa9d 	bl	8003aec <CloseFile>
		 break;
 80035b2:	e247      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_GAS3:

		OpenFile();
 80035b4:	f000 fa6a 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Gasnica 3 nie podłaczona\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <ToSdCard+0x530>)
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <ToSdCard+0x530>)
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	461d      	mov	r5, r3
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <ToSdCard+0x530>)
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	4619      	mov	r1, r3
 80035cc:	4b71      	ldr	r3, [pc, #452]	; (8003794 <ToSdCard+0x534>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <ToSdCard+0x534>)
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	461c      	mov	r4, r3
 80035d8:	4b6e      	ldr	r3, [pc, #440]	; (8003794 <ToSdCard+0x534>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	9303      	str	r3, [sp, #12]
 80035de:	9402      	str	r4, [sp, #8]
 80035e0:	9001      	str	r0, [sp, #4]
 80035e2:	9100      	str	r1, [sp, #0]
 80035e4:	462b      	mov	r3, r5
 80035e6:	496f      	ldr	r1, [pc, #444]	; (80037a4 <ToSdCard+0x544>)
 80035e8:	486c      	ldr	r0, [pc, #432]	; (800379c <ToSdCard+0x53c>)
 80035ea:	f007 ff7d 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80035ee:	2318      	movs	r3, #24
 80035f0:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80035f2:	f000 fa7b 	bl	8003aec <CloseFile>
		 break;
 80035f6:	e225      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_GAS4:

		OpenFile();
 80035f8:	f000 fa48 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Gasnica 4 nie podłaczona\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80035fc:	4b64      	ldr	r3, [pc, #400]	; (8003790 <ToSdCard+0x530>)
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003604:	4b62      	ldr	r3, [pc, #392]	; (8003790 <ToSdCard+0x530>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	461d      	mov	r5, r3
 800360a:	4b61      	ldr	r3, [pc, #388]	; (8003790 <ToSdCard+0x530>)
 800360c:	789b      	ldrb	r3, [r3, #2]
 800360e:	4619      	mov	r1, r3
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <ToSdCard+0x534>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <ToSdCard+0x534>)
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	461c      	mov	r4, r3
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <ToSdCard+0x534>)
 800361e:	789b      	ldrb	r3, [r3, #2]
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	9402      	str	r4, [sp, #8]
 8003624:	9001      	str	r0, [sp, #4]
 8003626:	9100      	str	r1, [sp, #0]
 8003628:	462b      	mov	r3, r5
 800362a:	495f      	ldr	r1, [pc, #380]	; (80037a8 <ToSdCard+0x548>)
 800362c:	485b      	ldr	r0, [pc, #364]	; (800379c <ToSdCard+0x53c>)
 800362e:	f007 ff5b 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003632:	2318      	movs	r3, #24
 8003634:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 8003636:	f000 fa59 	bl	8003aec <CloseFile>
		 break;
 800363a:	e203      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_KABLA_DET1:

		OpenFile();
 800363c:	f000 fa26 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Kabel detekcyjny 1 nie podlaczony\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <ToSdCard+0x530>)
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003648:	4b51      	ldr	r3, [pc, #324]	; (8003790 <ToSdCard+0x530>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	461d      	mov	r5, r3
 800364e:	4b50      	ldr	r3, [pc, #320]	; (8003790 <ToSdCard+0x530>)
 8003650:	789b      	ldrb	r3, [r3, #2]
 8003652:	4619      	mov	r1, r3
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <ToSdCard+0x534>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <ToSdCard+0x534>)
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	461c      	mov	r4, r3
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <ToSdCard+0x534>)
 8003662:	789b      	ldrb	r3, [r3, #2]
 8003664:	9303      	str	r3, [sp, #12]
 8003666:	9402      	str	r4, [sp, #8]
 8003668:	9001      	str	r0, [sp, #4]
 800366a:	9100      	str	r1, [sp, #0]
 800366c:	462b      	mov	r3, r5
 800366e:	494f      	ldr	r1, [pc, #316]	; (80037ac <ToSdCard+0x54c>)
 8003670:	484a      	ldr	r0, [pc, #296]	; (800379c <ToSdCard+0x53c>)
 8003672:	f007 ff39 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003676:	2318      	movs	r3, #24
 8003678:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800367a:	f000 fa37 	bl	8003aec <CloseFile>
		break;
 800367e:	e1e1      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_KABLA_DET2:

		OpenFile();
 8003680:	f000 fa04 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Kabel detekcyjny 2 nie podlaczony\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <ToSdCard+0x530>)
 8003686:	78db      	ldrb	r3, [r3, #3]
 8003688:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <ToSdCard+0x530>)
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	461d      	mov	r5, r3
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <ToSdCard+0x530>)
 8003694:	789b      	ldrb	r3, [r3, #2]
 8003696:	4619      	mov	r1, r3
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <ToSdCard+0x534>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <ToSdCard+0x534>)
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	461c      	mov	r4, r3
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <ToSdCard+0x534>)
 80036a6:	789b      	ldrb	r3, [r3, #2]
 80036a8:	9303      	str	r3, [sp, #12]
 80036aa:	9402      	str	r4, [sp, #8]
 80036ac:	9001      	str	r0, [sp, #4]
 80036ae:	9100      	str	r1, [sp, #0]
 80036b0:	462b      	mov	r3, r5
 80036b2:	493f      	ldr	r1, [pc, #252]	; (80037b0 <ToSdCard+0x550>)
 80036b4:	4839      	ldr	r0, [pc, #228]	; (800379c <ToSdCard+0x53c>)
 80036b6:	f007 ff17 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80036ba:	2318      	movs	r3, #24
 80036bc:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80036be:	f000 fa15 	bl	8003aec <CloseFile>
		break;
 80036c2:	e1bf      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_KABLA_DET3:

		OpenFile();
 80036c4:	f000 f9e2 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Kabel detekcyjny 3 nie podlaczony\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <ToSdCard+0x530>)
 80036ca:	78db      	ldrb	r3, [r3, #3]
 80036cc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <ToSdCard+0x530>)
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	461d      	mov	r5, r3
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <ToSdCard+0x530>)
 80036d8:	789b      	ldrb	r3, [r3, #2]
 80036da:	4619      	mov	r1, r3
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <ToSdCard+0x534>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <ToSdCard+0x534>)
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	461c      	mov	r4, r3
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <ToSdCard+0x534>)
 80036ea:	789b      	ldrb	r3, [r3, #2]
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9402      	str	r4, [sp, #8]
 80036f0:	9001      	str	r0, [sp, #4]
 80036f2:	9100      	str	r1, [sp, #0]
 80036f4:	462b      	mov	r3, r5
 80036f6:	492f      	ldr	r1, [pc, #188]	; (80037b4 <ToSdCard+0x554>)
 80036f8:	4828      	ldr	r0, [pc, #160]	; (800379c <ToSdCard+0x53c>)
 80036fa:	f007 fef5 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80036fe:	2318      	movs	r3, #24
 8003700:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 8003702:	f000 f9f3 	bl	8003aec <CloseFile>
		break;
 8003706:	e19d      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_KABLA_DET4:

		OpenFile();
 8003708:	f000 f9c0 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Kabel detekcyjny 4 nie podlaczony\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <ToSdCard+0x530>)
 800370e:	78db      	ldrb	r3, [r3, #3]
 8003710:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <ToSdCard+0x530>)
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	461d      	mov	r5, r3
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <ToSdCard+0x530>)
 800371c:	789b      	ldrb	r3, [r3, #2]
 800371e:	4619      	mov	r1, r3
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <ToSdCard+0x534>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <ToSdCard+0x534>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	461c      	mov	r4, r3
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <ToSdCard+0x534>)
 800372e:	789b      	ldrb	r3, [r3, #2]
 8003730:	9303      	str	r3, [sp, #12]
 8003732:	9402      	str	r4, [sp, #8]
 8003734:	9001      	str	r0, [sp, #4]
 8003736:	9100      	str	r1, [sp, #0]
 8003738:	462b      	mov	r3, r5
 800373a:	491f      	ldr	r1, [pc, #124]	; (80037b8 <ToSdCard+0x558>)
 800373c:	4817      	ldr	r0, [pc, #92]	; (800379c <ToSdCard+0x53c>)
 800373e:	f007 fed3 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003742:	2318      	movs	r3, #24
 8003744:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 8003746:	f000 f9d1 	bl	8003aec <CloseFile>
		break;
 800374a:	e17b      	b.n	8003a44 <ToSdCard+0x7e4>

	case NORMAL_WORK:

		OpenFile();
 800374c:	f000 f99e 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Prawidlowia praca\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <ToSdCard+0x530>)
 8003752:	78db      	ldrb	r3, [r3, #3]
 8003754:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <ToSdCard+0x530>)
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	461d      	mov	r5, r3
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <ToSdCard+0x530>)
 8003760:	789b      	ldrb	r3, [r3, #2]
 8003762:	4619      	mov	r1, r3
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <ToSdCard+0x534>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <ToSdCard+0x534>)
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	461c      	mov	r4, r3
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <ToSdCard+0x534>)
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	9303      	str	r3, [sp, #12]
 8003776:	9402      	str	r4, [sp, #8]
 8003778:	9001      	str	r0, [sp, #4]
 800377a:	9100      	str	r1, [sp, #0]
 800377c:	462b      	mov	r3, r5
 800377e:	490f      	ldr	r1, [pc, #60]	; (80037bc <ToSdCard+0x55c>)
 8003780:	4806      	ldr	r0, [pc, #24]	; (800379c <ToSdCard+0x53c>)
 8003782:	f007 feb1 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003786:	2318      	movs	r3, #24
 8003788:	71fb      	strb	r3, [r7, #7]
	    CloseFile();
 800378a:	f000 f9af 	bl	8003aec <CloseFile>
		break;
 800378e:	e159      	b.n	8003a44 <ToSdCard+0x7e4>
 8003790:	2000228c 	.word	0x2000228c
 8003794:	20002278 	.word	0x20002278
 8003798:	0800bf00 	.word	0x0800bf00
 800379c:	20001244 	.word	0x20001244
 80037a0:	0800bf4c 	.word	0x0800bf4c
 80037a4:	0800bf98 	.word	0x0800bf98
 80037a8:	0800bfe4 	.word	0x0800bfe4
 80037ac:	0800c030 	.word	0x0800c030
 80037b0:	0800c084 	.word	0x0800c084
 80037b4:	0800c0d8 	.word	0x0800c0d8
 80037b8:	0800c12c 	.word	0x0800c12c
 80037bc:	0800c180 	.word	0x0800c180

	case GASNICA_URUCHOMIONA:

		OpenFile();
 80037c0:	f000 f964 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Gasnice uruchomione\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80037c4:	4ba1      	ldr	r3, [pc, #644]	; (8003a4c <ToSdCard+0x7ec>)
 80037c6:	78db      	ldrb	r3, [r3, #3]
 80037c8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80037cc:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <ToSdCard+0x7ec>)
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	461d      	mov	r5, r3
 80037d2:	4b9e      	ldr	r3, [pc, #632]	; (8003a4c <ToSdCard+0x7ec>)
 80037d4:	789b      	ldrb	r3, [r3, #2]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4b9d      	ldr	r3, [pc, #628]	; (8003a50 <ToSdCard+0x7f0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	4b9c      	ldr	r3, [pc, #624]	; (8003a50 <ToSdCard+0x7f0>)
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	461c      	mov	r4, r3
 80037e4:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <ToSdCard+0x7f0>)
 80037e6:	789b      	ldrb	r3, [r3, #2]
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	9402      	str	r4, [sp, #8]
 80037ec:	9001      	str	r0, [sp, #4]
 80037ee:	9100      	str	r1, [sp, #0]
 80037f0:	462b      	mov	r3, r5
 80037f2:	4998      	ldr	r1, [pc, #608]	; (8003a54 <ToSdCard+0x7f4>)
 80037f4:	4898      	ldr	r0, [pc, #608]	; (8003a58 <ToSdCard+0x7f8>)
 80037f6:	f007 fe77 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80037fa:	2318      	movs	r3, #24
 80037fc:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80037fe:	f000 f975 	bl	8003aec <CloseFile>
		break;
 8003802:	e11f      	b.n	8003a44 <ToSdCard+0x7e4>
	case SERWIS_ON:

		OpenFile();
 8003804:	f000 f942 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Zalaczony tryb serwisowy\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003808:	4b90      	ldr	r3, [pc, #576]	; (8003a4c <ToSdCard+0x7ec>)
 800380a:	78db      	ldrb	r3, [r3, #3]
 800380c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003810:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <ToSdCard+0x7ec>)
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	461d      	mov	r5, r3
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <ToSdCard+0x7ec>)
 8003818:	789b      	ldrb	r3, [r3, #2]
 800381a:	4619      	mov	r1, r3
 800381c:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <ToSdCard+0x7f0>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <ToSdCard+0x7f0>)
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	461c      	mov	r4, r3
 8003828:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <ToSdCard+0x7f0>)
 800382a:	789b      	ldrb	r3, [r3, #2]
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	9402      	str	r4, [sp, #8]
 8003830:	9001      	str	r0, [sp, #4]
 8003832:	9100      	str	r1, [sp, #0]
 8003834:	462b      	mov	r3, r5
 8003836:	4989      	ldr	r1, [pc, #548]	; (8003a5c <ToSdCard+0x7fc>)
 8003838:	4887      	ldr	r0, [pc, #540]	; (8003a58 <ToSdCard+0x7f8>)
 800383a:	f007 fe55 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 800383e:	2318      	movs	r3, #24
 8003840:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 8003842:	f000 f953 	bl	8003aec <CloseFile>
		break;
 8003846:	e0fd      	b.n	8003a44 <ToSdCard+0x7e4>

	case SERWIS_OFF:

		OpenFile();
 8003848:	f000 f920 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Wylaczony tryb serwisowy\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 800384c:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <ToSdCard+0x7ec>)
 800384e:	78db      	ldrb	r3, [r3, #3]
 8003850:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003854:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <ToSdCard+0x7ec>)
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	461d      	mov	r5, r3
 800385a:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <ToSdCard+0x7ec>)
 800385c:	789b      	ldrb	r3, [r3, #2]
 800385e:	4619      	mov	r1, r3
 8003860:	4b7b      	ldr	r3, [pc, #492]	; (8003a50 <ToSdCard+0x7f0>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <ToSdCard+0x7f0>)
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	461c      	mov	r4, r3
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <ToSdCard+0x7f0>)
 800386e:	789b      	ldrb	r3, [r3, #2]
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9402      	str	r4, [sp, #8]
 8003874:	9001      	str	r0, [sp, #4]
 8003876:	9100      	str	r1, [sp, #0]
 8003878:	462b      	mov	r3, r5
 800387a:	4979      	ldr	r1, [pc, #484]	; (8003a60 <ToSdCard+0x800>)
 800387c:	4876      	ldr	r0, [pc, #472]	; (8003a58 <ToSdCard+0x7f8>)
 800387e:	f007 fe33 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 8003882:	2318      	movs	r3, #24
 8003884:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 8003886:	f000 f931 	bl	8003aec <CloseFile>
		break;
 800388a:	e0db      	b.n	8003a44 <ToSdCard+0x7e4>

	case CONFIG_UPADATE:

		OpenFile();
 800388c:	f000 f8fe 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Zmiana konfiguracji:\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003890:	4b6e      	ldr	r3, [pc, #440]	; (8003a4c <ToSdCard+0x7ec>)
 8003892:	78db      	ldrb	r3, [r3, #3]
 8003894:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <ToSdCard+0x7ec>)
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	461d      	mov	r5, r3
 800389e:	4b6b      	ldr	r3, [pc, #428]	; (8003a4c <ToSdCard+0x7ec>)
 80038a0:	789b      	ldrb	r3, [r3, #2]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <ToSdCard+0x7f0>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	4b69      	ldr	r3, [pc, #420]	; (8003a50 <ToSdCard+0x7f0>)
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	461c      	mov	r4, r3
 80038b0:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <ToSdCard+0x7f0>)
 80038b2:	789b      	ldrb	r3, [r3, #2]
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	9402      	str	r4, [sp, #8]
 80038b8:	9001      	str	r0, [sp, #4]
 80038ba:	9100      	str	r1, [sp, #0]
 80038bc:	462b      	mov	r3, r5
 80038be:	4969      	ldr	r1, [pc, #420]	; (8003a64 <ToSdCard+0x804>)
 80038c0:	4865      	ldr	r0, [pc, #404]	; (8003a58 <ToSdCard+0x7f8>)
 80038c2:	f007 fe11 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc kabli:                                  %d szt.             \n", config_sd->amount_det_cables);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4966      	ldr	r1, [pc, #408]	; (8003a68 <ToSdCard+0x808>)
 80038ce:	4862      	ldr	r0, [pc, #392]	; (8003a58 <ToSdCard+0x7f8>)
 80038d0:	f007 fe0a 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc gasnic:                                 %d szt.             \n", config_sd->amount_extinguisher);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	461a      	mov	r2, r3
 80038da:	4964      	ldr	r1, [pc, #400]	; (8003a6c <ToSdCard+0x80c>)
 80038dc:	485e      	ldr	r0, [pc, #376]	; (8003a58 <ToSdCard+0x7f8>)
 80038de:	f007 fe03 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc stref gasniczych:                       %d szt.             \n", config_sd->amount_zone);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4961      	ldr	r1, [pc, #388]	; (8003a70 <ToSdCard+0x810>)
 80038ea:	485b      	ldr	r0, [pc, #364]	; (8003a58 <ToSdCard+0x7f8>)
 80038ec:	f007 fdfc 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas wyzwolenia gasnicy - przewod:            %d sek.             \n", config_sd->time_cable_trigger);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	461a      	mov	r2, r3
 80038f6:	495f      	ldr	r1, [pc, #380]	; (8003a74 <ToSdCard+0x814>)
 80038f8:	4857      	ldr	r0, [pc, #348]	; (8003a58 <ToSdCard+0x7f8>)
 80038fa:	f007 fdf5 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas wyzwolenia gasnicy - zrywka:             %d sek.             \n", config_sd->time_breakup_trigger);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	791b      	ldrb	r3, [r3, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	495c      	ldr	r1, [pc, #368]	; (8003a78 <ToSdCard+0x818>)
 8003906:	4854      	ldr	r0, [pc, #336]	; (8003a58 <ToSdCard+0x7f8>)
 8003908:	f007 fdee 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas opoznienia wyzwolenia:                   %d sek.             \n", config_sd->time_delay_trigger);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	795b      	ldrb	r3, [r3, #5]
 8003910:	461a      	mov	r2, r3
 8003912:	495a      	ldr	r1, [pc, #360]	; (8003a7c <ToSdCard+0x81c>)
 8003914:	4850      	ldr	r0, [pc, #320]	; (8003a58 <ToSdCard+0x7f8>)
 8003916:	f007 fde7 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 800391a:	2318      	movs	r3, #24
 800391c:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 800391e:	f000 f8e5 	bl	8003aec <CloseFile>
		break;
 8003922:	e08f      	b.n	8003a44 <ToSdCard+0x7e4>
	case CONFIG_ACTUAL:

		OpenFile();
 8003924:	f000 f8b2 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                obecna konfiguracja:\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003928:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <ToSdCard+0x7ec>)
 800392a:	78db      	ldrb	r3, [r3, #3]
 800392c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <ToSdCard+0x7ec>)
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	461d      	mov	r5, r3
 8003936:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <ToSdCard+0x7ec>)
 8003938:	789b      	ldrb	r3, [r3, #2]
 800393a:	4619      	mov	r1, r3
 800393c:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <ToSdCard+0x7f0>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <ToSdCard+0x7f0>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	461c      	mov	r4, r3
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <ToSdCard+0x7f0>)
 800394a:	789b      	ldrb	r3, [r3, #2]
 800394c:	9303      	str	r3, [sp, #12]
 800394e:	9402      	str	r4, [sp, #8]
 8003950:	9001      	str	r0, [sp, #4]
 8003952:	9100      	str	r1, [sp, #0]
 8003954:	462b      	mov	r3, r5
 8003956:	494a      	ldr	r1, [pc, #296]	; (8003a80 <ToSdCard+0x820>)
 8003958:	483f      	ldr	r0, [pc, #252]	; (8003a58 <ToSdCard+0x7f8>)
 800395a:	f007 fdc5 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc kabli:                                  %d szt.             \n", config_sd->amount_det_cables);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4940      	ldr	r1, [pc, #256]	; (8003a68 <ToSdCard+0x808>)
 8003966:	483c      	ldr	r0, [pc, #240]	; (8003a58 <ToSdCard+0x7f8>)
 8003968:	f007 fdbe 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc gasnic:                                 %d szt.             \n", config_sd->amount_extinguisher);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	461a      	mov	r2, r3
 8003972:	493e      	ldr	r1, [pc, #248]	; (8003a6c <ToSdCard+0x80c>)
 8003974:	4838      	ldr	r0, [pc, #224]	; (8003a58 <ToSdCard+0x7f8>)
 8003976:	f007 fdb7 	bl	800b4e8 <f_printf>
		f_printf(&fil,"Ilosc stref gasniczych:                       %d szt.             \n", config_sd->amount_zone);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	789b      	ldrb	r3, [r3, #2]
 800397e:	461a      	mov	r2, r3
 8003980:	493b      	ldr	r1, [pc, #236]	; (8003a70 <ToSdCard+0x810>)
 8003982:	4835      	ldr	r0, [pc, #212]	; (8003a58 <ToSdCard+0x7f8>)
 8003984:	f007 fdb0 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas wyzwolenia gasnicy - przewod:            %d sek.             \n", config_sd->time_cable_trigger);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	78db      	ldrb	r3, [r3, #3]
 800398c:	461a      	mov	r2, r3
 800398e:	4939      	ldr	r1, [pc, #228]	; (8003a74 <ToSdCard+0x814>)
 8003990:	4831      	ldr	r0, [pc, #196]	; (8003a58 <ToSdCard+0x7f8>)
 8003992:	f007 fda9 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas wyzwolenia gasnicy - zrywka:             %d sek.             \n", config_sd->time_breakup_trigger);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	461a      	mov	r2, r3
 800399c:	4936      	ldr	r1, [pc, #216]	; (8003a78 <ToSdCard+0x818>)
 800399e:	482e      	ldr	r0, [pc, #184]	; (8003a58 <ToSdCard+0x7f8>)
 80039a0:	f007 fda2 	bl	800b4e8 <f_printf>
		f_printf(&fil,"czas opoznienia wyzwolenia:                   %d sek.             \n", config_sd->time_delay_trigger);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	795b      	ldrb	r3, [r3, #5]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4934      	ldr	r1, [pc, #208]	; (8003a7c <ToSdCard+0x81c>)
 80039ac:	482a      	ldr	r0, [pc, #168]	; (8003a58 <ToSdCard+0x7f8>)
 80039ae:	f007 fd9b 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80039b2:	2318      	movs	r3, #24
 80039b4:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80039b6:	f000 f899 	bl	8003aec <CloseFile>
		break;
 80039ba:	e043      	b.n	8003a44 <ToSdCard+0x7e4>

	case KABEL_SERWIS:

		OpenFile();
 80039bc:	f000 f866 	bl	8003a8c <OpenFile>
		f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Kabel detekcyjny został zwarty trybie serwisowym\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <ToSdCard+0x7ec>)
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <ToSdCard+0x7ec>)
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	461d      	mov	r5, r3
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <ToSdCard+0x7ec>)
 80039d0:	789b      	ldrb	r3, [r3, #2]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <ToSdCard+0x7f0>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <ToSdCard+0x7f0>)
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	461c      	mov	r4, r3
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <ToSdCard+0x7f0>)
 80039e2:	789b      	ldrb	r3, [r3, #2]
 80039e4:	9303      	str	r3, [sp, #12]
 80039e6:	9402      	str	r4, [sp, #8]
 80039e8:	9001      	str	r0, [sp, #4]
 80039ea:	9100      	str	r1, [sp, #0]
 80039ec:	462b      	mov	r3, r5
 80039ee:	4925      	ldr	r1, [pc, #148]	; (8003a84 <ToSdCard+0x824>)
 80039f0:	4819      	ldr	r0, [pc, #100]	; (8003a58 <ToSdCard+0x7f8>)
 80039f2:	f007 fd79 	bl	800b4e8 <f_printf>
		sd_event = BRAK;
 80039f6:	2318      	movs	r3, #24
 80039f8:	71fb      	strb	r3, [r7, #7]
		CloseFile();
 80039fa:	f000 f877 	bl	8003aec <CloseFile>
		break;
 80039fe:	e021      	b.n	8003a44 <ToSdCard+0x7e4>

	case BRAK_DELAY:

			OpenFile();
 8003a00:	f000 f844 	bl	8003a8c <OpenFile>
			f_printf(&fil,"%04d-%02d-%02d, %02d:%02d:%02d                Break przycisku opoznienia\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <ToSdCard+0x7ec>)
 8003a06:	78db      	ldrb	r3, [r3, #3]
 8003a08:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <ToSdCard+0x7ec>)
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	461d      	mov	r5, r3
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <ToSdCard+0x7ec>)
 8003a14:	789b      	ldrb	r3, [r3, #2]
 8003a16:	4619      	mov	r1, r3
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <ToSdCard+0x7f0>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <ToSdCard+0x7f0>)
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	461c      	mov	r4, r3
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <ToSdCard+0x7f0>)
 8003a26:	789b      	ldrb	r3, [r3, #2]
 8003a28:	9303      	str	r3, [sp, #12]
 8003a2a:	9402      	str	r4, [sp, #8]
 8003a2c:	9001      	str	r0, [sp, #4]
 8003a2e:	9100      	str	r1, [sp, #0]
 8003a30:	462b      	mov	r3, r5
 8003a32:	4915      	ldr	r1, [pc, #84]	; (8003a88 <ToSdCard+0x828>)
 8003a34:	4808      	ldr	r0, [pc, #32]	; (8003a58 <ToSdCard+0x7f8>)
 8003a36:	f007 fd57 	bl	800b4e8 <f_printf>
			sd_event = BRAK;
 8003a3a:	2318      	movs	r3, #24
 8003a3c:	71fb      	strb	r3, [r7, #7]
			CloseFile();
 8003a3e:	f000 f855 	bl	8003aec <CloseFile>
			break;
 8003a42:	bf00      	nop
	}

}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	2000228c 	.word	0x2000228c
 8003a50:	20002278 	.word	0x20002278
 8003a54:	0800c1c4 	.word	0x0800c1c4
 8003a58:	20001244 	.word	0x20001244
 8003a5c:	0800c208 	.word	0x0800c208
 8003a60:	0800c250 	.word	0x0800c250
 8003a64:	0800c298 	.word	0x0800c298
 8003a68:	0800c2dc 	.word	0x0800c2dc
 8003a6c:	0800c320 	.word	0x0800c320
 8003a70:	0800c364 	.word	0x0800c364
 8003a74:	0800c3a8 	.word	0x0800c3a8
 8003a78:	0800c3ec 	.word	0x0800c3ec
 8003a7c:	0800c430 	.word	0x0800c430
 8003a80:	0800c474 	.word	0x0800c474
 8003a84:	0800c4b8 	.word	0x0800c4b8
 8003a88:	0800c51c 	.word	0x0800c51c

08003a8c <OpenFile>:

static void OpenFile()
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
	fres = f_mount(&fs,"", 0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	490e      	ldr	r1, [pc, #56]	; (8003acc <OpenFile+0x40>)
 8003a94:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <OpenFile+0x44>)
 8003a96:	f007 f83d 	bl	800ab14 <f_mount>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <OpenFile+0x48>)
 8003aa0:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "STO.txt", FA_OPEN_APPEND | FA_WRITE);
 8003aa2:	2232      	movs	r2, #50	; 0x32
 8003aa4:	490c      	ldr	r1, [pc, #48]	; (8003ad8 <OpenFile+0x4c>)
 8003aa6:	480d      	ldr	r0, [pc, #52]	; (8003adc <OpenFile+0x50>)
 8003aa8:	f007 f87a 	bl	800aba0 <f_open>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <OpenFile+0x48>)
 8003ab2:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <OpenFile+0x54>)
 8003ab8:	480a      	ldr	r0, [pc, #40]	; (8003ae4 <OpenFile+0x58>)
 8003aba:	f003 fe27 	bl	800770c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4909      	ldr	r1, [pc, #36]	; (8003ae8 <OpenFile+0x5c>)
 8003ac2:	4808      	ldr	r0, [pc, #32]	; (8003ae4 <OpenFile+0x58>)
 8003ac4:	f003 ff05 	bl	80078d2 <HAL_RTC_GetDate>
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0800bbd8 	.word	0x0800bbd8
 8003ad0:	2000020c 	.word	0x2000020c
 8003ad4:	20002274 	.word	0x20002274
 8003ad8:	0800bbdc 	.word	0x0800bbdc
 8003adc:	20001244 	.word	0x20001244
 8003ae0:	20002278 	.word	0x20002278
 8003ae4:	200001e8 	.word	0x200001e8
 8003ae8:	2000228c 	.word	0x2000228c

08003aec <CloseFile>:

static void CloseFile()
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
    fres = f_close(&fil);
 8003af0:	4808      	ldr	r0, [pc, #32]	; (8003b14 <CloseFile+0x28>)
 8003af2:	f007 fc33 	bl	800b35c <f_close>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <CloseFile+0x2c>)
 8003afc:	701a      	strb	r2, [r3, #0]
	fres = f_mount(NULL, "", 1);
 8003afe:	2201      	movs	r2, #1
 8003b00:	4906      	ldr	r1, [pc, #24]	; (8003b1c <CloseFile+0x30>)
 8003b02:	2000      	movs	r0, #0
 8003b04:	f007 f806 	bl	800ab14 <f_mount>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <CloseFile+0x2c>)
 8003b0e:	701a      	strb	r2, [r3, #0]
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20001244 	.word	0x20001244
 8003b18:	20002274 	.word	0x20002274
 8003b1c:	0800bbd8 	.word	0x0800bbd8

08003b20 <ServiceProcess>:
static bool service_mode = true;

void ServiceModeOn(bool on_off);

void ServiceProcess()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	static bool service_cable_on = false;

	ServiceModeOn(true);
 8003b24:	2001      	movs	r0, #1
 8003b26:	f000 f865 	bl	8003bf4 <ServiceModeOn>

	while(service_mode == 1)
 8003b2a:	e054      	b.n	8003bd6 <ServiceProcess+0xb6>
	{
		ServiceModeOn(false);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f000 f861 	bl	8003bf4 <ServiceModeOn>

		if(DetCableService() == true)
 8003b32:	f7fd fc9d 	bl	8001470 <DetCableService>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <ServiceProcess+0x54>
		{
			if(startSecondsCounter(SERVICE_ALARM) >= 1)
 8003b3c:	2009      	movs	r0, #9
 8003b3e:	f7fd fba7 	bl	8001290 <startSecondsCounter>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <ServiceProcess+0x38>
			{
				HAL_GPIO_TogglePin(ALARM_GPIO_Port, ALARM_Pin);
 8003b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4c:	4825      	ldr	r0, [pc, #148]	; (8003be4 <ServiceProcess+0xc4>)
 8003b4e:	f002 faa3 	bl	8006098 <HAL_GPIO_TogglePin>
			    stopSecondsCounter(SERVICE_ALARM);
 8003b52:	2009      	movs	r0, #9
 8003b54:	f7fd fbc4 	bl	80012e0 <stopSecondsCounter>
			}

			if(service_cable_on == false)
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <ServiceProcess+0xc8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d025      	beq.n	8003bb2 <ServiceProcess+0x92>
			{
				service_cable_on = true;
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <ServiceProcess+0xc8>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
				ToSdCard(KABEL_SERWIS);
 8003b6c:	2016      	movs	r0, #22
 8003b6e:	f7ff fb77 	bl	8003260 <ToSdCard>
 8003b72:	e01e      	b.n	8003bb2 <ServiceProcess+0x92>
			}
		}
		else if(HAL_GPIO_ReadPin(ALARM_GPIO_Port, ALARM_Pin) == true)
 8003b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b78:	481a      	ldr	r0, [pc, #104]	; (8003be4 <ServiceProcess+0xc4>)
 8003b7a:	f002 fa5d 	bl	8006038 <HAL_GPIO_ReadPin>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <ServiceProcess+0x72>
				HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8003b84:	2200      	movs	r2, #0
 8003b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8a:	4816      	ldr	r0, [pc, #88]	; (8003be4 <ServiceProcess+0xc4>)
 8003b8c:	f002 fa6c 	bl	8006068 <HAL_GPIO_WritePin>
 8003b90:	e00f      	b.n	8003bb2 <ServiceProcess+0x92>
		else if(service_cable_on == true)
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <ServiceProcess+0xc8>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <ServiceProcess+0x92>
		{
			if(startSecondsCounter(SERVICE_TIMER_1) >= 1)
 8003b9a:	2007      	movs	r0, #7
 8003b9c:	f7fd fb78 	bl	8001290 <startSecondsCounter>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <ServiceProcess+0x92>
				{
				  service_cable_on = false;
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <ServiceProcess+0xc8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
			      stopSecondsCounter(SERVICE_TIMER_1);
 8003bac:	2007      	movs	r0, #7
 8003bae:	f7fd fb97 	bl	80012e0 <stopSecondsCounter>
				}
		}

		if(startSecondsCounter(SERVICE_LED_1) >= SERVICE_LED_2)
 8003bb2:	2008      	movs	r0, #8
 8003bb4:	f7fd fb6c 	bl	8001290 <startSecondsCounter>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <ServiceProcess+0xb6>
		{
			HAL_GPIO_TogglePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin);
 8003bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc2:	4808      	ldr	r0, [pc, #32]	; (8003be4 <ServiceProcess+0xc4>)
 8003bc4:	f002 fa68 	bl	8006098 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	4808      	ldr	r0, [pc, #32]	; (8003bec <ServiceProcess+0xcc>)
 8003bcc:	f002 fa64 	bl	8006098 <HAL_GPIO_TogglePin>
			restartSecondsCounter(SERVICE_LED_1);
 8003bd0:	2008      	movs	r0, #8
 8003bd2:	f7fd fba9 	bl	8001328 <restartSecondsCounter>
	while(service_mode == 1)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <ServiceProcess+0xd0>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1a6      	bne.n	8003b2c <ServiceProcess+0xc>
		}

	}
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	48000400 	.word	0x48000400
 8003be8:	20002290 	.word	0x20002290
 8003bec:	48000800 	.word	0x48000800
 8003bf0:	2000001d 	.word	0x2000001d

08003bf4 <ServiceModeOn>:

void ServiceModeOn(bool on_off)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
	static bool service_sd = false;
	static uint8_t service_timer = 0;

	if(HAL_GPIO_ReadPin(SERWIS_IN_GPIO_Port, SERWIS_IN_Pin) == GPIO_PIN_SET)
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	482d      	ldr	r0, [pc, #180]	; (8003cb8 <ServiceModeOn+0xc4>)
 8003c02:	f002 fa19 	bl	8006038 <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10f      	bne.n	8003c2c <ServiceModeOn+0x38>
	{
		if(startSecondsCounter(SERVICE_TIMER_1) >= 1)
 8003c0c:	2007      	movs	r0, #7
 8003c0e:	f7fd fb3f 	bl	8001290 <startSecondsCounter>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d04b      	beq.n	8003cb0 <ServiceModeOn+0xbc>
			{
			service_timer++;
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <ServiceModeOn+0xc8>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <ServiceModeOn+0xc8>)
 8003c22:	701a      	strb	r2, [r3, #0]
			restartSecondsCounter(SERVICE_TIMER_1);
 8003c24:	2007      	movs	r0, #7
 8003c26:	f7fd fb7f 	bl	8001328 <restartSecondsCounter>
	else
	{
		restartSecondsCounter(SERVICE_TIMER_1);
		service_timer = 0;
	}
}
 8003c2a:	e041      	b.n	8003cb0 <ServiceModeOn+0xbc>
	else if (HAL_GPIO_ReadPin(SERWIS_IN_GPIO_Port, SERWIS_IN_Pin) == GPIO_PIN_RESET &&
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	4822      	ldr	r0, [pc, #136]	; (8003cb8 <ServiceModeOn+0xc4>)
 8003c30:	f002 fa02 	bl	8006038 <HAL_GPIO_ReadPin>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d133      	bne.n	8003ca2 <ServiceModeOn+0xae>
			service_timer >= SERVICE_TIMER_2 && service_timer <= SERVICE_TIMER_3)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <ServiceModeOn+0xc8>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
	else if (HAL_GPIO_ReadPin(SERWIS_IN_GPIO_Port, SERWIS_IN_Pin) == GPIO_PIN_RESET &&
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d92f      	bls.n	8003ca2 <ServiceModeOn+0xae>
			service_timer >= SERVICE_TIMER_2 && service_timer <= SERVICE_TIMER_3)
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <ServiceModeOn+0xc8>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b07      	cmp	r3, #7
 8003c48:	d82b      	bhi.n	8003ca2 <ServiceModeOn+0xae>
		service_mode = on_off;
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <ServiceModeOn+0xcc>)
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	481b      	ldr	r0, [pc, #108]	; (8003cc4 <ServiceModeOn+0xd0>)
 8003c56:	f002 fa07 	bl	8006068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_SERWIS_GPIO_Port, LED_SERWIS_Pin, GPIO_PIN_RESET);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c60:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <ServiceModeOn+0xc4>)
 8003c62:	f002 fa01 	bl	8006068 <HAL_GPIO_WritePin>
		stopSecondsCounter(SERVICE_TIMER_1);
 8003c66:	2007      	movs	r0, #7
 8003c68:	f7fd fb3a 	bl	80012e0 <stopSecondsCounter>
		stopSecondsCounter(SERVICE_LED_1);
 8003c6c:	2008      	movs	r0, #8
 8003c6e:	f7fd fb37 	bl	80012e0 <stopSecondsCounter>
		service_timer = 0;
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <ServiceModeOn+0xc8>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
		if(service_sd == false)
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <ServiceModeOn+0xd4>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f083 0301 	eor.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <ServiceModeOn+0xa0>
			ToSdCard(SERWIS_ON);
 8003c86:	2012      	movs	r0, #18
 8003c88:	f7ff faea 	bl	8003260 <ToSdCard>
			service_sd = true;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <ServiceModeOn+0xd4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
		if(service_sd == false)
 8003c92:	e00d      	b.n	8003cb0 <ServiceModeOn+0xbc>
			ToSdCard(SERWIS_OFF);
 8003c94:	2013      	movs	r0, #19
 8003c96:	f7ff fae3 	bl	8003260 <ToSdCard>
			service_sd = false;
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <ServiceModeOn+0xd4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
		if(service_sd == false)
 8003ca0:	e006      	b.n	8003cb0 <ServiceModeOn+0xbc>
		restartSecondsCounter(SERVICE_TIMER_1);
 8003ca2:	2007      	movs	r0, #7
 8003ca4:	f7fd fb40 	bl	8001328 <restartSecondsCounter>
		service_timer = 0;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <ServiceModeOn+0xc8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
}
 8003cae:	e7ff      	b.n	8003cb0 <ServiceModeOn+0xbc>
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	20002291 	.word	0x20002291
 8003cc0:	2000001d 	.word	0x2000001d
 8003cc4:	48000800 	.word	0x48000800
 8003cc8:	20002292 	.word	0x20002292

08003ccc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <MX_SPI1_Init+0x78>)
 8003cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003ce6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d02:	2210      	movs	r2, #16
 8003d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d26:	2208      	movs	r2, #8
 8003d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <MX_SPI1_Init+0x74>)
 8003d2c:	f003 ff1f 	bl	8007b6e <HAL_SPI_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d36:	f7ff f98c 	bl	8003052 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20002294 	.word	0x20002294
 8003d44:	40013000 	.word	0x40013000

08003d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_SPI_MspInit+0x7c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d128      	bne.n	8003dbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d74:	6613      	str	r3, [r2, #96]	; 0x60
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_SPI_MspInit+0x80>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d9a:	23e0      	movs	r3, #224	; 0xe0
 8003d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da6:	2303      	movs	r3, #3
 8003da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003daa:	2305      	movs	r3, #5
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dae:	f107 0314 	add.w	r3, r7, #20
 8003db2:	4619      	mov	r1, r3
 8003db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db8:	f001 ffc4 	bl	8005d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40013000 	.word	0x40013000
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_MspInit+0x50>)
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <HAL_MspInit+0x50>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <HAL_MspInit+0x50>)
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_MspInit+0x50>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_MspInit+0x50>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6593      	str	r3, [r2, #88]	; 0x58
 8003df6:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_MspInit+0x50>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003e02:	2200      	movs	r2, #0
 8003e04:	2100      	movs	r1, #0
 8003e06:	2004      	movs	r0, #4
 8003e08:	f001 fc0d 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003e0c:	2004      	movs	r0, #4
 8003e0e:	f001 fc26 	bl	800565e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000

08003e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e24:	e7fe      	b.n	8003e24 <NMI_Handler+0x4>

08003e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e2a:	e7fe      	b.n	8003e2a <HardFault_Handler+0x4>

08003e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <MemManage_Handler+0x4>

08003e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <BusFault_Handler+0x4>

08003e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <UsageFault_Handler+0x4>

08003e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <SysTick_Handler+0x3c>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <SysTick_Handler+0x18>
			Timer1--;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <SysTick_Handler+0x3c>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <SysTick_Handler+0x3c>)
 8003e7e:	801a      	strh	r2, [r3, #0]

		if(Timer2 > 0)
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <SysTick_Handler+0x40>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <SysTick_Handler+0x2c>
			Timer2--;
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <SysTick_Handler+0x40>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <SysTick_Handler+0x40>)
 8003e92:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e94:	f000 f8b8 	bl	8004008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  UpdateCounter();
 8003e98:	f7fd f96c 	bl	8001174 <UpdateCounter>
  HAL_SYSTICK_IRQHandler();
 8003e9c:	f001 fbf9 	bl	8005692 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200001c2 	.word	0x200001c2
 8003ea8:	200001c4 	.word	0x200001c4

08003eac <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003eb0:	f001 fdf4 	bl	8005a9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003eb4:	bf00      	nop
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHOICE_SW_Pin);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f002 f905 	bl	80060cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_SW_Pin);
 8003eca:	2004      	movs	r0, #4
 8003ecc:	f002 f8fe 	bl	80060cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <DMA1_Channel1_IRQHandler+0x10>)
 8003eda:	f001 fcff 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200000f0 	.word	0x200000f0

08003ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <SystemInit+0x20>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <SystemInit+0x20>)
 8003ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f10:	f7ff ffea 	bl	8003ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f14:	480c      	ldr	r0, [pc, #48]	; (8003f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f16:	490d      	ldr	r1, [pc, #52]	; (8003f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <LoopForever+0xe>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f1c:	e002      	b.n	8003f24 <LoopCopyDataInit>

08003f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f22:	3304      	adds	r3, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f28:	d3f9      	bcc.n	8003f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f2c:	4c0a      	ldr	r4, [pc, #40]	; (8003f58 <LoopForever+0x16>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f30:	e001      	b.n	8003f36 <LoopFillZerobss>

08003f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f34:	3204      	adds	r2, #4

08003f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f38:	d3fb      	bcc.n	8003f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f3a:	f007 fe15 	bl	800bb68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f3e:	f7fe ffdd 	bl	8002efc <main>

08003f42 <LoopForever>:

LoopForever:
    b LoopForever
 8003f42:	e7fe      	b.n	8003f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f44:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003f50:	0800ca38 	.word	0x0800ca38
  ldr r2, =_sbss
 8003f54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003f58:	20002538 	.word	0x20002538

08003f5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC1_IRQHandler>

08003f5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f68:	2003      	movs	r0, #3
 8003f6a:	f001 fb51 	bl	8005610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f6e:	200f      	movs	r0, #15
 8003f70:	f000 f80e 	bl	8003f90 <HAL_InitTick>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	71fb      	strb	r3, [r7, #7]
 8003f7e:	e001      	b.n	8003f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f80:	f7ff ff24 	bl	8003dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f84:	79fb      	ldrb	r3, [r7, #7]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003f9c:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_InitTick+0x6c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <HAL_InitTick+0x70>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_InitTick+0x6c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fb5d 	bl	800567a <HAL_SYSTICK_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d809      	bhi.n	8003fe0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	f001 fb27 	bl	8005626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_InitTick+0x74>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e004      	b.n	8003ff0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	e001      	b.n	8003ff0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000028 	.word	0x20000028
 8004000:	20000020 	.word	0x20000020
 8004004:	20000024 	.word	0x20000024

08004008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x20>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_IncTick+0x24>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4413      	add	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_IncTick+0x24>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000028 	.word	0x20000028
 800402c:	200022f8 	.word	0x200022f8

08004030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_GetTick+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200022f8 	.word	0x200022f8

08004048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff ffee 	bl	8004030 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d005      	beq.n	800406e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_Delay+0x44>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800406e:	bf00      	nop
 8004070:	f7ff ffde 	bl	8004030 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d8f7      	bhi.n	8004070 <HAL_Delay+0x28>
  {
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000028 	.word	0x20000028

08004090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3360      	adds	r3, #96	; 0x60
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <LL_ADC_SetOffset+0x44>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	03fff000 	.word	0x03fff000

08004140 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	461a      	mov	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3360      	adds	r3, #96	; 0x60
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	431a      	orrs	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	615a      	str	r2, [r3, #20]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3330      	adds	r3, #48	; 0x30
 80041fe:	461a      	mov	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	4413      	add	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	211f      	movs	r1, #31
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	401a      	ands	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	f003 011f 	and.w	r1, r3, #31
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	431a      	orrs	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3314      	adds	r3, #20
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0e5b      	lsrs	r3, r3, #25
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	0d1b      	lsrs	r3, r3, #20
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2107      	movs	r1, #7
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	401a      	ands	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	0d1b      	lsrs	r3, r3, #20
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0318 	and.w	r3, r3, #24
 80042be:	4908      	ldr	r1, [pc, #32]	; (80042e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042c0:	40d9      	lsrs	r1, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	400b      	ands	r3, r1
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	0007ffff 	.word	0x0007ffff

080042e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6093      	str	r3, [r2, #8]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431c:	d101      	bne.n	8004322 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004344:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436c:	d101      	bne.n	8004372 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043bc:	f043 0202 	orr.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <LL_ADC_IsEnabled+0x18>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <LL_ADC_IsEnabled+0x1a>
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d101      	bne.n	800440e <LL_ADC_IsDisableOngoing+0x18>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <LL_ADC_IsDisableOngoing+0x1a>
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800442c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004430:	f043 0204 	orr.w	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d101      	bne.n	800445c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d101      	bne.n	8004482 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800449c:	2300      	movs	r3, #0
 800449e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e12f      	b.n	800470a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fb ff43 	bl	8000344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff19 	bl	8004308 <LL_ADC_IsDeepPowerDownEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff feff 	bl	80042e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff34 	bl	8004358 <LL_ADC_IsInternalRegulatorEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ff18 	bl	8004330 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_ADC_Init+0x284>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	4a84      	ldr	r2, [pc, #528]	; (8004718 <HAL_ADC_Init+0x288>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004514:	e002      	b.n	800451c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3b01      	subs	r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f9      	bne.n	8004516 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff16 	bl	8004358 <LL_ADC_IsInternalRegulatorEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ff76 	bl	8004444 <LL_ADC_REG_IsConversionOngoing>
 8004558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 80c8 	bne.w	80046f8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80c4 	bne.w	80046f8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004578:	f043 0202 	orr.w	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff23 	bl	80043d0 <LL_ADC_IsEnabled>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004590:	4862      	ldr	r0, [pc, #392]	; (800471c <HAL_ADC_Init+0x28c>)
 8004592:	f7ff ff1d 	bl	80043d0 <LL_ADC_IsEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4619      	mov	r1, r3
 80045a2:	485f      	ldr	r0, [pc, #380]	; (8004720 <HAL_ADC_Init+0x290>)
 80045a4:	f7ff fd74 	bl	8004090 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7e5b      	ldrb	r3, [r3, #25]
 80045ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80045b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80045be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	3b01      	subs	r3, #1
 80045dc:	045b      	lsls	r3, r3, #17
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_ADC_Init+0x294>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	430b      	orrs	r3, r1
 8004612:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff13 	bl	8004444 <LL_ADC_REG_IsConversionOngoing>
 800461e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff20 	bl	800446a <LL_ADC_INJ_IsConversionOngoing>
 800462a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d140      	bne.n	80046b4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13d      	bne.n	80046b4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7e1b      	ldrb	r3, [r3, #24]
 8004640:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004642:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800464a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465a:	f023 0306 	bic.w	r3, r3, #6
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	430b      	orrs	r3, r1
 8004666:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466e:	2b01      	cmp	r3, #1
 8004670:	d118      	bne.n	80046a4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004694:	430a      	orrs	r2, r1
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	e007      	b.n	80046b4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10c      	bne.n	80046d6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f023 010f 	bic.w	r1, r3, #15
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
 80046d4:	e007      	b.n	80046e6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020f 	bic.w	r2, r2, #15
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58
 80046f6:	e007      	b.n	8004708 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000020 	.word	0x20000020
 8004718:	053e2d63 	.word	0x053e2d63
 800471c:	50040000 	.word	0x50040000
 8004720:	50040300 	.word	0x50040300
 8004724:	fff0c007 	.word	0xfff0c007

08004728 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fe83 	bl	8004444 <LL_ADC_REG_IsConversionOngoing>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d167      	bne.n	8004814 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_ADC_Start_DMA+0x2a>
 800474e:	2302      	movs	r3, #2
 8004750:	e063      	b.n	800481a <HAL_ADC_Start_DMA+0xf2>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fc82 	bl	8005064 <ADC_Enable>
 8004760:	4603      	mov	r3, r0
 8004762:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d14f      	bne.n	800480a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	f023 0206 	bic.w	r2, r3, #6
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c
 8004796:	e002      	b.n	800479e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	4a20      	ldr	r2, [pc, #128]	; (8004824 <HAL_ADC_Start_DMA+0xfc>)
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_ADC_Start_DMA+0x100>)
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_ADC_Start_DMA+0x104>)
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	221c      	movs	r2, #28
 80047bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0210 	orr.w	r2, r2, #16
 80047d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3340      	adds	r3, #64	; 0x40
 80047f0:	4619      	mov	r1, r3
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f001 f811 	bl	800581c <HAL_DMA_Start_IT>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fe0a 	bl	800441c <LL_ADC_REG_StartConversion>
 8004808:	e006      	b.n	8004818 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004812:	e001      	b.n	8004818 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004814:	2302      	movs	r3, #2
 8004816:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	0800522f 	.word	0x0800522f
 8004828:	08005307 	.word	0x08005307
 800482c:	08005323 	.word	0x08005323

08004830 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0b6      	sub	sp, #216	; 0xd8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x22>
 800488a:	2302      	movs	r3, #2
 800488c:	e3d5      	b.n	800503a <HAL_ADC_ConfigChannel+0x7ce>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fdd2 	bl	8004444 <LL_ADC_REG_IsConversionOngoing>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 83ba 	bne.w	800501c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d824      	bhi.n	80048fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	3b02      	subs	r3, #2
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d81b      	bhi.n	80048f2 <HAL_ADC_ConfigChannel+0x86>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <HAL_ADC_ConfigChannel+0x54>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048d9 	.word	0x080048d9
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048e9 	.word	0x080048e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	220c      	movs	r2, #12
 80048d4:	605a      	str	r2, [r3, #4]
          break;
 80048d6:	e011      	b.n	80048fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2212      	movs	r2, #18
 80048dc:	605a      	str	r2, [r3, #4]
          break;
 80048de:	e00d      	b.n	80048fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2218      	movs	r2, #24
 80048e4:	605a      	str	r2, [r3, #4]
          break;
 80048e6:	e009      	b.n	80048fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ee:	605a      	str	r2, [r3, #4]
          break;
 80048f0:	e004      	b.n	80048fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2206      	movs	r2, #6
 80048f6:	605a      	str	r2, [r3, #4]
          break;
 80048f8:	e000      	b.n	80048fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80048fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	f7ff fc70 	bl	80041ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fd96 	bl	8004444 <LL_ADC_REG_IsConversionOngoing>
 8004918:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fda2 	bl	800446a <LL_ADC_INJ_IsConversionOngoing>
 8004926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800492a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 81c1 	bne.w	8004cb6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 81bc 	bne.w	8004cb6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004946:	d10f      	bne.n	8004968 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	4619      	mov	r1, r3
 8004954:	f7ff fc77 	bl	8004246 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fc1e 	bl	80041a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004966:	e00e      	b.n	8004986 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	461a      	mov	r2, r3
 8004976:	f7ff fc66 	bl	8004246 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fc0e 	bl	80041a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d00a      	beq.n	80049be <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6919      	ldr	r1, [r3, #16]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b8:	f7ff fb9e 	bl	80040f8 <LL_ADC_SetOffset>
 80049bc:	e17b      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fbbb 	bl	8004140 <LL_ADC_GetOffsetChannel>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x17e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fbb0 	bl	8004140 <LL_ADC_GetOffsetChannel>
 80049e0:	4603      	mov	r3, r0
 80049e2:	0e9b      	lsrs	r3, r3, #26
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	e01e      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x1bc>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fba5 	bl	8004140 <LL_ADC_GetOffsetChannel>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a00:	fa93 f3a3 	rbit	r3, r3
 8004a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e004      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a20:	fab3 f383 	clz	r3, r3
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x1d4>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0e9b      	lsrs	r3, r3, #26
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	e018      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x206>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004a5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004a64:	2320      	movs	r3, #32
 8004a66:	e004      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d106      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fb74 	bl	800416c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fb58 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x244>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fb4d 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	f003 021f 	and.w	r2, r3, #31
 8004aae:	e01e      	b.n	8004aee <HAL_ADC_ConfigChannel+0x282>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fb42 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	e004      	b.n	8004aec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x29a>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	0e9b      	lsrs	r3, r3, #26
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	e018      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x2cc>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	e004      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d106      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fb11 	bl	800416c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff faf5 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x30a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff faea 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	e01e      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x348>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fadf 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	e004      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bac:	fab3 f383 	clz	r3, r3
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x360>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0e9b      	lsrs	r3, r3, #26
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	e016      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x38e>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e004      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2102      	movs	r1, #2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fab0 	bl	800416c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2103      	movs	r1, #3
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fa94 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x3cc>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2103      	movs	r1, #3
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fa89 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	f003 021f 	and.w	r2, r3, #31
 8004c36:	e017      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x3fc>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2103      	movs	r1, #3
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fa7e 	bl	8004140 <LL_ADC_GetOffsetChannel>
 8004c44:	4603      	mov	r3, r0
 8004c46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c52:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	e003      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x414>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0e9b      	lsrs	r3, r3, #26
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	e011      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x438>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004c98:	2320      	movs	r3, #32
 8004c9a:	e003      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d106      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2103      	movs	r1, #3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fa5b 	bl	800416c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fb88 	bl	80043d0 <LL_ADC_IsEnabled>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8140 	bne.w	8004f48 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f7ff fae1 	bl	800429c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4a8f      	ldr	r2, [pc, #572]	; (8004f1c <HAL_ADC_ConfigChannel+0x6b0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	f040 8131 	bne.w	8004f48 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x4a2>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2b09      	cmp	r3, #9
 8004d04:	bf94      	ite	ls
 8004d06:	2301      	movls	r3, #1
 8004d08:	2300      	movhi	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e019      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x4d6>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d1e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	e003      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	bf94      	ite	ls
 8004d3c:	2301      	movls	r3, #1
 8004d3e:	2300      	movhi	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d079      	beq.n	8004e3a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x4f6>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	0e9b      	lsrs	r3, r3, #26
 8004d58:	3301      	adds	r3, #1
 8004d5a:	069b      	lsls	r3, r3, #26
 8004d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d60:	e015      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x522>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e003      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	069b      	lsls	r3, r3, #26
 8004d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x542>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0e9b      	lsrs	r3, r3, #26
 8004da0:	3301      	adds	r3, #1
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	e017      	b.n	8004dde <HAL_ADC_ConfigChannel+0x572>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e003      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	fab3 f383 	clz	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	ea42 0103 	orr.w	r1, r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x598>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	0e9b      	lsrs	r3, r3, #26
 8004df4:	3301      	adds	r3, #1
 8004df6:	f003 021f 	and.w	r2, r3, #31
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	051b      	lsls	r3, r3, #20
 8004e02:	e018      	b.n	8004e36 <HAL_ADC_ConfigChannel+0x5ca>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e003      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f003 021f 	and.w	r2, r3, #31
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e36:	430b      	orrs	r3, r1
 8004e38:	e081      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x5ea>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	0e9b      	lsrs	r3, r3, #26
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	069b      	lsls	r3, r3, #26
 8004e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e54:	e015      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x616>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004e6e:	2320      	movs	r3, #32
 8004e70:	e003      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	069b      	lsls	r3, r3, #26
 8004e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x636>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0e9b      	lsrs	r3, r3, #26
 8004e94:	3301      	adds	r3, #1
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	e017      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x666>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	61fb      	str	r3, [r7, #28]
  return result;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e003      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2101      	movs	r1, #1
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	ea42 0103 	orr.w	r1, r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x692>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	0e9b      	lsrs	r3, r3, #26
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f003 021f 	and.w	r2, r3, #31
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3b1e      	subs	r3, #30
 8004ef6:	051b      	lsls	r3, r3, #20
 8004ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004efc:	e01e      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x6d0>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	613b      	str	r3, [r7, #16]
  return result;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004f16:	2320      	movs	r3, #32
 8004f18:	e006      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x6bc>
 8004f1a:	bf00      	nop
 8004f1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	3b1e      	subs	r3, #30
 8004f36:	051b      	lsls	r3, r3, #20
 8004f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	4619      	mov	r1, r3
 8004f44:	f7ff f97f 	bl	8004246 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d06c      	beq.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f54:	483c      	ldr	r0, [pc, #240]	; (8005048 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f56:	f7ff f8c1 	bl	80040dc <LL_ADC_GetCommonPathInternalCh>
 8004f5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3a      	ldr	r2, [pc, #232]	; (800504c <HAL_ADC_ConfigChannel+0x7e0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d127      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d121      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a35      	ldr	r2, [pc, #212]	; (8005050 <HAL_ADC_ConfigChannel+0x7e4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d157      	bne.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f86:	4619      	mov	r1, r3
 8004f88:	482f      	ldr	r0, [pc, #188]	; (8005048 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f8a:	f7ff f894 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_ADC_ConfigChannel+0x7e8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	4a30      	ldr	r2, [pc, #192]	; (8005058 <HAL_ADC_ConfigChannel+0x7ec>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fa8:	e002      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f9      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fb6:	e03a      	b.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a27      	ldr	r2, [pc, #156]	; (800505c <HAL_ADC_ConfigChannel+0x7f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d113      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x77e>
 8004fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_ADC_ConfigChannel+0x7e4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d12a      	bne.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4819      	ldr	r0, [pc, #100]	; (8005048 <HAL_ADC_ConfigChannel+0x7dc>)
 8004fe4:	f7ff f867 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe8:	e021      	b.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_ADC_ConfigChannel+0x7f4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d11c      	bne.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a12      	ldr	r2, [pc, #72]	; (8005050 <HAL_ADC_ConfigChannel+0x7e4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d111      	bne.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800500a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800500e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005012:	4619      	mov	r1, r3
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <HAL_ADC_ConfigChannel+0x7dc>)
 8005016:	f7ff f84e 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
 800501a:	e008      	b.n	800502e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005036:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800503a:	4618      	mov	r0, r3
 800503c:	37d8      	adds	r7, #216	; 0xd8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	80080000 	.word	0x80080000
 8005048:	50040300 	.word	0x50040300
 800504c:	c7520000 	.word	0xc7520000
 8005050:	50040000 	.word	0x50040000
 8005054:	20000020 	.word	0x20000020
 8005058:	053e2d63 	.word	0x053e2d63
 800505c:	cb840000 	.word	0xcb840000
 8005060:	80000001 	.word	0x80000001

08005064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff f9ab 	bl	80043d0 <LL_ADC_IsEnabled>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d169      	bne.n	8005154 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <ADC_Enable+0xfc>)
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f043 0210 	orr.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e055      	b.n	8005156 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f966 	bl	8004380 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80050b4:	482b      	ldr	r0, [pc, #172]	; (8005164 <ADC_Enable+0x100>)
 80050b6:	f7ff f811 	bl	80040dc <LL_ADC_GetCommonPathInternalCh>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <ADC_Enable+0x104>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	4a28      	ldr	r2, [pc, #160]	; (800516c <ADC_Enable+0x108>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	099b      	lsrs	r3, r3, #6
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80050de:	e002      	b.n	80050e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f9      	bne.n	80050e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050ec:	f7fe ffa0 	bl	8004030 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050f2:	e028      	b.n	8005146 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff f969 	bl	80043d0 <LL_ADC_IsEnabled>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f939 	bl	8004380 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800510e:	f7fe ff8f 	bl	8004030 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d914      	bls.n	8005146 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b01      	cmp	r3, #1
 8005128:	d00d      	beq.n	8005146 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f043 0210 	orr.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1cf      	bne.n	80050f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	8000003f 	.word	0x8000003f
 8005164:	50040300 	.word	0x50040300
 8005168:	20000020 	.word	0x20000020
 800516c:	053e2d63 	.word	0x053e2d63

08005170 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff f93a 	bl	80043f6 <LL_ADC_IsDisableOngoing>
 8005182:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f921 	bl	80043d0 <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d047      	beq.n	8005224 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d144      	bne.n	8005224 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030d 	and.w	r3, r3, #13
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10c      	bne.n	80051c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff f8fb 	bl	80043a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2203      	movs	r2, #3
 80051b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051ba:	f7fe ff39 	bl	8004030 <HAL_GetTick>
 80051be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051c0:	e029      	b.n	8005216 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	f043 0210 	orr.w	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e023      	b.n	8005226 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051de:	f7fe ff27 	bl	8004030 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d914      	bls.n	8005216 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f043 0210 	orr.w	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e007      	b.n	8005226 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1dc      	bne.n	80051de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d14b      	bne.n	80052e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d021      	beq.n	80052a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe ffae 	bl	80041c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d032      	beq.n	80052d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d12b      	bne.n	80052d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11f      	bne.n	80052d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f043 0201 	orr.w	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	659a      	str	r2, [r3, #88]	; 0x58
 80052a4:	e018      	b.n	80052d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d111      	bne.n	80052d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff faa9 	bl	8004830 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052de:	e00e      	b.n	80052fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fab3 	bl	8004858 <HAL_ADC_ErrorCallback>
}
 80052f2:	e004      	b.n	80052fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fa95 	bl	8004844 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	f043 0204 	orr.w	r2, r3, #4
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fa85 	bl	8004858 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <LL_ADC_StartCalibration>:
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005372:	4313      	orrs	r3, r2
 8005374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_ADC_IsCalibrationOnGoing>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539c:	d101      	bne.n	80053a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_ADCEx_Calibration_Start+0x1c>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e04d      	b.n	8005468 <HAL_ADCEx_Calibration_Start+0xb8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fecb 	bl	8005170 <ADC_Disable>
 80053da:	4603      	mov	r3, r0
 80053dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d136      	bne.n	8005452 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053ec:	f023 0302 	bic.w	r3, r3, #2
 80053f0:	f043 0202 	orr.w	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ffa9 	bl	8005356 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005404:	e014      	b.n	8005430 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3301      	adds	r3, #1
 800540a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005412:	d30d      	bcc.n	8005430 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f023 0312 	bic.w	r3, r3, #18
 800541c:	f043 0210 	orr.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e01b      	b.n	8005468 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff ffa7 	bl	8005388 <LL_ADC_IsCalibrationOnGoing>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e2      	bne.n	8005406 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	f023 0303 	bic.w	r3, r3, #3
 8005448:	f043 0201 	orr.w	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	659a      	str	r2, [r3, #88]	; 0x58
 8005450:	e005      	b.n	800545e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f043 0210 	orr.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800548c:	4013      	ands	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800549c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054a2:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <__NVIC_SetPriorityGrouping+0x44>)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	60d3      	str	r3, [r2, #12]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <__NVIC_GetPriorityGrouping+0x18>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 0307 	and.w	r3, r3, #7
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	db0b      	blt.n	80054fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	f003 021f 	and.w	r2, r3, #31
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <__NVIC_EnableIRQ+0x38>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2001      	movs	r0, #1
 80054f6:	fa00 f202 	lsl.w	r2, r0, r2
 80054fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000e100 	.word	0xe000e100

08005510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db0a      	blt.n	800553a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	490c      	ldr	r1, [pc, #48]	; (800555c <__NVIC_SetPriority+0x4c>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	0112      	lsls	r2, r2, #4
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	440b      	add	r3, r1
 8005534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005538:	e00a      	b.n	8005550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4908      	ldr	r1, [pc, #32]	; (8005560 <__NVIC_SetPriority+0x50>)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	3b04      	subs	r3, #4
 8005548:	0112      	lsls	r2, r2, #4
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	440b      	add	r3, r1
 800554e:	761a      	strb	r2, [r3, #24]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000e100 	.word	0xe000e100
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f1c3 0307 	rsb	r3, r3, #7
 800557e:	2b04      	cmp	r3, #4
 8005580:	bf28      	it	cs
 8005582:	2304      	movcs	r3, #4
 8005584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3304      	adds	r3, #4
 800558a:	2b06      	cmp	r3, #6
 800558c:	d902      	bls.n	8005594 <NVIC_EncodePriority+0x30>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3b03      	subs	r3, #3
 8005592:	e000      	b.n	8005596 <NVIC_EncodePriority+0x32>
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	401a      	ands	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ac:	f04f 31ff 	mov.w	r1, #4294967295
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	43d9      	mvns	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055bc:	4313      	orrs	r3, r2
         );
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3724      	adds	r7, #36	; 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055dc:	d301      	bcc.n	80055e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055de:	2301      	movs	r3, #1
 80055e0:	e00f      	b.n	8005602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <SysTick_Config+0x40>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ea:	210f      	movs	r1, #15
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	f7ff ff8e 	bl	8005510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <SysTick_Config+0x40>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <SysTick_Config+0x40>)
 80055fc:	2207      	movs	r2, #7
 80055fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	e000e010 	.word	0xe000e010

08005610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff29 	bl	8005470 <__NVIC_SetPriorityGrouping>
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	4603      	mov	r3, r0
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005638:	f7ff ff3e 	bl	80054b8 <__NVIC_GetPriorityGrouping>
 800563c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7ff ff8e 	bl	8005564 <NVIC_EncodePriority>
 8005648:	4602      	mov	r2, r0
 800564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ff5d 	bl	8005510 <__NVIC_SetPriority>
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	4603      	mov	r3, r0
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff31 	bl	80054d4 <__NVIC_EnableIRQ>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffa2 	bl	80055cc <SysTick_Config>
 8005688:	4603      	mov	r3, r0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005696:	f000 f802 	bl	800569e <HAL_SYSTICK_Callback>
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e098      	b.n	80057f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b4d      	ldr	r3, [pc, #308]	; (80057fc <HAL_DMA_Init+0x150>)
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d80f      	bhi.n	80056ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <HAL_DMA_Init+0x154>)
 80056d2:	4413      	add	r3, r2
 80056d4:	4a4b      	ldr	r2, [pc, #300]	; (8005804 <HAL_DMA_Init+0x158>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	009a      	lsls	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a48      	ldr	r2, [pc, #288]	; (8005808 <HAL_DMA_Init+0x15c>)
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
 80056e8:	e00e      	b.n	8005708 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_DMA_Init+0x160>)
 80056f2:	4413      	add	r3, r2
 80056f4:	4a43      	ldr	r2, [pc, #268]	; (8005804 <HAL_DMA_Init+0x158>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a42      	ldr	r2, [pc, #264]	; (8005810 <HAL_DMA_Init+0x164>)
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800572c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005762:	d039      	beq.n	80057d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	4a27      	ldr	r2, [pc, #156]	; (8005808 <HAL_DMA_Init+0x15c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d11a      	bne.n	80057a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <HAL_DMA_Init+0x168>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f003 031c 	and.w	r3, r3, #28
 800577a:	210f      	movs	r1, #15
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	4924      	ldr	r1, [pc, #144]	; (8005814 <HAL_DMA_Init+0x168>)
 8005784:	4013      	ands	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <HAL_DMA_Init+0x168>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	f003 031c 	and.w	r3, r3, #28
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	491d      	ldr	r1, [pc, #116]	; (8005814 <HAL_DMA_Init+0x168>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
 80057a2:	e019      	b.n	80057d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <HAL_DMA_Init+0x16c>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	f003 031c 	and.w	r3, r3, #28
 80057b0:	210f      	movs	r1, #15
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	4917      	ldr	r1, [pc, #92]	; (8005818 <HAL_DMA_Init+0x16c>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80057be:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_DMA_Init+0x16c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f003 031c 	and.w	r3, r3, #28
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	4911      	ldr	r1, [pc, #68]	; (8005818 <HAL_DMA_Init+0x16c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40020407 	.word	0x40020407
 8005800:	bffdfff8 	.word	0xbffdfff8
 8005804:	cccccccd 	.word	0xcccccccd
 8005808:	40020000 	.word	0x40020000
 800580c:	bffdfbf8 	.word	0xbffdfbf8
 8005810:	40020400 	.word	0x40020400
 8005814:	400200a8 	.word	0x400200a8
 8005818:	400204a8 	.word	0x400204a8

0800581c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_DMA_Start_IT+0x20>
 8005838:	2302      	movs	r3, #2
 800583a:	e04b      	b.n	80058d4 <HAL_DMA_Start_IT+0xb8>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d13a      	bne.n	80058c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f8e0 	bl	8005a3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 020e 	orr.w	r2, r2, #14
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e00f      	b.n	80058b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 020a 	orr.w	r2, r2, #10
 80058b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e005      	b.n	80058d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f003 031c 	and.w	r3, r3, #28
 80058fc:	2204      	movs	r2, #4
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d026      	beq.n	8005956 <HAL_DMA_IRQHandler+0x7a>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d021      	beq.n	8005956 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d107      	bne.n	8005930 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	f003 021c 	and.w	r2, r3, #28
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2104      	movs	r1, #4
 800593e:	fa01 f202 	lsl.w	r2, r1, r2
 8005942:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d071      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005954:	e06c      	b.n	8005a30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	f003 031c 	and.w	r3, r3, #28
 800595e:	2202      	movs	r2, #2
 8005960:	409a      	lsls	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4013      	ands	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0xec>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d029      	beq.n	80059c8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 020a 	bic.w	r2, r2, #10
 8005990:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 021c 	and.w	r2, r3, #28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2102      	movs	r1, #2
 80059a8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d038      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80059c6:	e033      	b.n	8005a30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	f003 031c 	and.w	r3, r3, #28
 80059d0:	2208      	movs	r2, #8
 80059d2:	409a      	lsls	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02a      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x156>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d025      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 020e 	bic.w	r2, r2, #14
 80059f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f003 021c 	and.w	r2, r3, #28
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f202 	lsl.w	r2, r1, r2
 8005a08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
}
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	f003 021c 	and.w	r2, r3, #28
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f202 	lsl.w	r2, r1, r2
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d108      	bne.n	8005a7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a7c:	e007      	b.n	8005a8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8005aa2:	4b64      	ldr	r3, [pc, #400]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4a63      	ldr	r2, [pc, #396]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	6153      	str	r3, [r2, #20]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8005ab2:	4b61      	ldr	r3, [pc, #388]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005ab4:	7a1b      	ldrb	r3, [r3, #8]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d105      	bne.n	8005ac8 <HAL_FLASH_IRQHandler+0x2c>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005abc:	4b5d      	ldr	r3, [pc, #372]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	4a5c      	ldr	r2, [pc, #368]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac6:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005ac8:	4b5a      	ldr	r3, [pc, #360]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	4b5b      	ldr	r3, [pc, #364]	; (8005c3c <HAL_FLASH_IRQHandler+0x1a0>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d045      	beq.n	8005b64 <HAL_FLASH_IRQHandler+0xc8>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005ad8:	4b57      	ldr	r3, [pc, #348]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	4a55      	ldr	r2, [pc, #340]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005ae2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_FLASH_IRQHandler+0x62>
 8005aee:	4b51      	ldr	r3, [pc, #324]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005af8:	494e      	ldr	r1, [pc, #312]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	618b      	str	r3, [r1, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <HAL_FLASH_IRQHandler+0x76>
 8005b08:	4a4a      	ldr	r2, [pc, #296]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005b10:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8005b12:	f000 f8cd 	bl	8005cb0 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8005b16:	4b48      	ldr	r3, [pc, #288]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b18:	7a1b      	ldrb	r3, [r3, #8]
 8005b1a:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_FLASH_IRQHandler+0x92>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8005b22:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f894 	bl	8005c54 <HAL_FLASH_OperationErrorCallback>
 8005b2c:	e017      	b.n	8005b5e <HAL_FLASH_IRQHandler+0xc2>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8005b2e:	7afb      	ldrb	r3, [r7, #11]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d105      	bne.n	8005b40 <HAL_FLASH_IRQHandler+0xa4>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8005b34:	4b40      	ldr	r3, [pc, #256]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f88b 	bl	8005c54 <HAL_FLASH_OperationErrorCallback>
 8005b3e:	e00e      	b.n	8005b5e <HAL_FLASH_IRQHandler+0xc2>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d002      	beq.n	8005b4c <HAL_FLASH_IRQHandler+0xb0>
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d105      	bne.n	8005b58 <HAL_FLASH_IRQHandler+0xbc>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f87f 	bl	8005c54 <HAL_FLASH_OperationErrorCallback>
 8005b56:	e002      	b.n	8005b5e <HAL_FLASH_IRQHandler+0xc2>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f000 f87b 	bl	8005c54 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8005b64:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d04f      	beq.n	8005c10 <HAL_FLASH_IRQHandler+0x174>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b70:	4b30      	ldr	r3, [pc, #192]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b78:	7a1b      	ldrb	r3, [r3, #8]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d12b      	bne.n	8005bd8 <HAL_FLASH_IRQHandler+0x13c>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8005b80:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b88:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <HAL_FLASH_IRQHandler+0x11e>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f852 	bl	8005c40 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005ba4:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8005ba6:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f858 	bl	8005c68 <FLASH_PageErase>
 8005bb8:	e02a      	b.n	8005c10 <HAL_FLASH_IRQHandler+0x174>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005bc8:	f000 f872 	bl	8005cb0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f835 	bl	8005c40 <HAL_FLASH_EndOfOperationCallback>
 8005bd6:	e01b      	b.n	8005c10 <HAL_FLASH_IRQHandler+0x174>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8005bd8:	f000 f86a 	bl	8005cb0 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8005bdc:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bde:	7a1b      	ldrb	r3, [r3, #8]
 8005be0:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d105      	bne.n	8005bf4 <HAL_FLASH_IRQHandler+0x158>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005be8:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f827 	bl	8005c40 <HAL_FLASH_EndOfOperationCallback>
 8005bf2:	e00a      	b.n	8005c0a <HAL_FLASH_IRQHandler+0x16e>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8005bf4:	7afb      	ldrb	r3, [r7, #11]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d002      	beq.n	8005c00 <HAL_FLASH_IRQHandler+0x164>
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_FLASH_IRQHandler+0x16e>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f81b 	bl	8005c40 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005c12:	7a1b      	ldrb	r3, [r3, #8]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <HAL_FLASH_IRQHandler+0x190>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <HAL_FLASH_IRQHandler+0x198>)
 8005c20:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005c24:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005c26:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <HAL_FLASH_IRQHandler+0x19c>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40022000 	.word	0x40022000
 8005c38:	2000002c 	.word	0x2000002c
 8005c3c:	0002c3fa 	.word	0x0002c3fa

08005c40 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c72:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <FLASH_PageErase+0x44>)
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c82:	490a      	ldr	r1, [pc, #40]	; (8005cac <FLASH_PageErase+0x44>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <FLASH_PageErase+0x44>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	4a07      	ldr	r2, [pc, #28]	; (8005cac <FLASH_PageErase+0x44>)
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <FLASH_PageErase+0x44>)
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <FLASH_PageErase+0x44>)
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9e:	6153      	str	r3, [r2, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40022000 	.word	0x40022000

08005cb0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005cb6:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <FLASH_FlushCaches+0x8c>)
 8005cb8:	7f1b      	ldrb	r3, [r3, #28]
 8005cba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d002      	beq.n	8005cc8 <FLASH_FlushCaches+0x18>
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d117      	bne.n	8005cf8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cec:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cf6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d002      	beq.n	8005d04 <FLASH_FlushCaches+0x54>
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d111      	bne.n	8005d28 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0d      	ldr	r2, [pc, #52]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d1a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <FLASH_FlushCaches+0x90>)
 8005d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d26:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <FLASH_FlushCaches+0x8c>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	771a      	strb	r2, [r3, #28]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000002c 	.word	0x2000002c
 8005d40:	40022000 	.word	0x40022000

08005d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d52:	e154      	b.n	8005ffe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2101      	movs	r1, #1
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8146 	beq.w	8005ff8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d005      	beq.n	8005d84 <HAL_GPIO_Init+0x40>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d130      	bne.n	8005de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	2203      	movs	r2, #3
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dba:	2201      	movs	r2, #1
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0201 	and.w	r2, r3, #1
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d017      	beq.n	8005e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d123      	bne.n	8005e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	08da      	lsrs	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3208      	adds	r2, #8
 8005e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	220f      	movs	r2, #15
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	08da      	lsrs	r2, r3, #3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3208      	adds	r2, #8
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	2203      	movs	r2, #3
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0203 	and.w	r2, r3, #3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80a0 	beq.w	8005ff8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <HAL_GPIO_Init+0x2d8>)
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	4a57      	ldr	r2, [pc, #348]	; (800601c <HAL_GPIO_Init+0x2d8>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8005ec4:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_GPIO_Init+0x2d8>)
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ed0:	4a53      	ldr	r2, [pc, #332]	; (8006020 <HAL_GPIO_Init+0x2dc>)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	089b      	lsrs	r3, r3, #2
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	220f      	movs	r2, #15
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005efa:	d019      	beq.n	8005f30 <HAL_GPIO_Init+0x1ec>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a49      	ldr	r2, [pc, #292]	; (8006024 <HAL_GPIO_Init+0x2e0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_GPIO_Init+0x1e8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a48      	ldr	r2, [pc, #288]	; (8006028 <HAL_GPIO_Init+0x2e4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00d      	beq.n	8005f28 <HAL_GPIO_Init+0x1e4>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a47      	ldr	r2, [pc, #284]	; (800602c <HAL_GPIO_Init+0x2e8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <HAL_GPIO_Init+0x1e0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a46      	ldr	r2, [pc, #280]	; (8006030 <HAL_GPIO_Init+0x2ec>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d101      	bne.n	8005f20 <HAL_GPIO_Init+0x1dc>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	e008      	b.n	8005f32 <HAL_GPIO_Init+0x1ee>
 8005f20:	2307      	movs	r3, #7
 8005f22:	e006      	b.n	8005f32 <HAL_GPIO_Init+0x1ee>
 8005f24:	2303      	movs	r3, #3
 8005f26:	e004      	b.n	8005f32 <HAL_GPIO_Init+0x1ee>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e002      	b.n	8005f32 <HAL_GPIO_Init+0x1ee>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_GPIO_Init+0x1ee>
 8005f30:	2300      	movs	r3, #0
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	f002 0203 	and.w	r2, r2, #3
 8005f38:	0092      	lsls	r2, r2, #2
 8005f3a:	4093      	lsls	r3, r2
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f42:	4937      	ldr	r1, [pc, #220]	; (8006020 <HAL_GPIO_Init+0x2dc>)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	089b      	lsrs	r3, r3, #2
 8005f48:	3302      	adds	r3, #2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f74:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f7a:	4b2e      	ldr	r3, [pc, #184]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fa4:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <HAL_GPIO_Init+0x2f0>)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	f47f aea3 	bne.w	8005d54 <HAL_GPIO_Init+0x10>
  }
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40021000 	.word	0x40021000
 8006020:	40010000 	.word	0x40010000
 8006024:	48000400 	.word	0x48000400
 8006028:	48000800 	.word	0x48000800
 800602c:	48000c00 	.word	0x48000c00
 8006030:	48001000 	.word	0x48001000
 8006034:	40010400 	.word	0x40010400

08006038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	887b      	ldrh	r3, [r7, #2]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e001      	b.n	800605a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	807b      	strh	r3, [r7, #2]
 8006074:	4613      	mov	r3, r2
 8006076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006078:	787b      	ldrb	r3, [r7, #1]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800607e:	887a      	ldrh	r2, [r7, #2]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006084:	e002      	b.n	800608c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060aa:	887a      	ldrh	r2, [r7, #2]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4013      	ands	r3, r2
 80060b0:	041a      	lsls	r2, r3, #16
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	43d9      	mvns	r1, r3
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	400b      	ands	r3, r1
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	619a      	str	r2, [r3, #24]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060d6:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060d8:	695a      	ldr	r2, [r3, #20]
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d006      	beq.n	80060f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060e2:	4a05      	ldr	r2, [pc, #20]	; (80060f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc ff8e 	bl	800300c <HAL_GPIO_EXTI_Callback>
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40010400 	.word	0x40010400

080060fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a04      	ldr	r2, [pc, #16]	; (8006118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610a:	6013      	str	r3, [r2, #0]
}
 800610c:	bf00      	nop
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40007000 	.word	0x40007000

0800611c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a04      	ldr	r2, [pc, #16]	; (8006138 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8006126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]
}
 800612c:	bf00      	nop
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40007000 	.word	0x40007000

0800613c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006140:	4b04      	ldr	r3, [pc, #16]	; (8006154 <HAL_PWREx_GetVoltageRange+0x18>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40007000 	.word	0x40007000

08006158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006166:	d130      	bne.n	80061ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006168:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006174:	d038      	beq.n	80061e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2232      	movs	r2, #50	; 0x32
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	0c9b      	lsrs	r3, r3, #18
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800619c:	e002      	b.n	80061a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061a4:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b0:	d102      	bne.n	80061b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f2      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c4:	d110      	bne.n	80061e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d6:	d007      	beq.n	80061e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061d8:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061e0:	4a05      	ldr	r2, [pc, #20]	; (80061f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40007000 	.word	0x40007000
 80061fc:	20000020 	.word	0x20000020
 8006200:	431bde83 	.word	0x431bde83

08006204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f000 bc02 	b.w	8006a1c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006218:	4b96      	ldr	r3, [pc, #600]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006222:	4b94      	ldr	r3, [pc, #592]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80e4 	beq.w	8006402 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <HAL_RCC_OscConfig+0x4c>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	f040 808b 	bne.w	800635e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b01      	cmp	r3, #1
 800624c:	f040 8087 	bne.w	800635e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_OscConfig+0x64>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e3d9      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <HAL_RCC_OscConfig+0x7e>
 8006278:	4b7e      	ldr	r3, [pc, #504]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006280:	e005      	b.n	800628e <HAL_RCC_OscConfig+0x8a>
 8006282:	4b7c      	ldr	r3, [pc, #496]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628e:	4293      	cmp	r3, r2
 8006290:	d223      	bcs.n	80062da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fd52 	bl	8006d40 <RCC_SetFlashLatencyFromMSIRange>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e3ba      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062a6:	4b73      	ldr	r3, [pc, #460]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a72      	ldr	r2, [pc, #456]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062ac:	f043 0308 	orr.w	r3, r3, #8
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	4b70      	ldr	r3, [pc, #448]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	496d      	ldr	r1, [pc, #436]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062c4:	4b6b      	ldr	r3, [pc, #428]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	4968      	ldr	r1, [pc, #416]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
 80062d8:	e025      	b.n	8006326 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062da:	4b66      	ldr	r3, [pc, #408]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a65      	ldr	r2, [pc, #404]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062e0:	f043 0308 	orr.w	r3, r3, #8
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	4b63      	ldr	r3, [pc, #396]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4960      	ldr	r1, [pc, #384]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	495b      	ldr	r1, [pc, #364]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fd12 	bl	8006d40 <RCC_SetFlashLatencyFromMSIRange>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e37a      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006326:	f000 fc81 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 800632a:	4602      	mov	r2, r0
 800632c:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	4950      	ldr	r1, [pc, #320]	; (8006478 <HAL_RCC_OscConfig+0x274>)
 8006338:	5ccb      	ldrb	r3, [r1, r3]
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	fa22 f303 	lsr.w	r3, r2, r3
 8006342:	4a4e      	ldr	r2, [pc, #312]	; (800647c <HAL_RCC_OscConfig+0x278>)
 8006344:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006346:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <HAL_RCC_OscConfig+0x27c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd fe20 	bl	8003f90 <HAL_InitTick>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d052      	beq.n	8006400 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	e35e      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d032      	beq.n	80063cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006366:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a42      	ldr	r2, [pc, #264]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006372:	f7fd fe5d 	bl	8004030 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800637a:	f7fd fe59 	bl	8004030 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e347      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0f0      	beq.n	800637a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006398:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a35      	ldr	r2, [pc, #212]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800639e:	f043 0308 	orr.w	r3, r3, #8
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b33      	ldr	r3, [pc, #204]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	4930      	ldr	r1, [pc, #192]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b6:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	492b      	ldr	r1, [pc, #172]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
 80063ca:	e01a      	b.n	8006402 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063cc:	4b29      	ldr	r3, [pc, #164]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a28      	ldr	r2, [pc, #160]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063d8:	f7fd fe2a 	bl	8004030 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063e0:	f7fd fe26 	bl	8004030 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e314      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1dc>
 80063fe:	e000      	b.n	8006402 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006400:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d073      	beq.n	80064f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d005      	beq.n	8006420 <HAL_RCC_OscConfig+0x21c>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d10e      	bne.n	8006438 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d063      	beq.n	80064f4 <HAL_RCC_OscConfig+0x2f0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d15f      	bne.n	80064f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e2f1      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x24c>
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0b      	ldr	r2, [pc, #44]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e025      	b.n	800649c <HAL_RCC_OscConfig+0x298>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006458:	d114      	bne.n	8006484 <HAL_RCC_OscConfig+0x280>
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a05      	ldr	r2, [pc, #20]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a02      	ldr	r2, [pc, #8]	; (8006474 <HAL_RCC_OscConfig+0x270>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e013      	b.n	800649c <HAL_RCC_OscConfig+0x298>
 8006474:	40021000 	.word	0x40021000
 8006478:	0800c5b0 	.word	0x0800c5b0
 800647c:	20000020 	.word	0x20000020
 8006480:	20000024 	.word	0x20000024
 8006484:	4ba0      	ldr	r3, [pc, #640]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a9f      	ldr	r2, [pc, #636]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800648a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b9d      	ldr	r3, [pc, #628]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a9c      	ldr	r2, [pc, #624]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fd fdc4 	bl	8004030 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ac:	f7fd fdc0 	bl	8004030 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b64      	cmp	r3, #100	; 0x64
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e2ae      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064be:	4b92      	ldr	r3, [pc, #584]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x2a8>
 80064ca:	e014      	b.n	80064f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fd fdb0 	bl	8004030 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fd fdac 	bl	8004030 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e29a      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064e6:	4b88      	ldr	r3, [pc, #544]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d0>
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d060      	beq.n	80065c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b04      	cmp	r3, #4
 8006506:	d005      	beq.n	8006514 <HAL_RCC_OscConfig+0x310>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b0c      	cmp	r3, #12
 800650c:	d119      	bne.n	8006542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d116      	bne.n	8006542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006514:	4b7c      	ldr	r3, [pc, #496]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_OscConfig+0x328>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e277      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652c:	4b76      	ldr	r3, [pc, #472]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	4973      	ldr	r1, [pc, #460]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006540:	e040      	b.n	80065c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d023      	beq.n	8006592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654a:	4b6f      	ldr	r3, [pc, #444]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a6e      	ldr	r2, [pc, #440]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fd fd6b 	bl	8004030 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655e:	f7fd fd67 	bl	8004030 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e255      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006570:	4b65      	ldr	r3, [pc, #404]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657c:	4b62      	ldr	r3, [pc, #392]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	495f      	ldr	r1, [pc, #380]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800658c:	4313      	orrs	r3, r2
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	e018      	b.n	80065c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006592:	4b5d      	ldr	r3, [pc, #372]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5c      	ldr	r2, [pc, #368]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800659c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659e:	f7fd fd47 	bl	8004030 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a6:	f7fd fd43 	bl	8004030 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e231      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065b8:	4b53      	ldr	r3, [pc, #332]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03c      	beq.n	800664a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01c      	beq.n	8006612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d8:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80065da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065de:	4a4a      	ldr	r2, [pc, #296]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fd fd22 	bl	8004030 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fd fd1e 	bl	8004030 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e20c      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006602:	4b41      	ldr	r3, [pc, #260]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ef      	beq.n	80065f0 <HAL_RCC_OscConfig+0x3ec>
 8006610:	e01b      	b.n	800664a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006612:	4b3d      	ldr	r3, [pc, #244]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006618:	4a3b      	ldr	r2, [pc, #236]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006622:	f7fd fd05 	bl	8004030 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662a:	f7fd fd01 	bl	8004030 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e1ef      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800663c:	4b32      	ldr	r3, [pc, #200]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800663e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ef      	bne.n	800662a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80a6 	beq.w	80067a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800665c:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006668:	4b27      	ldr	r3, [pc, #156]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006672:	6593      	str	r3, [r2, #88]	; 0x58
 8006674:	4b24      	ldr	r3, [pc, #144]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 8006676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006680:	2301      	movs	r3, #1
 8006682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_RCC_OscConfig+0x508>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d118      	bne.n	80066c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <HAL_RCC_OscConfig+0x508>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1d      	ldr	r2, [pc, #116]	; (800670c <HAL_RCC_OscConfig+0x508>)
 8006696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800669c:	f7fd fcc8 	bl	8004030 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a4:	f7fd fcc4 	bl	8004030 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e1b2      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCC_OscConfig+0x508>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d108      	bne.n	80066dc <HAL_RCC_OscConfig+0x4d8>
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d0:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066da:	e029      	b.n	8006730 <HAL_RCC_OscConfig+0x52c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d115      	bne.n	8006710 <HAL_RCC_OscConfig+0x50c>
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	4a07      	ldr	r2, [pc, #28]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	4a03      	ldr	r2, [pc, #12]	; (8006708 <HAL_RCC_OscConfig+0x504>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006704:	e014      	b.n	8006730 <HAL_RCC_OscConfig+0x52c>
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	40007000 	.word	0x40007000
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	4a99      	ldr	r2, [pc, #612]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006720:	4b96      	ldr	r3, [pc, #600]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006726:	4a95      	ldr	r2, [pc, #596]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fd fc7a 	bl	8004030 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673e:	e00a      	b.n	8006756 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006740:	f7fd fc76 	bl	8004030 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e162      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006756:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ed      	beq.n	8006740 <HAL_RCC_OscConfig+0x53c>
 8006764:	e015      	b.n	8006792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006766:	f7fd fc63 	bl	8004030 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800676c:	e00a      	b.n	8006784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f7fd fc5f 	bl	8004030 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	f241 3288 	movw	r2, #5000	; 0x1388
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e14b      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006784:	4b7d      	ldr	r3, [pc, #500]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ed      	bne.n	800676e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006792:	7ffb      	ldrb	r3, [r7, #31]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d105      	bne.n	80067a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006798:	4b78      	ldr	r3, [pc, #480]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800679a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679c:	4a77      	ldr	r2, [pc, #476]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800679e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d03c      	beq.n	800682a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01c      	beq.n	80067f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067b8:	4b70      	ldr	r3, [pc, #448]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80067ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067be:	4a6f      	ldr	r2, [pc, #444]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c8:	f7fd fc32 	bl	8004030 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067d0:	f7fd fc2e 	bl	8004030 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e11c      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067e2:	4b66      	ldr	r3, [pc, #408]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80067e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0ef      	beq.n	80067d0 <HAL_RCC_OscConfig+0x5cc>
 80067f0:	e01b      	b.n	800682a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067f2:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80067f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067f8:	4a60      	ldr	r2, [pc, #384]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006802:	f7fd fc15 	bl	8004030 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800680a:	f7fd fc11 	bl	8004030 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0ff      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800681c:	4b57      	ldr	r3, [pc, #348]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800681e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1ef      	bne.n	800680a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80f3 	beq.w	8006a1a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	2b02      	cmp	r3, #2
 800683a:	f040 80c9 	bne.w	80069d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800683e:	4b4f      	ldr	r3, [pc, #316]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f003 0203 	and.w	r2, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	429a      	cmp	r2, r3
 8006850:	d12c      	bne.n	80068ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	3b01      	subs	r3, #1
 800685e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d123      	bne.n	80068ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d11b      	bne.n	80068ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d113      	bne.n	80068ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	3b01      	subs	r3, #1
 8006892:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d109      	bne.n	80068ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	3b01      	subs	r3, #1
 80068a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d06b      	beq.n	8006984 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b0c      	cmp	r3, #12
 80068b0:	d062      	beq.n	8006978 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068b2:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e0ac      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068c2:	4b2e      	ldr	r3, [pc, #184]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2d      	ldr	r2, [pc, #180]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80068c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068ce:	f7fd fbaf 	bl	8004030 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d6:	f7fd fbab 	bl	8004030 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e099      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f0      	bne.n	80068d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068f4:	4b21      	ldr	r3, [pc, #132]	; (800697c <HAL_RCC_OscConfig+0x778>)
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	4b21      	ldr	r3, [pc, #132]	; (8006980 <HAL_RCC_OscConfig+0x77c>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006904:	3a01      	subs	r2, #1
 8006906:	0112      	lsls	r2, r2, #4
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800690e:	0212      	lsls	r2, r2, #8
 8006910:	4311      	orrs	r1, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006916:	0852      	lsrs	r2, r2, #1
 8006918:	3a01      	subs	r2, #1
 800691a:	0552      	lsls	r2, r2, #21
 800691c:	4311      	orrs	r1, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006922:	0852      	lsrs	r2, r2, #1
 8006924:	3a01      	subs	r2, #1
 8006926:	0652      	lsls	r2, r2, #25
 8006928:	4311      	orrs	r1, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800692e:	06d2      	lsls	r2, r2, #27
 8006930:	430a      	orrs	r2, r1
 8006932:	4912      	ldr	r1, [pc, #72]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006934:	4313      	orrs	r3, r2
 8006936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006938:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0f      	ldr	r2, [pc, #60]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800693e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <HAL_RCC_OscConfig+0x778>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800694a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800694e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006950:	f7fd fb6e 	bl	8004030 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006958:	f7fd fb6a 	bl	8004030 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e058      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800696a:	4b04      	ldr	r3, [pc, #16]	; (800697c <HAL_RCC_OscConfig+0x778>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006976:	e050      	b.n	8006a1a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e04f      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
 800697c:	40021000 	.word	0x40021000
 8006980:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006984:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d144      	bne.n	8006a1a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006990:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 8006996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800699c:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 80069a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069a8:	f7fd fb42 	bl	8004030 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fd fb3e 	bl	8004030 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e02c      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c2:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x7ac>
 80069ce:	e024      	b.n	8006a1a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d01f      	beq.n	8006a16 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a12      	ldr	r2, [pc, #72]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 80069dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e2:	f7fd fb25 	bl	8004030 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ea:	f7fd fb21 	bl	8004030 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e00f      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	4905      	ldr	r1, [pc, #20]	; (8006a24 <HAL_RCC_OscConfig+0x820>)
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_RCC_OscConfig+0x824>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60cb      	str	r3, [r1, #12]
 8006a14:	e001      	b.n	8006a1a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40021000 	.word	0x40021000
 8006a28:	feeefffc 	.word	0xfeeefffc

08006a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0e7      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a40:	4b75      	ldr	r3, [pc, #468]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d910      	bls.n	8006a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4e:	4b72      	ldr	r3, [pc, #456]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 0207 	bic.w	r2, r3, #7
 8006a56:	4970      	ldr	r1, [pc, #448]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b6e      	ldr	r3, [pc, #440]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0cf      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b66      	ldr	r3, [pc, #408]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d908      	bls.n	8006a9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a8c:	4b63      	ldr	r3, [pc, #396]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4960      	ldr	r1, [pc, #384]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d04c      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ab2:	4b5a      	ldr	r3, [pc, #360]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d121      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0a6      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d107      	bne.n	8006ada <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aca:	4b54      	ldr	r3, [pc, #336]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d115      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e09a      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ae2:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e08e      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af2:	4b4a      	ldr	r3, [pc, #296]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e086      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b02:	4b46      	ldr	r3, [pc, #280]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f023 0203 	bic.w	r2, r3, #3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	4943      	ldr	r1, [pc, #268]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b14:	f7fd fa8c 	bl	8004030 <HAL_GetTick>
 8006b18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1a:	e00a      	b.n	8006b32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b1c:	f7fd fa88 	bl	8004030 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e06e      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 020c 	and.w	r2, r3, #12
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d1eb      	bne.n	8006b1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d010      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	4b31      	ldr	r3, [pc, #196]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d208      	bcs.n	8006b72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b60:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	492b      	ldr	r1, [pc, #172]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b72:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d210      	bcs.n	8006ba2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b80:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f023 0207 	bic.w	r2, r3, #7
 8006b88:	4923      	ldr	r1, [pc, #140]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b90:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <HAL_RCC_ClockConfig+0x1ec>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e036      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bae:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	4918      	ldr	r1, [pc, #96]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4910      	ldr	r1, [pc, #64]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006be0:	f000 f824 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006be4:	4602      	mov	r2, r0
 8006be6:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	490b      	ldr	r1, [pc, #44]	; (8006c20 <HAL_RCC_ClockConfig+0x1f4>)
 8006bf2:	5ccb      	ldrb	r3, [r1, r3]
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_RCC_ClockConfig+0x1fc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fd f9c3 	bl	8003f90 <HAL_InitTick>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40022000 	.word	0x40022000
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	0800c5b0 	.word	0x0800c5b0
 8006c24:	20000020 	.word	0x20000020
 8006c28:	20000024 	.word	0x20000024

08006c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b089      	sub	sp, #36	; 0x24
 8006c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c3a:	4b3e      	ldr	r3, [pc, #248]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c44:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_GetSysClockFreq+0x34>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d121      	bne.n	8006c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d11e      	bne.n	8006c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c60:	4b34      	ldr	r3, [pc, #208]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	e005      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c7c:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c88:	4a2b      	ldr	r2, [pc, #172]	; (8006d38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d102      	bne.n	8006caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e004      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cb0:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d134      	bne.n	8006d24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cba:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d003      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0xac>
 8006cd0:	e005      	b.n	8006cde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cd4:	617b      	str	r3, [r7, #20]
      break;
 8006cd6:	e005      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cd8:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cda:	617b      	str	r3, [r7, #20]
      break;
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	617b      	str	r3, [r7, #20]
      break;
 8006ce2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ce4:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	fb03 f202 	mul.w	r2, r3, r2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	0e5b      	lsrs	r3, r3, #25
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	3301      	adds	r3, #1
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d24:	69bb      	ldr	r3, [r7, #24]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3724      	adds	r7, #36	; 0x24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40021000 	.word	0x40021000
 8006d38:	0800c5c0 	.word	0x0800c5c0
 8006d3c:	00f42400 	.word	0x00f42400

08006d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d4c:	4b2a      	ldr	r3, [pc, #168]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d58:	f7ff f9f0 	bl	800613c <HAL_PWREx_GetVoltageRange>
 8006d5c:	6178      	str	r0, [r7, #20]
 8006d5e:	e014      	b.n	8006d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d78:	f7ff f9e0 	bl	800613c <HAL_PWREx_GetVoltageRange>
 8006d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d10b      	bne.n	8006daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d919      	bls.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8006d9c:	d902      	bls.n	8006da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d9e:	2302      	movs	r3, #2
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	e013      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006da4:	2301      	movs	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e010      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d902      	bls.n	8006db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006db0:	2303      	movs	r3, #3
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	e00a      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d102      	bne.n	8006dc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e004      	b.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d101      	bne.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dc8:	2301      	movs	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f023 0207 	bic.w	r2, r3, #7
 8006dd4:	4909      	ldr	r1, [pc, #36]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d001      	beq.n	8006dee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40022000 	.word	0x40022000

08006e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e08:	2300      	movs	r3, #0
 8006e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d031      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e24:	d01a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e2a:	d814      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e34:	d10f      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006e36:	4b5d      	ldr	r3, [pc, #372]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	4a5c      	ldr	r2, [pc, #368]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e42:	e00c      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fa54 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e54:	e003      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	74fb      	strb	r3, [r7, #19]
      break;
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e5e:	7cfb      	ldrb	r3, [r7, #19]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e64:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	494e      	ldr	r1, [pc, #312]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006e7a:	e001      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 809e 	beq.w	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e92:	4b46      	ldr	r3, [pc, #280]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00d      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea8:	4b40      	ldr	r3, [pc, #256]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ec4:	4b3a      	ldr	r3, [pc, #232]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a39      	ldr	r2, [pc, #228]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ed0:	f7fd f8ae 	bl	8004030 <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ed6:	e009      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed8:	f7fd f8aa 	bl	8004030 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d902      	bls.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	74fb      	strb	r3, [r7, #19]
        break;
 8006eea:	e005      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006eec:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0ef      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006ef8:	7cfb      	ldrb	r3, [r7, #19]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d15a      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006efe:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01e      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d019      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f1a:	4b24      	ldr	r3, [pc, #144]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f26:	4b21      	ldr	r3, [pc, #132]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f36:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f46:	4a19      	ldr	r2, [pc, #100]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fd f86a 	bl	8004030 <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f5e:	e00b      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f60:	f7fd f866 	bl	8004030 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d902      	bls.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	74fb      	strb	r3, [r7, #19]
            break;
 8006f76:	e006      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0ec      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006f86:	7cfb      	ldrb	r3, [r7, #19]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9a:	4904      	ldr	r1, [pc, #16]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	74bb      	strb	r3, [r7, #18]
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006faa:	bf00      	nop
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb4:	7cfb      	ldrb	r3, [r7, #19]
 8006fb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb8:	7c7b      	ldrb	r3, [r7, #17]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d105      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbe:	4b9e      	ldr	r3, [pc, #632]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	4a9d      	ldr	r2, [pc, #628]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd6:	4b98      	ldr	r3, [pc, #608]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f023 0203 	bic.w	r2, r3, #3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	4994      	ldr	r1, [pc, #592]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ff8:	4b8f      	ldr	r3, [pc, #572]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f023 020c 	bic.w	r2, r3, #12
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	498c      	ldr	r1, [pc, #560]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800701a:	4b87      	ldr	r3, [pc, #540]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	4983      	ldr	r1, [pc, #524]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800703c:	4b7e      	ldr	r3, [pc, #504]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	497b      	ldr	r1, [pc, #492]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4972      	ldr	r1, [pc, #456]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007080:	4b6d      	ldr	r3, [pc, #436]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	496a      	ldr	r1, [pc, #424]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070a2:	4b65      	ldr	r3, [pc, #404]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	4961      	ldr	r1, [pc, #388]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070c4:	4b5c      	ldr	r3, [pc, #368]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	4959      	ldr	r1, [pc, #356]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070e6:	4b54      	ldr	r3, [pc, #336]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	4950      	ldr	r1, [pc, #320]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007108:	4b4b      	ldr	r3, [pc, #300]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	4948      	ldr	r1, [pc, #288]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800712a:	4b43      	ldr	r3, [pc, #268]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800712c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007130:	f023 0203 	bic.w	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	493f      	ldr	r1, [pc, #252]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d028      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800714c:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	4937      	ldr	r1, [pc, #220]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716a:	d106      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800716c:	4b32      	ldr	r3, [pc, #200]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4a31      	ldr	r2, [pc, #196]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007176:	60d3      	str	r3, [r2, #12]
 8007178:	e011      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007182:	d10c      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	2101      	movs	r1, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f8b4 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8007190:	4603      	mov	r3, r0
 8007192:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d028      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071aa:	4b23      	ldr	r3, [pc, #140]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	491f      	ldr	r1, [pc, #124]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c8:	d106      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	4a1a      	ldr	r2, [pc, #104]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071d4:	60d3      	str	r3, [r2, #12]
 80071d6:	e011      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	2101      	movs	r1, #1
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f885 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071f2:	7cfb      	ldrb	r3, [r7, #19]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d02b      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	4908      	ldr	r1, [pc, #32]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007226:	d109      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4a02      	ldr	r2, [pc, #8]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800722e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007232:	60d3      	str	r3, [r2, #12]
 8007234:	e014      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007244:	d10c      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f853 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007256:	7cfb      	ldrb	r3, [r7, #19]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800725c:	7cfb      	ldrb	r3, [r7, #19]
 800725e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01c      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800726c:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007272:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727a:	4916      	ldr	r1, [pc, #88]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800728a:	d10c      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f830 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800729c:	7cfb      	ldrb	r3, [r7, #19]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80072a2:	7cfb      	ldrb	r3, [r7, #19]
 80072a4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c0:	4904      	ldr	r1, [pc, #16]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40021000 	.word	0x40021000

080072d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80072e2:	f043 0304 	orr.w	r3, r3, #4
 80072e6:	6013      	str	r3, [r2, #0]
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000

080072f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007306:	4b74      	ldr	r3, [pc, #464]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d018      	beq.n	8007344 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007312:	4b71      	ldr	r3, [pc, #452]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0203 	and.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d10d      	bne.n	800733e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
       ||
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800732a:	4b6b      	ldr	r3, [pc, #428]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
       ||
 800733a:	429a      	cmp	r2, r3
 800733c:	d047      	beq.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	e044      	b.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d018      	beq.n	800737e <RCCEx_PLLSAI1_Config+0x86>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d825      	bhi.n	800739c <RCCEx_PLLSAI1_Config+0xa4>
 8007350:	2b01      	cmp	r3, #1
 8007352:	d002      	beq.n	800735a <RCCEx_PLLSAI1_Config+0x62>
 8007354:	2b02      	cmp	r3, #2
 8007356:	d009      	beq.n	800736c <RCCEx_PLLSAI1_Config+0x74>
 8007358:	e020      	b.n	800739c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800735a:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11d      	bne.n	80073a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800736a:	e01a      	b.n	80073a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800736c:	4b5a      	ldr	r3, [pc, #360]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	2b00      	cmp	r3, #0
 8007376:	d116      	bne.n	80073a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800737c:	e013      	b.n	80073a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800737e:	4b56      	ldr	r3, [pc, #344]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800738a:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800739a:	e006      	b.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      break;
 80073a0:	e004      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073b2:	4b49      	ldr	r3, [pc, #292]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	430b      	orrs	r3, r1
 80073c8:	4943      	ldr	r1, [pc, #268]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d17c      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073d4:	4b40      	ldr	r3, [pc, #256]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e0:	f7fc fe26 	bl	8004030 <HAL_GetTick>
 80073e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073e6:	e009      	b.n	80073fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073e8:	f7fc fe22 	bl	8004030 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d902      	bls.n	80073fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	73fb      	strb	r3, [r7, #15]
        break;
 80073fa:	e005      	b.n	8007408 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ef      	bne.n	80073e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d15f      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d110      	bne.n	8007436 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007414:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800741c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6892      	ldr	r2, [r2, #8]
 8007424:	0211      	lsls	r1, r2, #8
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	68d2      	ldr	r2, [r2, #12]
 800742a:	06d2      	lsls	r2, r2, #27
 800742c:	430a      	orrs	r2, r1
 800742e:	492a      	ldr	r1, [pc, #168]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	4313      	orrs	r3, r2
 8007432:	610b      	str	r3, [r1, #16]
 8007434:	e027      	b.n	8007486 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d112      	bne.n	8007462 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800743c:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6892      	ldr	r2, [r2, #8]
 800744c:	0211      	lsls	r1, r2, #8
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6912      	ldr	r2, [r2, #16]
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	3a01      	subs	r2, #1
 8007456:	0552      	lsls	r2, r2, #21
 8007458:	430a      	orrs	r2, r1
 800745a:	491f      	ldr	r1, [pc, #124]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800745c:	4313      	orrs	r3, r2
 800745e:	610b      	str	r3, [r1, #16]
 8007460:	e011      	b.n	8007486 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800746a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6892      	ldr	r2, [r2, #8]
 8007472:	0211      	lsls	r1, r2, #8
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6952      	ldr	r2, [r2, #20]
 8007478:	0852      	lsrs	r2, r2, #1
 800747a:	3a01      	subs	r2, #1
 800747c:	0652      	lsls	r2, r2, #25
 800747e:	430a      	orrs	r2, r1
 8007480:	4915      	ldr	r1, [pc, #84]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800748c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007490:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fc fdcd 	bl	8004030 <HAL_GetTick>
 8007496:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007498:	e009      	b.n	80074ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800749a:	f7fc fdc9 	bl	8004030 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d902      	bls.n	80074ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
          break;
 80074ac:	e005      	b.n	80074ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ef      	beq.n	800749a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	4903      	ldr	r1, [pc, #12]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40021000 	.word	0x40021000

080074dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d06c      	beq.n	80075c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fb fdd2 	bl	80030ac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	22ca      	movs	r2, #202	; 0xca
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2253      	movs	r2, #83	; 0x53
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa49 	bl	80079b8 <RTC_EnterInitMode>
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d14b      	bne.n	80075c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007542:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6899      	ldr	r1, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68d2      	ldr	r2, [r2, #12]
 800756a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6919      	ldr	r1, [r3, #16]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	041a      	lsls	r2, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fa4d 	bl	8007a20 <RTC_ExitInitMode>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11b      	bne.n	80075c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0203 	bic.w	r2, r2, #3
 800759e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075d2:	b590      	push	{r4, r7, lr}
 80075d4:	b087      	sub	sp, #28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_RTC_SetTime+0x1a>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e08b      	b.n	8007704 <HAL_RTC_SetTime+0x132>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	22ca      	movs	r2, #202	; 0xca
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2253      	movs	r2, #83	; 0x53
 800760a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f9d3 	bl	80079b8 <RTC_EnterInitMode>
 8007612:	4603      	mov	r3, r0
 8007614:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007616:	7cfb      	ldrb	r3, [r7, #19]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d163      	bne.n	80076e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d126      	bne.n	8007670 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa2e 	bl	8007a9c <RTC_ByteToBcd2>
 8007640:	4603      	mov	r3, r0
 8007642:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fa27 	bl	8007a9c <RTC_ByteToBcd2>
 800764e:	4603      	mov	r3, r0
 8007650:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007652:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	789b      	ldrb	r3, [r3, #2]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fa1f 	bl	8007a9c <RTC_ByteToBcd2>
 800765e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007660:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e018      	b.n	80076a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007690:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007696:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	78db      	ldrb	r3, [r3, #3]
 800769c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80076ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80076b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f9a0 	bl	8007a20 <RTC_ExitInitMode>
 80076e0:	4603      	mov	r3, r0
 80076e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	22ff      	movs	r2, #255	; 0xff
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80076ec:	7cfb      	ldrb	r3, [r7, #19]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007702:	7cfb      	ldrb	r3, [r7, #19]
}
 8007704:	4618      	mov	r0, r3
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd90      	pop	{r4, r7, pc}

0800770c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800773a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800773e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	0d9b      	lsrs	r3, r3, #22
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11a      	bne.n	80077ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f9a7 	bl	8007adc <RTC_Bcd2ToByte>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f99e 	bl	8007adc <RTC_Bcd2ToByte>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f995 	bl	8007adc <RTC_Bcd2ToByte>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_RTC_SetDate+0x1a>
 80077da:	2302      	movs	r3, #2
 80077dc:	e075      	b.n	80078ca <HAL_RTC_SetDate+0x106>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10e      	bne.n	8007812 <HAL_RTC_SetDate+0x4e>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	f023 0310 	bic.w	r3, r3, #16
 8007808:	b2db      	uxtb	r3, r3
 800780a:	330a      	adds	r3, #10
 800780c:	b2da      	uxtb	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11c      	bne.n	8007852 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	78db      	ldrb	r3, [r3, #3]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f93d 	bl	8007a9c <RTC_ByteToBcd2>
 8007822:	4603      	mov	r3, r0
 8007824:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 f936 	bl	8007a9c <RTC_ByteToBcd2>
 8007830:	4603      	mov	r3, r0
 8007832:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007834:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f92e 	bl	8007a9c <RTC_ByteToBcd2>
 8007840:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007842:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e00e      	b.n	8007870 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	78db      	ldrb	r3, [r3, #3]
 8007856:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800785e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007864:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	22ca      	movs	r2, #202	; 0xca
 8007876:	625a      	str	r2, [r3, #36]	; 0x24
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2253      	movs	r2, #83	; 0x53
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f899 	bl	80079b8 <RTC_EnterInitMode>
 8007886:	4603      	mov	r3, r0
 8007888:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800788a:	7cfb      	ldrb	r3, [r7, #19]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10c      	bne.n	80078aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800789a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800789e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f8bd 	bl	8007a20 <RTC_ExitInitMode>
 80078a6:	4603      	mov	r3, r0
 80078a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	22ff      	movs	r2, #255	; 0xff
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80078b2:	7cfb      	ldrb	r3, [r7, #19]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd90      	pop	{r4, r7, pc}

080078d2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	0b5b      	lsrs	r3, r3, #13
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11a      	bne.n	8007962 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	78db      	ldrb	r3, [r3, #3]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f8d3 	bl	8007adc <RTC_Bcd2ToByte>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f8ca 	bl	8007adc <RTC_Bcd2ToByte>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	789b      	ldrb	r3, [r3, #2]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f8c1 	bl	8007adc <RTC_Bcd2ToByte>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007982:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007984:	f7fc fb54 	bl	8004030 <HAL_GetTick>
 8007988:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800798a:	e009      	b.n	80079a0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800798c:	f7fc fb50 	bl	8004030 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800799a:	d901      	bls.n	80079a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e007      	b.n	80079b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0ee      	beq.n	800798c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d120      	bne.n	8007a14 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f04f 32ff 	mov.w	r2, #4294967295
 80079da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80079dc:	f7fc fb28 	bl	8004030 <HAL_GetTick>
 80079e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079e2:	e00d      	b.n	8007a00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80079e4:	f7fc fb24 	bl	8004030 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079f2:	d905      	bls.n	8007a00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2203      	movs	r2, #3
 80079fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <RTC_EnterInitMode+0x5c>
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d1e7      	bne.n	80079e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a36:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a38:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10c      	bne.n	8007a5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff ff91 	bl	800796c <HAL_RTC_WaitForSynchro>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01e      	beq.n	8007a8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2203      	movs	r2, #3
 8007a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e017      	b.n	8007a8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a5e:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a64:	f023 0320 	bic.w	r3, r3, #32
 8007a68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff ff7e 	bl	800796c <HAL_RTC_WaitForSynchro>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <RTC_ExitInitMode+0x78>)
 8007a88:	f043 0320 	orr.w	r3, r3, #32
 8007a8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40002800 	.word	0x40002800

08007a9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007aae:	e005      	b.n	8007abc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	3b0a      	subs	r3, #10
 8007aba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d8f6      	bhi.n	8007ab0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	b2db      	uxtb	r3, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	4413      	add	r3, r2
 8007b02:	b2db      	uxtb	r3, r3
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3350      	adds	r3, #80	; 0x50
 8007b22:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	009a      	lsls	r2, r3, #2
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3350      	adds	r3, #80	; 0x50
 8007b52:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e095      	b.n	8007cac <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d108      	bne.n	8007b9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b90:	d009      	beq.n	8007ba6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	61da      	str	r2, [r3, #28]
 8007b98:	e005      	b.n	8007ba6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fc f8c1 	bl	8003d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be6:	d902      	bls.n	8007bee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e002      	b.n	8007bf4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bfc:	d007      	beq.n	8007c0e <HAL_SPI_Init+0xa0>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c50:	ea42 0103 	orr.w	r1, r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	f003 0204 	and.w	r2, r3, #4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c8a:	ea42 0103 	orr.w	r1, r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_SPI_Transmit+0x22>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e158      	b.n	8007f88 <HAL_SPI_Transmit+0x2d4>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cde:	f7fc f9a7 	bl	8004030 <HAL_GetTick>
 8007ce2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d002      	beq.n	8007cfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cf8:	e13d      	b.n	8007f76 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SPI_Transmit+0x52>
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d102      	bne.n	8007d0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d0a:	e134      	b.n	8007f76 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	88fa      	ldrh	r2, [r7, #6]
 8007d24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	88fa      	ldrh	r2, [r7, #6]
 8007d2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d56:	d10f      	bne.n	8007d78 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d007      	beq.n	8007d96 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d9e:	d94b      	bls.n	8007e38 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_SPI_Transmit+0xfa>
 8007da8:	8afb      	ldrh	r3, [r7, #22]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d13e      	bne.n	8007e2c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	1c9a      	adds	r2, r3, #2
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007dd2:	e02b      	b.n	8007e2c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d112      	bne.n	8007e08 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	1c9a      	adds	r2, r3, #2
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e06:	e011      	b.n	8007e2c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e08:	f7fc f912 	bl	8004030 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d803      	bhi.n	8007e20 <HAL_SPI_Transmit+0x16c>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1e:	d102      	bne.n	8007e26 <HAL_SPI_Transmit+0x172>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e2a:	e0a4      	b.n	8007f76 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ce      	bne.n	8007dd4 <HAL_SPI_Transmit+0x120>
 8007e36:	e07c      	b.n	8007f32 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_SPI_Transmit+0x192>
 8007e40:	8afb      	ldrh	r3, [r7, #22]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d170      	bne.n	8007f28 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d912      	bls.n	8007e76 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	881a      	ldrh	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	1c9a      	adds	r2, r3, #2
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b02      	subs	r3, #2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e74:	e058      	b.n	8007f28 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e9c:	e044      	b.n	8007f28 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d12b      	bne.n	8007f04 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d912      	bls.n	8007edc <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	881a      	ldrh	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	1c9a      	adds	r2, r3, #2
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b02      	subs	r3, #2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007eda:	e025      	b.n	8007f28 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f02:	e011      	b.n	8007f28 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f04:	f7fc f894 	bl	8004030 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d803      	bhi.n	8007f1c <HAL_SPI_Transmit+0x268>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d102      	bne.n	8007f22 <HAL_SPI_Transmit+0x26e>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f26:	e026      	b.n	8007f76 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1b5      	bne.n	8007e9e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fb5c 	bl	80085f4 <SPI_EndRxTxTransaction>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e000      	b.n	8007f76 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x26>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e1fb      	b.n	80083ae <HAL_SPI_TransmitReceive+0x41e>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fbe:	f7fc f837 	bl	8004030 <HAL_GetTick>
 8007fc2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007fd2:	887b      	ldrh	r3, [r7, #2]
 8007fd4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007fd6:	887b      	ldrh	r3, [r7, #2]
 8007fd8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fda:	7efb      	ldrb	r3, [r7, #27]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d00e      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x6e>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe6:	d106      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x66>
 8007ff0:	7efb      	ldrb	r3, [r7, #27]
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d003      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ffc:	e1cd      	b.n	800839a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x80>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x80>
 800800a:	887b      	ldrh	r3, [r7, #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008016:	e1c0      	b.n	800839a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b04      	cmp	r3, #4
 8008022:	d003      	beq.n	800802c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2205      	movs	r2, #5
 8008028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	887a      	ldrh	r2, [r7, #2]
 800803c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	887a      	ldrh	r2, [r7, #2]
 8008044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	887a      	ldrh	r2, [r7, #2]
 8008052:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	887a      	ldrh	r2, [r7, #2]
 8008058:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800806e:	d802      	bhi.n	8008076 <HAL_SPI_TransmitReceive+0xe6>
 8008070:	8a3b      	ldrh	r3, [r7, #16]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d908      	bls.n	8008088 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	e007      	b.n	8008098 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008096:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d007      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080be:	d97c      	bls.n	80081ba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <HAL_SPI_TransmitReceive+0x13e>
 80080c8:	8a7b      	ldrh	r3, [r7, #18]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d169      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	1c9a      	adds	r2, r3, #2
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080f2:	e056      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d11b      	bne.n	800813a <HAL_SPI_TransmitReceive+0x1aa>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d016      	beq.n	800813a <HAL_SPI_TransmitReceive+0x1aa>
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	2b01      	cmp	r3, #1
 8008110:	d113      	bne.n	800813a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	881a      	ldrh	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	1c9a      	adds	r2, r3, #2
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b01      	cmp	r3, #1
 8008146:	d11c      	bne.n	8008182 <HAL_SPI_TransmitReceive+0x1f2>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d016      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	b292      	uxth	r2, r2
 8008160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	1c9a      	adds	r2, r3, #2
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800817e:	2301      	movs	r3, #1
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008182:	f7fb ff55 	bl	8004030 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	429a      	cmp	r2, r3
 8008190:	d807      	bhi.n	80081a2 <HAL_SPI_TransmitReceive+0x212>
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d003      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80081a0:	e0fb      	b.n	800839a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1a3      	bne.n	80080f4 <HAL_SPI_TransmitReceive+0x164>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d19d      	bne.n	80080f4 <HAL_SPI_TransmitReceive+0x164>
 80081b8:	e0df      	b.n	800837a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_SPI_TransmitReceive+0x23a>
 80081c2:	8a7b      	ldrh	r3, [r7, #18]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f040 80cb 	bne.w	8008360 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d912      	bls.n	80081fa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	881a      	ldrh	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	1c9a      	adds	r2, r3, #2
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b02      	subs	r3, #2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081f8:	e0b2      	b.n	8008360 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008220:	e09e      	b.n	8008360 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d134      	bne.n	800829a <HAL_SPI_TransmitReceive+0x30a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d02f      	beq.n	800829a <HAL_SPI_TransmitReceive+0x30a>
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b01      	cmp	r3, #1
 800823e:	d12c      	bne.n	800829a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d912      	bls.n	8008270 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	881a      	ldrh	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b02      	subs	r3, #2
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800826e:	e012      	b.n	8008296 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	330c      	adds	r3, #12
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d148      	bne.n	800833a <HAL_SPI_TransmitReceive+0x3aa>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d042      	beq.n	800833a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d923      	bls.n	8008308 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	b292      	uxth	r2, r2
 80082cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b02      	subs	r3, #2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d81f      	bhi.n	8008336 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008304:	605a      	str	r2, [r3, #4]
 8008306:	e016      	b.n	8008336 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f103 020c 	add.w	r2, r3, #12
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008336:	2301      	movs	r3, #1
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800833a:	f7fb fe79 	bl	8004030 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008346:	429a      	cmp	r2, r3
 8008348:	d803      	bhi.n	8008352 <HAL_SPI_TransmitReceive+0x3c2>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d102      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x3c8>
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800835e:	e01c      	b.n	800839a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	f47f af5b 	bne.w	8008222 <HAL_SPI_TransmitReceive+0x292>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	f47f af54 	bne.w	8008222 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f938 	bl	80085f4 <SPI_EndRxTxTransaction>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	661a      	str	r2, [r3, #96]	; 0x60
 8008396:	e000      	b.n	800839a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008398:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80083aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3728      	adds	r7, #40	; 0x28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	4613      	mov	r3, r2
 80083c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083c8:	f7fb fe32 	bl	8004030 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d8:	f7fb fe2a 	bl	8004030 <HAL_GetTick>
 80083dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083de:	4b39      	ldr	r3, [pc, #228]	; (80084c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	015b      	lsls	r3, r3, #5
 80083e4:	0d1b      	lsrs	r3, r3, #20
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	fb02 f303 	mul.w	r3, r2, r3
 80083ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ee:	e054      	b.n	800849a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d050      	beq.n	800849a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f8:	f7fb fe1a 	bl	8004030 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	429a      	cmp	r2, r3
 8008406:	d902      	bls.n	800840e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d13d      	bne.n	800848a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800841c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008426:	d111      	bne.n	800844c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008430:	d004      	beq.n	800843c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843a:	d107      	bne.n	800844c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800844a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008454:	d10f      	bne.n	8008476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e017      	b.n	80084ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3b01      	subs	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4013      	ands	r3, r2
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bf0c      	ite	eq
 80084aa:	2301      	moveq	r3, #1
 80084ac:	2300      	movne	r3, #0
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d19b      	bne.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000020 	.word	0x20000020

080084c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084da:	f7fb fda9 	bl	8004030 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	4413      	add	r3, r2
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80084ea:	f7fb fda1 	bl	8004030 <HAL_GetTick>
 80084ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084f8:	4b3d      	ldr	r3, [pc, #244]	; (80085f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	00da      	lsls	r2, r3, #3
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	0d1b      	lsrs	r3, r3, #20
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008510:	e060      	b.n	80085d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008518:	d107      	bne.n	800852a <SPI_WaitFifoStateUntilTimeout+0x62>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008528:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008530:	d050      	beq.n	80085d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008532:	f7fb fd7d 	bl	8004030 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853e:	429a      	cmp	r2, r3
 8008540:	d902      	bls.n	8008548 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d13d      	bne.n	80085c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008556:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008560:	d111      	bne.n	8008586 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856a:	d004      	beq.n	8008576 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008574:	d107      	bne.n	8008586 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008584:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800858e:	d10f      	bne.n	80085b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e010      	b.n	80085e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4013      	ands	r3, r2
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d196      	bne.n	8008512 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3728      	adds	r7, #40	; 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000020 	.word	0x20000020

080085f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2200      	movs	r2, #0
 8008608:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff ff5b 	bl	80084c8 <SPI_WaitFifoStateUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861c:	f043 0220 	orr.w	r2, r3, #32
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e027      	b.n	8008678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fec0 	bl	80083b8 <SPI_WaitFlagStateUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008642:	f043 0220 	orr.w	r2, r3, #32
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e014      	b.n	8008678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff ff34 	bl	80084c8 <SPI_WaitFifoStateUntilTimeout>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e000      	b.n	8008678 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008684:	4904      	ldr	r1, [pc, #16]	; (8008698 <MX_FATFS_Init+0x18>)
 8008686:	4805      	ldr	r0, [pc, #20]	; (800869c <MX_FATFS_Init+0x1c>)
 8008688:	f003 f998 	bl	800b9bc <FATFS_LinkDriver>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <MX_FATFS_Init+0x20>)
 8008692:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008694:	bf00      	nop
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20002300 	.word	0x20002300
 800869c:	2000004c 	.word	0x2000004c
 80086a0:	200022fc 	.word	0x200022fc

080086a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7f9 fced 	bl	80020a0 <SD_disk_initialize>
 80086c6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7f9 fdc5 	bl	800226c <SD_disk_status>
 80086e2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80086fc:	7bf8      	ldrb	r0, [r7, #15]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	f7f9 fdc8 	bl	8002298 <SD_disk_read>
 8008708:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8008722:	7bf8      	ldrb	r0, [r7, #15]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	f7f9 fe1f 	bl	800236c <SD_disk_write>
 800872e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	603a      	str	r2, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
 8008744:	460b      	mov	r3, r1
 8008746:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8008748:	79b9      	ldrb	r1, [r7, #6]
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 fe90 	bl	8002474 <SD_disk_ioctl>
 8008754:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4a08      	ldr	r2, [pc, #32]	; (8008790 <disk_status+0x30>)
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	79fa      	ldrb	r2, [r7, #7]
 8008778:	4905      	ldr	r1, [pc, #20]	; (8008790 <disk_status+0x30>)
 800877a:	440a      	add	r2, r1
 800877c:	7a12      	ldrb	r2, [r2, #8]
 800877e:	4610      	mov	r0, r2
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	2000252c 	.word	0x2000252c

08008794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4a0d      	ldr	r2, [pc, #52]	; (80087dc <disk_initialize+0x48>)
 80087a6:	5cd3      	ldrb	r3, [r2, r3]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d111      	bne.n	80087d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <disk_initialize+0x48>)
 80087b0:	2101      	movs	r1, #1
 80087b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <disk_initialize+0x48>)
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	79fa      	ldrb	r2, [r7, #7]
 80087c2:	4906      	ldr	r1, [pc, #24]	; (80087dc <disk_initialize+0x48>)
 80087c4:	440a      	add	r2, r1
 80087c6:	7a12      	ldrb	r2, [r2, #8]
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	2000252c 	.word	0x2000252c

080087e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	4a0a      	ldr	r2, [pc, #40]	; (800881c <disk_read+0x3c>)
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	689c      	ldr	r4, [r3, #8]
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	4a07      	ldr	r2, [pc, #28]	; (800881c <disk_read+0x3c>)
 8008800:	4413      	add	r3, r2
 8008802:	7a18      	ldrb	r0, [r3, #8]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	68b9      	ldr	r1, [r7, #8]
 800880a:	47a0      	blx	r4
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd90      	pop	{r4, r7, pc}
 800881a:	bf00      	nop
 800881c:	2000252c 	.word	0x2000252c

08008820 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	4a0a      	ldr	r2, [pc, #40]	; (800885c <disk_write+0x3c>)
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	68dc      	ldr	r4, [r3, #12]
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4a07      	ldr	r2, [pc, #28]	; (800885c <disk_write+0x3c>)
 8008840:	4413      	add	r3, r2
 8008842:	7a18      	ldrb	r0, [r3, #8]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	47a0      	blx	r4
 800884c:	4603      	mov	r3, r0
 800884e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
}
 8008852:	4618      	mov	r0, r3
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd90      	pop	{r4, r7, pc}
 800885a:	bf00      	nop
 800885c:	2000252c 	.word	0x2000252c

08008860 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	603a      	str	r2, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
 800886c:	460b      	mov	r3, r1
 800886e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	4a09      	ldr	r2, [pc, #36]	; (8008898 <disk_ioctl+0x38>)
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	79fa      	ldrb	r2, [r7, #7]
 800887e:	4906      	ldr	r1, [pc, #24]	; (8008898 <disk_ioctl+0x38>)
 8008880:	440a      	add	r2, r1
 8008882:	7a10      	ldrb	r0, [r2, #8]
 8008884:	79b9      	ldrb	r1, [r7, #6]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
  return res;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	2000252c 	.word	0x2000252c

0800889c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3301      	adds	r3, #1
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	b21a      	sxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80088be:	89fb      	ldrh	r3, [r7, #14]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3303      	adds	r3, #3
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	3202      	adds	r2, #2
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	3201      	adds	r2, #1
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
	return rv;
 8008904:	68fb      	ldr	r3, [r7, #12]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	887a      	ldrh	r2, [r7, #2]
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	887b      	ldrh	r3, [r7, #2]
 800892c:	0a1b      	lsrs	r3, r3, #8
 800892e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	887a      	ldrh	r2, [r7, #2]
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	0a1b      	lsrs	r3, r3, #8
 8008974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	701a      	strb	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00d      	beq.n	80089d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	1c53      	adds	r3, r2, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	6179      	str	r1, [r7, #20]
 80089c6:	7812      	ldrb	r2, [r2, #0]
 80089c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f1      	bne.n	80089ba <mem_cpy+0x1a>
	}
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80089e2:	b480      	push	{r7}
 80089e4:	b087      	sub	sp, #28
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	617a      	str	r2, [r7, #20]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	607b      	str	r3, [r7, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1f3      	bne.n	80089f2 <mem_set+0x10>
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a18:	b480      	push	{r7}
 8008a1a:	b089      	sub	sp, #36	; 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	61fa      	str	r2, [r7, #28]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	61ba      	str	r2, [r7, #24]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	1acb      	subs	r3, r1, r3
 8008a44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	607b      	str	r3, [r7, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <mem_cmp+0x40>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0eb      	beq.n	8008a30 <mem_cmp+0x18>

	return r;
 8008a58:	697b      	ldr	r3, [r7, #20]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3724      	adds	r7, #36	; 0x24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a70:	e002      	b.n	8008a78 <chk_chr+0x12>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3301      	adds	r3, #1
 8008a76:	607b      	str	r3, [r7, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <chk_chr+0x26>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d1f2      	bne.n	8008a72 <chk_chr+0xc>
	return *str;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	e029      	b.n	8008b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008ab0:	4a27      	ldr	r2, [pc, #156]	; (8008b50 <chk_lock+0xb4>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	4413      	add	r3, r2
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01d      	beq.n	8008afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008abe:	4a24      	ldr	r2, [pc, #144]	; (8008b50 <chk_lock+0xb4>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d116      	bne.n	8008afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ad0:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <chk_lock+0xb4>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3304      	adds	r3, #4
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d10c      	bne.n	8008afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ae4:	4a1a      	ldr	r2, [pc, #104]	; (8008b50 <chk_lock+0xb4>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	4413      	add	r3, r2
 8008aec:	3308      	adds	r3, #8
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d102      	bne.n	8008afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008af8:	e007      	b.n	8008b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008afa:	2301      	movs	r3, #1
 8008afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d9d2      	bls.n	8008ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d109      	bne.n	8008b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d102      	bne.n	8008b1c <chk_lock+0x80>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d101      	bne.n	8008b20 <chk_lock+0x84>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e010      	b.n	8008b42 <chk_lock+0xa6>
 8008b20:	2312      	movs	r3, #18
 8008b22:	e00e      	b.n	8008b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d108      	bne.n	8008b3c <chk_lock+0xa0>
 8008b2a:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <chk_lock+0xb4>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	4413      	add	r3, r2
 8008b32:	330c      	adds	r3, #12
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	d101      	bne.n	8008b40 <chk_lock+0xa4>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	e000      	b.n	8008b42 <chk_lock+0xa6>
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	2000230c 	.word	0x2000230c

08008b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
 8008b5e:	e002      	b.n	8008b66 <enq_lock+0x12>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3301      	adds	r3, #1
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d806      	bhi.n	8008b7a <enq_lock+0x26>
 8008b6c:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <enq_lock+0x40>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	4413      	add	r3, r2
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f2      	bne.n	8008b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	bf14      	ite	ne
 8008b80:	2301      	movne	r3, #1
 8008b82:	2300      	moveq	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000230c 	.word	0x2000230c

08008b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e01f      	b.n	8008be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ba8:	4a41      	ldr	r2, [pc, #260]	; (8008cb0 <inc_lock+0x118>)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	4413      	add	r3, r2
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d113      	bne.n	8008be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008bba:	4a3d      	ldr	r2, [pc, #244]	; (8008cb0 <inc_lock+0x118>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d109      	bne.n	8008be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008bce:	4a38      	ldr	r2, [pc, #224]	; (8008cb0 <inc_lock+0x118>)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d006      	beq.n	8008bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d9dc      	bls.n	8008ba8 <inc_lock+0x10>
 8008bee:	e000      	b.n	8008bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d132      	bne.n	8008c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e002      	b.n	8008c04 <inc_lock+0x6c>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d806      	bhi.n	8008c18 <inc_lock+0x80>
 8008c0a:	4a29      	ldr	r2, [pc, #164]	; (8008cb0 <inc_lock+0x118>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	4413      	add	r3, r2
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f2      	bne.n	8008bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d101      	bne.n	8008c22 <inc_lock+0x8a>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e040      	b.n	8008ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4922      	ldr	r1, [pc, #136]	; (8008cb0 <inc_lock+0x118>)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	440b      	add	r3, r1
 8008c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	491e      	ldr	r1, [pc, #120]	; (8008cb0 <inc_lock+0x118>)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	491a      	ldr	r1, [pc, #104]	; (8008cb0 <inc_lock+0x118>)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c50:	4a17      	ldr	r2, [pc, #92]	; (8008cb0 <inc_lock+0x118>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	4413      	add	r3, r2
 8008c58:	330c      	adds	r3, #12
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d009      	beq.n	8008c78 <inc_lock+0xe0>
 8008c64:	4a12      	ldr	r2, [pc, #72]	; (8008cb0 <inc_lock+0x118>)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	4413      	add	r3, r2
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <inc_lock+0xe0>
 8008c74:	2300      	movs	r3, #0
 8008c76:	e015      	b.n	8008ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d108      	bne.n	8008c90 <inc_lock+0xf8>
 8008c7e:	4a0c      	ldr	r2, [pc, #48]	; (8008cb0 <inc_lock+0x118>)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	4413      	add	r3, r2
 8008c86:	330c      	adds	r3, #12
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	e001      	b.n	8008c94 <inc_lock+0xfc>
 8008c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c94:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <inc_lock+0x118>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	440b      	add	r3, r1
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2000230c 	.word	0x2000230c

08008cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d825      	bhi.n	8008d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <dec_lock+0x74>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008cd6:	89fb      	ldrh	r3, [r7, #14]
 8008cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cdc:	d101      	bne.n	8008ce2 <dec_lock+0x2e>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008ce2:	89fb      	ldrh	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <dec_lock+0x3a>
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008cee:	4a0e      	ldr	r2, [pc, #56]	; (8008d28 <dec_lock+0x74>)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	4413      	add	r3, r2
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	89fa      	ldrh	r2, [r7, #14]
 8008cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008cfc:	89fb      	ldrh	r3, [r7, #14]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d105      	bne.n	8008d0e <dec_lock+0x5a>
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <dec_lock+0x74>)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4413      	add	r3, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	737b      	strb	r3, [r7, #13]
 8008d12:	e001      	b.n	8008d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d14:	2302      	movs	r3, #2
 8008d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	2000230c 	.word	0x2000230c

08008d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e010      	b.n	8008d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <clear_lock+0x44>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	4413      	add	r3, r2
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d105      	bne.n	8008d56 <clear_lock+0x2a>
 8008d4a:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <clear_lock+0x44>)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	4413      	add	r3, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d9eb      	bls.n	8008d3a <clear_lock+0xe>
	}
}
 8008d62:	bf00      	nop
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	2000230c 	.word	0x2000230c

08008d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	78db      	ldrb	r3, [r3, #3]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d034      	beq.n	8008df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7858      	ldrb	r0, [r3, #1]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d98:	2301      	movs	r3, #1
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	f7ff fd40 	bl	8008820 <disk_write>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
 8008daa:	e022      	b.n	8008df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d217      	bcs.n	8008df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	789b      	ldrb	r3, [r3, #2]
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	e010      	b.n	8008dec <sync_window+0x78>
					wsect += fs->fsize;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7858      	ldrb	r0, [r3, #1]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008dde:	2301      	movs	r3, #1
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	f7ff fd1d 	bl	8008820 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d8eb      	bhi.n	8008dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d01b      	beq.n	8008e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff ffad 	bl	8008d74 <sync_window>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d113      	bne.n	8008e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7858      	ldrb	r0, [r3, #1]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e2e:	2301      	movs	r3, #1
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	f7ff fcd5 	bl	80087e0 <disk_read>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff ff87 	bl	8008d74 <sync_window>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d159      	bne.n	8008f24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d149      	bne.n	8008f0c <sync_fs+0xb4>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	791b      	ldrb	r3, [r3, #4]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d145      	bne.n	8008f0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	899b      	ldrh	r3, [r3, #12]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	f7ff fda8 	bl	80089e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3338      	adds	r3, #56	; 0x38
 8008e96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fd37 	bl	8008912 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3338      	adds	r3, #56	; 0x38
 8008ea8:	4921      	ldr	r1, [pc, #132]	; (8008f30 <sync_fs+0xd8>)
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff fd4c 	bl	8008948 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3338      	adds	r3, #56	; 0x38
 8008eb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008eb8:	491e      	ldr	r1, [pc, #120]	; (8008f34 <sync_fs+0xdc>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff fd44 	bl	8008948 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3338      	adds	r3, #56	; 0x38
 8008ec4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7ff fd3a 	bl	8008948 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3338      	adds	r3, #56	; 0x38
 8008ed8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7ff fd30 	bl	8008948 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7858      	ldrb	r0, [r3, #1]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f00:	2301      	movs	r3, #1
 8008f02:	f7ff fc8d 	bl	8008820 <disk_write>
			fs->fsi_flag = 0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff fca3 	bl	8008860 <disk_ioctl>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <sync_fs+0xcc>
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	41615252 	.word	0x41615252
 8008f34:	61417272 	.word	0x61417272

08008f38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	3b02      	subs	r3, #2
 8008f46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	3b02      	subs	r3, #2
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d301      	bcc.n	8008f58 <clust2sect+0x20>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e008      	b.n	8008f6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	895b      	ldrh	r3, [r3, #10]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	fb03 f202 	mul.w	r2, r3, r2
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	4413      	add	r3, r2
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d904      	bls.n	8008f96 <get_fat+0x20>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e0bb      	b.n	8009114 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	f000 8083 	beq.w	80090b2 <get_fat+0x13c>
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	f300 80a7 	bgt.w	8009100 <get_fat+0x18a>
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d002      	beq.n	8008fbc <get_fat+0x46>
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d056      	beq.n	8009068 <get_fat+0xf2>
 8008fba:	e0a1      	b.n	8009100 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	899b      	ldrh	r3, [r3, #12]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fda:	4413      	add	r3, r2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f7ff ff0c 	bl	8008dfc <move_window>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 808d 	bne.w	8009106 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	60fa      	str	r2, [r7, #12]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	8992      	ldrh	r2, [r2, #12]
 8008ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ffa:	fb01 f202 	mul.w	r2, r1, r2
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	4413      	add	r3, r2
 8009004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	4619      	mov	r1, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	fbb3 f3f1 	udiv	r3, r3, r1
 800901a:	4413      	add	r3, r2
 800901c:	4619      	mov	r1, r3
 800901e:	6938      	ldr	r0, [r7, #16]
 8009020:	f7ff feec 	bl	8008dfc <move_window>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d16f      	bne.n	800910a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	899b      	ldrh	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	fbb3 f1f2 	udiv	r1, r3, r2
 8009036:	fb01 f202 	mul.w	r2, r1, r2
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4413      	add	r3, r2
 8009040:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	461a      	mov	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4313      	orrs	r3, r2
 800904c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <get_fat+0xe8>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	091b      	lsrs	r3, r3, #4
 800905c:	e002      	b.n	8009064 <get_fat+0xee>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009064:	617b      	str	r3, [r7, #20]
			break;
 8009066:	e055      	b.n	8009114 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	899b      	ldrh	r3, [r3, #12]
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	b29b      	uxth	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	fbb3 f3f1 	udiv	r3, r3, r1
 800907c:	4413      	add	r3, r2
 800907e:	4619      	mov	r1, r3
 8009080:	6938      	ldr	r0, [r7, #16]
 8009082:	f7ff febb 	bl	8008dfc <move_window>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d140      	bne.n	800910e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	8992      	ldrh	r2, [r2, #12]
 800909a:	fbb3 f0f2 	udiv	r0, r3, r2
 800909e:	fb00 f202 	mul.w	r2, r0, r2
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	440b      	add	r3, r1
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fbf8 	bl	800889c <ld_word>
 80090ac:	4603      	mov	r3, r0
 80090ae:	617b      	str	r3, [r7, #20]
			break;
 80090b0:	e030      	b.n	8009114 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	899b      	ldrh	r3, [r3, #12]
 80090ba:	089b      	lsrs	r3, r3, #2
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090c6:	4413      	add	r3, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f7ff fe96 	bl	8008dfc <move_window>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d11d      	bne.n	8009112 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	8992      	ldrh	r2, [r2, #12]
 80090e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80090e8:	fb00 f202 	mul.w	r2, r0, r2
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	440b      	add	r3, r1
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fbeb 	bl	80088cc <ld_dword>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090fc:	617b      	str	r3, [r7, #20]
			break;
 80090fe:	e009      	b.n	8009114 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009100:	2301      	movs	r3, #1
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e006      	b.n	8009114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009106:	bf00      	nop
 8009108:	e004      	b.n	8009114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800910a:	bf00      	nop
 800910c:	e002      	b.n	8009114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800910e:	bf00      	nop
 8009110:	e000      	b.n	8009114 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009112:	bf00      	nop
		}
	}

	return val;
 8009114:	697b      	ldr	r3, [r7, #20]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800911e:	b590      	push	{r4, r7, lr}
 8009120:	b089      	sub	sp, #36	; 0x24
 8009122:	af00      	add	r7, sp, #0
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800912a:	2302      	movs	r3, #2
 800912c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b01      	cmp	r3, #1
 8009132:	f240 8102 	bls.w	800933a <put_fat+0x21c>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	f080 80fc 	bcs.w	800933a <put_fat+0x21c>
		switch (fs->fs_type) {
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b03      	cmp	r3, #3
 8009148:	f000 80b6 	beq.w	80092b8 <put_fat+0x19a>
 800914c:	2b03      	cmp	r3, #3
 800914e:	f300 80fd 	bgt.w	800934c <put_fat+0x22e>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d003      	beq.n	800915e <put_fat+0x40>
 8009156:	2b02      	cmp	r3, #2
 8009158:	f000 8083 	beq.w	8009262 <put_fat+0x144>
 800915c:	e0f6      	b.n	800934c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	4413      	add	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	899b      	ldrh	r3, [r3, #12]
 8009174:	4619      	mov	r1, r3
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	fbb3 f3f1 	udiv	r3, r3, r1
 800917c:	4413      	add	r3, r2
 800917e:	4619      	mov	r1, r3
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff fe3b 	bl	8008dfc <move_window>
 8009186:	4603      	mov	r3, r0
 8009188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800918a:	7ffb      	ldrb	r3, [r7, #31]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 80d6 	bne.w	800933e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	61ba      	str	r2, [r7, #24]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	8992      	ldrh	r2, [r2, #12]
 80091a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80091a6:	fb00 f202 	mul.w	r2, r0, r2
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	440b      	add	r3, r1
 80091ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00d      	beq.n	80091d6 <put_fat+0xb8>
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	f003 030f 	and.w	r3, r3, #15
 80091c4:	b25a      	sxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	b25b      	sxtb	r3, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	e001      	b.n	80091da <put_fat+0xbc>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	899b      	ldrh	r3, [r3, #12]
 80091ec:	4619      	mov	r1, r3
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80091f4:	4413      	add	r3, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff fdff 	bl	8008dfc <move_window>
 80091fe:	4603      	mov	r3, r0
 8009200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 809c 	bne.w	8009342 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	899b      	ldrh	r3, [r3, #12]
 8009214:	461a      	mov	r2, r3
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	fbb3 f0f2 	udiv	r0, r3, r2
 800921c:	fb00 f202 	mul.w	r2, r0, r2
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	440b      	add	r3, r1
 8009224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <put_fat+0x11a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	091b      	lsrs	r3, r3, #4
 8009234:	b2db      	uxtb	r3, r3
 8009236:	e00e      	b.n	8009256 <put_fat+0x138>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b25b      	sxtb	r3, r3
 800923e:	f023 030f 	bic.w	r3, r3, #15
 8009242:	b25a      	sxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b25b      	sxtb	r3, r3
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	b25b      	sxtb	r3, r3
 8009250:	4313      	orrs	r3, r2
 8009252:	b25b      	sxtb	r3, r3
 8009254:	b2db      	uxtb	r3, r3
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	70da      	strb	r2, [r3, #3]
			break;
 8009260:	e074      	b.n	800934c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	899b      	ldrh	r3, [r3, #12]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	b29b      	uxth	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	fbb3 f3f1 	udiv	r3, r3, r1
 8009276:	4413      	add	r3, r2
 8009278:	4619      	mov	r1, r3
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fdbe 	bl	8008dfc <move_window>
 8009280:	4603      	mov	r3, r0
 8009282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009284:	7ffb      	ldrb	r3, [r7, #31]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d15d      	bne.n	8009346 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	8992      	ldrh	r2, [r2, #12]
 8009298:	fbb3 f0f2 	udiv	r0, r3, r2
 800929c:	fb00 f202 	mul.w	r2, r0, r2
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	440b      	add	r3, r1
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	b292      	uxth	r2, r2
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fb31 	bl	8008912 <st_word>
			fs->wflag = 1;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	70da      	strb	r2, [r3, #3]
			break;
 80092b6:	e049      	b.n	800934c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	899b      	ldrh	r3, [r3, #12]
 80092c0:	089b      	lsrs	r3, r3, #2
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4619      	mov	r1, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80092cc:	4413      	add	r3, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fd93 	bl	8008dfc <move_window>
 80092d6:	4603      	mov	r3, r0
 80092d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d134      	bne.n	800934a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	8992      	ldrh	r2, [r2, #12]
 80092f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80092f8:	fb00 f202 	mul.w	r2, r0, r2
 80092fc:	1a9b      	subs	r3, r3, r2
 80092fe:	440b      	add	r3, r1
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fae3 	bl	80088cc <ld_dword>
 8009306:	4603      	mov	r3, r0
 8009308:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800930c:	4323      	orrs	r3, r4
 800930e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	8992      	ldrh	r2, [r2, #12]
 800931e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009322:	fb00 f202 	mul.w	r2, r0, r2
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	440b      	add	r3, r1
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fb0b 	bl	8008948 <st_dword>
			fs->wflag = 1;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	70da      	strb	r2, [r3, #3]
			break;
 8009338:	e008      	b.n	800934c <put_fat+0x22e>
		}
	}
 800933a:	bf00      	nop
 800933c:	e006      	b.n	800934c <put_fat+0x22e>
			if (res != FR_OK) break;
 800933e:	bf00      	nop
 8009340:	e004      	b.n	800934c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009342:	bf00      	nop
 8009344:	e002      	b.n	800934c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009346:	bf00      	nop
 8009348:	e000      	b.n	800934c <put_fat+0x22e>
			if (res != FR_OK) break;
 800934a:	bf00      	nop
	return res;
 800934c:	7ffb      	ldrb	r3, [r7, #31]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3724      	adds	r7, #36	; 0x24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd90      	pop	{r4, r7, pc}

08009356 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b088      	sub	sp, #32
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d904      	bls.n	800937c <remove_chain+0x26>
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	429a      	cmp	r2, r3
 800937a:	d301      	bcc.n	8009380 <remove_chain+0x2a>
 800937c:	2302      	movs	r3, #2
 800937e:	e04b      	b.n	8009418 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00c      	beq.n	80093a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	69b8      	ldr	r0, [r7, #24]
 800938e:	f7ff fec6 	bl	800911e <put_fat>
 8009392:	4603      	mov	r3, r0
 8009394:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009396:	7ffb      	ldrb	r3, [r7, #31]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <remove_chain+0x4a>
 800939c:	7ffb      	ldrb	r3, [r7, #31]
 800939e:	e03b      	b.n	8009418 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fde7 	bl	8008f76 <get_fat>
 80093a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d031      	beq.n	8009414 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <remove_chain+0x64>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e02e      	b.n	8009418 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c0:	d101      	bne.n	80093c6 <remove_chain+0x70>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e028      	b.n	8009418 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80093c6:	2200      	movs	r2, #0
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	69b8      	ldr	r0, [r7, #24]
 80093cc:	f7ff fea7 	bl	800911e <put_fat>
 80093d0:	4603      	mov	r3, r0
 80093d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80093d4:	7ffb      	ldrb	r3, [r7, #31]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <remove_chain+0x88>
 80093da:	7ffb      	ldrb	r3, [r7, #31]
 80093dc:	e01c      	b.n	8009418 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	3b02      	subs	r3, #2
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d20b      	bcs.n	8009404 <remove_chain+0xae>
			fs->free_clst++;
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	791b      	ldrb	r3, [r3, #4]
 80093fa:	f043 0301 	orr.w	r3, r3, #1
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	429a      	cmp	r2, r3
 8009410:	d3c6      	bcc.n	80093a0 <remove_chain+0x4a>
 8009412:	e000      	b.n	8009416 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009414:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10d      	bne.n	8009452 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <create_chain+0x2c>
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	429a      	cmp	r2, r3
 800944a:	d31b      	bcc.n	8009484 <create_chain+0x64>
 800944c:	2301      	movs	r3, #1
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	e018      	b.n	8009484 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fd8e 	bl	8008f76 <get_fat>
 800945a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d801      	bhi.n	8009466 <create_chain+0x46>
 8009462:	2301      	movs	r3, #1
 8009464:	e070      	b.n	8009548 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d101      	bne.n	8009472 <create_chain+0x52>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e06a      	b.n	8009548 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	429a      	cmp	r2, r3
 800947a:	d201      	bcs.n	8009480 <create_chain+0x60>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	e063      	b.n	8009548 <create_chain+0x128>
		scl = clst;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	3301      	adds	r3, #1
 800948c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	429a      	cmp	r2, r3
 8009496:	d307      	bcc.n	80094a8 <create_chain+0x88>
				ncl = 2;
 8009498:	2302      	movs	r3, #2
 800949a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d901      	bls.n	80094a8 <create_chain+0x88>
 80094a4:	2300      	movs	r3, #0
 80094a6:	e04f      	b.n	8009548 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fd63 	bl	8008f76 <get_fat>
 80094b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d003      	beq.n	80094c6 <create_chain+0xa6>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d101      	bne.n	80094ca <create_chain+0xaa>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	e03e      	b.n	8009548 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d1da      	bne.n	8009488 <create_chain+0x68>
 80094d2:	2300      	movs	r3, #0
 80094d4:	e038      	b.n	8009548 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80094d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	69f9      	ldr	r1, [r7, #28]
 80094de:	6938      	ldr	r0, [r7, #16]
 80094e0:	f7ff fe1d 	bl	800911e <put_fat>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <create_chain+0xe2>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d006      	beq.n	8009502 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6938      	ldr	r0, [r7, #16]
 80094fa:	f7ff fe10 	bl	800911e <put_fat>
 80094fe:	4603      	mov	r3, r0
 8009500:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d116      	bne.n	8009536 <create_chain+0x116>
		fs->last_clst = ncl;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	3b02      	subs	r3, #2
 8009518:	429a      	cmp	r2, r3
 800951a:	d804      	bhi.n	8009526 <create_chain+0x106>
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	1e5a      	subs	r2, r3, #1
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	791b      	ldrb	r3, [r3, #4]
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	711a      	strb	r2, [r3, #4]
 8009534:	e007      	b.n	8009546 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d102      	bne.n	8009542 <create_chain+0x122>
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	e000      	b.n	8009544 <create_chain+0x124>
 8009542:	2301      	movs	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009546:	69fb      	ldr	r3, [r7, #28]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	3304      	adds	r3, #4
 8009566:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	899b      	ldrh	r3, [r3, #12]
 800956c:	461a      	mov	r2, r3
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	fbb3 f3f2 	udiv	r3, r3, r2
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	8952      	ldrh	r2, [r2, #10]
 8009578:	fbb3 f3f2 	udiv	r3, r3, r2
 800957c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	613a      	str	r2, [r7, #16]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <clmt_clust+0x42>
 800958e:	2300      	movs	r3, #0
 8009590:	e010      	b.n	80095b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d307      	bcc.n	80095aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3304      	adds	r3, #4
 80095a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095a8:	e7e9      	b.n	800957e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80095aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	4413      	add	r3, r2
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	371c      	adds	r7, #28
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095d6:	d204      	bcs.n	80095e2 <dir_sdi+0x22>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f003 031f 	and.w	r3, r3, #31
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80095e2:	2302      	movs	r3, #2
 80095e4:	e071      	b.n	80096ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <dir_sdi+0x46>
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d902      	bls.n	8009606 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10c      	bne.n	8009626 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	8912      	ldrh	r2, [r2, #8]
 8009614:	4293      	cmp	r3, r2
 8009616:	d301      	bcc.n	800961c <dir_sdi+0x5c>
 8009618:	2302      	movs	r3, #2
 800961a:	e056      	b.n	80096ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	61da      	str	r2, [r3, #28]
 8009624:	e02d      	b.n	8009682 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	895b      	ldrh	r3, [r3, #10]
 800962a:	461a      	mov	r2, r3
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	899b      	ldrh	r3, [r3, #12]
 8009630:	fb02 f303 	mul.w	r3, r2, r3
 8009634:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009636:	e019      	b.n	800966c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fc9a 	bl	8008f76 <get_fat>
 8009642:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d101      	bne.n	8009650 <dir_sdi+0x90>
 800964c:	2301      	movs	r3, #1
 800964e:	e03c      	b.n	80096ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d904      	bls.n	8009660 <dir_sdi+0xa0>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d301      	bcc.n	8009664 <dir_sdi+0xa4>
 8009660:	2302      	movs	r3, #2
 8009662:	e032      	b.n	80096ca <dir_sdi+0x10a>
			ofs -= csz;
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	429a      	cmp	r2, r3
 8009672:	d2e1      	bcs.n	8009638 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009674:	6979      	ldr	r1, [r7, #20]
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f7ff fc5e 	bl	8008f38 <clust2sect>
 800967c:	4602      	mov	r2, r0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <dir_sdi+0xd4>
 8009690:	2302      	movs	r3, #2
 8009692:	e01a      	b.n	80096ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	899b      	ldrh	r3, [r3, #12]
 800969c:	4619      	mov	r1, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80096a4:	441a      	add	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	899b      	ldrh	r3, [r3, #12]
 80096b4:	461a      	mov	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80096bc:	fb00 f202 	mul.w	r2, r0, r2
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	18ca      	adds	r2, r1, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	3320      	adds	r3, #32
 80096e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <dir_next+0x28>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096f8:	d301      	bcc.n	80096fe <dir_next+0x2c>
 80096fa:	2304      	movs	r3, #4
 80096fc:	e0bb      	b.n	8009876 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	899b      	ldrh	r3, [r3, #12]
 8009702:	461a      	mov	r2, r3
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	fbb3 f1f2 	udiv	r1, r3, r2
 800970a:	fb01 f202 	mul.w	r2, r1, r2
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	2b00      	cmp	r3, #0
 8009712:	f040 809d 	bne.w	8009850 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10b      	bne.n	8009740 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	8912      	ldrh	r2, [r2, #8]
 8009730:	4293      	cmp	r3, r2
 8009732:	f0c0 808d 	bcc.w	8009850 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	61da      	str	r2, [r3, #28]
 800973c:	2304      	movs	r3, #4
 800973e:	e09a      	b.n	8009876 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	899b      	ldrh	r3, [r3, #12]
 8009744:	461a      	mov	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	fbb3 f3f2 	udiv	r3, r3, r2
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	8952      	ldrh	r2, [r2, #10]
 8009750:	3a01      	subs	r2, #1
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d17b      	bne.n	8009850 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7ff fc08 	bl	8008f76 <get_fat>
 8009766:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d801      	bhi.n	8009772 <dir_next+0xa0>
 800976e:	2302      	movs	r3, #2
 8009770:	e081      	b.n	8009876 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d101      	bne.n	800977e <dir_next+0xac>
 800977a:	2301      	movs	r3, #1
 800977c:	e07b      	b.n	8009876 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	429a      	cmp	r2, r3
 8009786:	d359      	bcc.n	800983c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	61da      	str	r2, [r3, #28]
 8009794:	2304      	movs	r3, #4
 8009796:	e06e      	b.n	8009876 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f7ff fe3d 	bl	8009420 <create_chain>
 80097a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <dir_next+0xe0>
 80097ae:	2307      	movs	r3, #7
 80097b0:	e061      	b.n	8009876 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <dir_next+0xea>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e05c      	b.n	8009876 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d101      	bne.n	80097c8 <dir_next+0xf6>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e056      	b.n	8009876 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7ff fad3 	bl	8008d74 <sync_window>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <dir_next+0x106>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e04e      	b.n	8009876 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	899b      	ldrh	r3, [r3, #12]
 80097e2:	461a      	mov	r2, r3
 80097e4:	2100      	movs	r1, #0
 80097e6:	f7ff f8fc 	bl	80089e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097ea:	2300      	movs	r3, #0
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	6979      	ldr	r1, [r7, #20]
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7ff fba1 	bl	8008f38 <clust2sect>
 80097f6:	4602      	mov	r2, r0
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	635a      	str	r2, [r3, #52]	; 0x34
 80097fc:	e012      	b.n	8009824 <dir_next+0x152>
						fs->wflag = 1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff fab5 	bl	8008d74 <sync_window>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <dir_next+0x142>
 8009810:	2301      	movs	r3, #1
 8009812:	e030      	b.n	8009876 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	3301      	adds	r3, #1
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	635a      	str	r2, [r3, #52]	; 0x34
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	895b      	ldrh	r3, [r3, #10]
 8009828:	461a      	mov	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	4293      	cmp	r3, r2
 800982e:	d3e6      	bcc.n	80097fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad2      	subs	r2, r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009842:	6979      	ldr	r1, [r7, #20]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff fb77 	bl	8008f38 <clust2sect>
 800984a:	4602      	mov	r2, r0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	899b      	ldrh	r3, [r3, #12]
 8009860:	461a      	mov	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	fbb3 f0f2 	udiv	r0, r3, r2
 8009868:	fb00 f202 	mul.w	r2, r0, r2
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	18ca      	adds	r2, r1, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b086      	sub	sp, #24
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800988e:	2100      	movs	r1, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fe95 	bl	80095c0 <dir_sdi>
 8009896:	4603      	mov	r3, r0
 8009898:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d12b      	bne.n	80098f8 <dir_alloc+0x7a>
		n = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	4619      	mov	r1, r3
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff faa6 	bl	8008dfc <move_window>
 80098b0:	4603      	mov	r3, r0
 80098b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d11d      	bne.n	80098f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2be5      	cmp	r3, #229	; 0xe5
 80098c2:	d004      	beq.n	80098ce <dir_alloc+0x50>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d107      	bne.n	80098de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d102      	bne.n	80098e2 <dir_alloc+0x64>
 80098dc:	e00c      	b.n	80098f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80098de:	2300      	movs	r3, #0
 80098e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80098e2:	2101      	movs	r1, #1
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff fef4 	bl	80096d2 <dir_next>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0d7      	beq.n	80098a4 <dir_alloc+0x26>
 80098f4:	e000      	b.n	80098f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80098f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d101      	bne.n	8009902 <dir_alloc+0x84>
 80098fe:	2307      	movs	r3, #7
 8009900:	75fb      	strb	r3, [r7, #23]
	return res;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	331a      	adds	r3, #26
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe ffbe 	bl	800889c <ld_word>
 8009920:	4603      	mov	r3, r0
 8009922:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b03      	cmp	r3, #3
 800992a:	d109      	bne.n	8009940 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	3314      	adds	r3, #20
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe ffb3 	bl	800889c <ld_word>
 8009936:	4603      	mov	r3, r0
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	331a      	adds	r3, #26
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	b292      	uxth	r2, r2
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe ffd6 	bl	8008912 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b03      	cmp	r3, #3
 800996c:	d109      	bne.n	8009982 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f103 0214 	add.w	r2, r3, #20
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	0c1b      	lsrs	r3, r3, #16
 8009978:	b29b      	uxth	r3, r3
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f7fe ffc8 	bl	8008912 <st_word>
	}
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	331a      	adds	r3, #26
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe ff7e 	bl	800889c <ld_word>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <cmp_lfn+0x1e>
 80099a6:	2300      	movs	r3, #0
 80099a8:	e059      	b.n	8009a5e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b2:	1e5a      	subs	r2, r3, #1
 80099b4:	4613      	mov	r3, r2
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80099c0:	2301      	movs	r3, #1
 80099c2:	81fb      	strh	r3, [r7, #14]
 80099c4:	2300      	movs	r3, #0
 80099c6:	613b      	str	r3, [r7, #16]
 80099c8:	e033      	b.n	8009a32 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80099ca:	4a27      	ldr	r2, [pc, #156]	; (8009a68 <cmp_lfn+0xdc>)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	4413      	add	r3, r2
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	4413      	add	r3, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe ff5f 	bl	800889c <ld_word>
 80099de:	4603      	mov	r3, r0
 80099e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01a      	beq.n	8009a1e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2bfe      	cmp	r3, #254	; 0xfe
 80099ec:	d812      	bhi.n	8009a14 <cmp_lfn+0x88>
 80099ee:	89bb      	ldrh	r3, [r7, #12]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f002 f82f 	bl	800ba54 <ff_wtoupper>
 80099f6:	4603      	mov	r3, r0
 80099f8:	461c      	mov	r4, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	617a      	str	r2, [r7, #20]
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 f823 	bl	800ba54 <ff_wtoupper>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	429c      	cmp	r4, r3
 8009a12:	d001      	beq.n	8009a18 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009a14:	2300      	movs	r3, #0
 8009a16:	e022      	b.n	8009a5e <cmp_lfn+0xd2>
			}
			wc = uc;
 8009a18:	89bb      	ldrh	r3, [r7, #12]
 8009a1a:	81fb      	strh	r3, [r7, #14]
 8009a1c:	e006      	b.n	8009a2c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009a1e:	89bb      	ldrh	r3, [r7, #12]
 8009a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d001      	beq.n	8009a2c <cmp_lfn+0xa0>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e018      	b.n	8009a5e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b0c      	cmp	r3, #12
 8009a36:	d9c8      	bls.n	80099ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <cmp_lfn+0xd0>
 8009a44:	89fb      	ldrh	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <cmp_lfn+0xd0>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <cmp_lfn+0xd0>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e000      	b.n	8009a5e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009a5c:	2301      	movs	r3, #1
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd90      	pop	{r4, r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800c670 	.word	0x0800c670

08009a6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4611      	mov	r1, r2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	71fb      	strb	r3, [r7, #7]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	330d      	adds	r3, #13
 8009a86:	79ba      	ldrb	r2, [r7, #6]
 8009a88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	330b      	adds	r3, #11
 8009a8e:	220f      	movs	r2, #15
 8009a90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	330c      	adds	r3, #12
 8009a96:	2200      	movs	r2, #0
 8009a98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	331a      	adds	r3, #26
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe ff36 	bl	8008912 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	1e5a      	subs	r2, r3, #1
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	82fb      	strh	r3, [r7, #22]
 8009aba:	2300      	movs	r3, #0
 8009abc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009abe:	8afb      	ldrh	r3, [r7, #22]
 8009ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d007      	beq.n	8009ad8 <put_lfn+0x6c>
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	61fa      	str	r2, [r7, #28]
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009ad8:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <put_lfn+0xcc>)
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	4413      	add	r3, r2
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	8afa      	ldrh	r2, [r7, #22]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe ff11 	bl	8008912 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009af0:	8afb      	ldrh	r3, [r7, #22]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <put_lfn+0x90>
 8009af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009afa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61bb      	str	r3, [r7, #24]
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	2b0c      	cmp	r3, #12
 8009b06:	d9da      	bls.n	8009abe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009b08:	8afb      	ldrh	r3, [r7, #22]
 8009b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d006      	beq.n	8009b20 <put_lfn+0xb4>
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <put_lfn+0xbc>
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	79fa      	ldrb	r2, [r7, #7]
 8009b2c:	701a      	strb	r2, [r3, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	0800c670 	.word	0x0800c670

08009b3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08c      	sub	sp, #48	; 0x30
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009b4a:	220b      	movs	r2, #11
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7fe ff26 	bl	80089a0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	d92b      	bls.n	8009bb2 <gen_numname+0x76>
		sr = seq;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009b5e:	e022      	b.n	8009ba6 <gen_numname+0x6a>
			wc = *lfn++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	1c9a      	adds	r2, r3, #2
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b6e:	e017      	b.n	8009ba0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	005a      	lsls	r2, r3, #1
 8009b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	4413      	add	r3, r2
 8009b7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b80:	085b      	lsrs	r3, r3, #1
 8009b82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <gen_numname+0x5e>
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009b94:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009b98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	2b0f      	cmp	r3, #15
 8009ba4:	d9e4      	bls.n	8009b70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1d8      	bne.n	8009b60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009bb2:	2307      	movs	r3, #7
 8009bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 030f 	and.w	r3, r3, #15
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	3330      	adds	r3, #48	; 0x30
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bca:	2b39      	cmp	r3, #57	; 0x39
 8009bcc:	d904      	bls.n	8009bd8 <gen_numname+0x9c>
 8009bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd2:	3307      	adds	r3, #7
 8009bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	1e5a      	subs	r2, r3, #1
 8009bdc:	62ba      	str	r2, [r7, #40]	; 0x28
 8009bde:	3330      	adds	r3, #48	; 0x30
 8009be0:	443b      	add	r3, r7
 8009be2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009be6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	091b      	lsrs	r3, r3, #4
 8009bee:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1df      	bne.n	8009bb6 <gen_numname+0x7a>
	ns[i] = '~';
 8009bf6:	f107 0214 	add.w	r2, r7, #20
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	4413      	add	r3, r2
 8009bfe:	227e      	movs	r2, #126	; 0x7e
 8009c00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
 8009c06:	e002      	b.n	8009c0e <gen_numname+0xd2>
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d205      	bcs.n	8009c22 <gen_numname+0xe6>
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	4413      	add	r3, r2
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d1f2      	bne.n	8009c08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	2b07      	cmp	r3, #7
 8009c26:	d807      	bhi.n	8009c38 <gen_numname+0xfc>
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c2e:	3330      	adds	r3, #48	; 0x30
 8009c30:	443b      	add	r3, r7
 8009c32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009c36:	e000      	b.n	8009c3a <gen_numname+0xfe>
 8009c38:	2120      	movs	r1, #32
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	460a      	mov	r2, r1
 8009c46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b07      	cmp	r3, #7
 8009c4c:	d9e9      	bls.n	8009c22 <gen_numname+0xe6>
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009c64:	230b      	movs	r3, #11
 8009c66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	0852      	lsrs	r2, r2, #1
 8009c6e:	01db      	lsls	r3, r3, #7
 8009c70:	4313      	orrs	r3, r2
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1c59      	adds	r1, r3, #1
 8009c78:	6079      	str	r1, [r7, #4]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	60bb      	str	r3, [r7, #8]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1ed      	bne.n	8009c68 <sum_sfn+0x10>
	return sum;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff fc88 	bl	80095c0 <dir_sdi>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <dir_find+0x24>
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	e0a9      	b.n	8009e12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009cbe:	23ff      	movs	r3, #255	; 0xff
 8009cc0:	753b      	strb	r3, [r7, #20]
 8009cc2:	7d3b      	ldrb	r3, [r7, #20]
 8009cc4:	757b      	strb	r3, [r7, #21]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ccc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6938      	ldr	r0, [r7, #16]
 8009cd6:	f7ff f891 	bl	8008dfc <move_window>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 8090 	bne.w	8009e06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009cee:	7dbb      	ldrb	r3, [r7, #22]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <dir_find+0x60>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	75fb      	strb	r3, [r7, #23]
 8009cf8:	e08a      	b.n	8009e10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	330b      	adds	r3, #11
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7bfa      	ldrb	r2, [r7, #15]
 8009d0c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009d0e:	7dbb      	ldrb	r3, [r7, #22]
 8009d10:	2be5      	cmp	r3, #229	; 0xe5
 8009d12:	d007      	beq.n	8009d24 <dir_find+0x8a>
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	f003 0308 	and.w	r3, r3, #8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <dir_find+0x98>
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b0f      	cmp	r3, #15
 8009d22:	d006      	beq.n	8009d32 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d24:	23ff      	movs	r3, #255	; 0xff
 8009d26:	757b      	strb	r3, [r7, #21]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8009d30:	e05e      	b.n	8009df0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2b0f      	cmp	r3, #15
 8009d36:	d136      	bne.n	8009da6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d154      	bne.n	8009df0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
 8009d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00d      	beq.n	8009d6c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	7b5b      	ldrb	r3, [r3, #13]
 8009d56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009d58:	7dbb      	ldrb	r3, [r7, #22]
 8009d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5e:	75bb      	strb	r3, [r7, #22]
 8009d60:	7dbb      	ldrb	r3, [r7, #22]
 8009d62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695a      	ldr	r2, [r3, #20]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009d6c:	7dba      	ldrb	r2, [r7, #22]
 8009d6e:	7d7b      	ldrb	r3, [r7, #21]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d115      	bne.n	8009da0 <dir_find+0x106>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	330d      	adds	r3, #13
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	7d3a      	ldrb	r2, [r7, #20]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d10e      	bne.n	8009da0 <dir_find+0x106>
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7ff fdfd 	bl	800998c <cmp_lfn>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <dir_find+0x106>
 8009d98:	7d7b      	ldrb	r3, [r7, #21]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	e000      	b.n	8009da2 <dir_find+0x108>
 8009da0:	23ff      	movs	r3, #255	; 0xff
 8009da2:	757b      	strb	r3, [r7, #21]
 8009da4:	e024      	b.n	8009df0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009da6:	7d7b      	ldrb	r3, [r7, #21]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d109      	bne.n	8009dc0 <dir_find+0x126>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff ff51 	bl	8009c58 <sum_sfn>
 8009db6:	4603      	mov	r3, r0
 8009db8:	461a      	mov	r2, r3
 8009dba:	7d3b      	ldrb	r3, [r7, #20]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d024      	beq.n	8009e0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <dir_find+0x14a>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a18      	ldr	r0, [r3, #32]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3324      	adds	r3, #36	; 0x24
 8009dd6:	220b      	movs	r2, #11
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f7fe fe1d 	bl	8008a18 <mem_cmp>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d014      	beq.n	8009e0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009de4:	23ff      	movs	r3, #255	; 0xff
 8009de6:	757b      	strb	r3, [r7, #21]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295
 8009dee:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fc6d 	bl	80096d2 <dir_next>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f43f af65 	beq.w	8009cce <dir_find+0x34>
 8009e04:	e004      	b.n	8009e10 <dir_find+0x176>
		if (res != FR_OK) break;
 8009e06:	bf00      	nop
 8009e08:	e002      	b.n	8009e10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e0a:	bf00      	nop
 8009e0c:	e000      	b.n	8009e10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e0e:	bf00      	nop

	return res;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08c      	sub	sp, #48	; 0x30
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <dir_register+0x20>
 8009e38:	2306      	movs	r3, #6
 8009e3a:	e0e0      	b.n	8009ffe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e40:	e002      	b.n	8009e48 <dir_register+0x2c>
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	3301      	adds	r3, #1
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	4413      	add	r3, r2
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1f4      	bne.n	8009e42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009e5e:	f107 030c 	add.w	r3, r7, #12
 8009e62:	220c      	movs	r2, #12
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe fd9b 	bl	80089a0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d032      	beq.n	8009eda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2240      	movs	r2, #64	; 0x40
 8009e78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e80:	e016      	b.n	8009eb0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	f107 010c 	add.w	r1, r7, #12
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	f7ff fe53 	bl	8009b3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff feff 	bl	8009c9a <dir_find>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	3301      	adds	r3, #1
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	2b63      	cmp	r3, #99	; 0x63
 8009eb4:	d9e5      	bls.n	8009e82 <dir_register+0x66>
 8009eb6:	e000      	b.n	8009eba <dir_register+0x9e>
			if (res != FR_OK) break;
 8009eb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	2b64      	cmp	r3, #100	; 0x64
 8009ebe:	d101      	bne.n	8009ec4 <dir_register+0xa8>
 8009ec0:	2307      	movs	r3, #7
 8009ec2:	e09c      	b.n	8009ffe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d002      	beq.n	8009ed2 <dir_register+0xb6>
 8009ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed0:	e095      	b.n	8009ffe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009ed2:	7dfa      	ldrb	r2, [r7, #23]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d007      	beq.n	8009ef4 <dir_register+0xd8>
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	4a47      	ldr	r2, [pc, #284]	; (800a008 <dir_register+0x1ec>)
 8009eea:	fba2 2303 	umull	r2, r3, r2, r3
 8009eee:	089b      	lsrs	r3, r3, #2
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <dir_register+0xda>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ef8:	6a39      	ldr	r1, [r7, #32]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fcbf 	bl	800987e <dir_alloc>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d148      	bne.n	8009fa0 <dir_register+0x184>
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	623b      	str	r3, [r7, #32]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d042      	beq.n	8009fa0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	695a      	ldr	r2, [r3, #20]
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	015b      	lsls	r3, r3, #5
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff fb4a 	bl	80095c0 <dir_sdi>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d132      	bne.n	8009fa0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3324      	adds	r3, #36	; 0x24
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fe8a 	bl	8009c58 <sum_sfn>
 8009f44:	4603      	mov	r3, r0
 8009f46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	69f8      	ldr	r0, [r7, #28]
 8009f50:	f7fe ff54 	bl	8008dfc <move_window>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d11d      	bne.n	8009f9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	6918      	ldr	r0, [r3, #16]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a19      	ldr	r1, [r3, #32]
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	7efb      	ldrb	r3, [r7, #27]
 8009f70:	f7ff fd7c 	bl	8009a6c <put_lfn>
				fs->wflag = 1;
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	2201      	movs	r2, #1
 8009f78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff fba8 	bl	80096d2 <dir_next>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009f88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d107      	bne.n	8009fa0 <dir_register+0x184>
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	623b      	str	r3, [r7, #32]
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1d5      	bne.n	8009f48 <dir_register+0x12c>
 8009f9c:	e000      	b.n	8009fa0 <dir_register+0x184>
				if (res != FR_OK) break;
 8009f9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d128      	bne.n	8009ffa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	4619      	mov	r1, r3
 8009fae:	69f8      	ldr	r0, [r7, #28]
 8009fb0:	f7fe ff24 	bl	8008dfc <move_window>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11b      	bne.n	8009ffa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fd09 	bl	80089e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a18      	ldr	r0, [r3, #32]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	220b      	movs	r2, #11
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f7fe fce0 	bl	80089a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	330c      	adds	r3, #12
 8009fec:	f002 0218 	and.w	r2, r2, #24
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3730      	adds	r7, #48	; 0x30
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	4ec4ec4f 	.word	0x4ec4ec4f

0800a00c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	; 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	613b      	str	r3, [r7, #16]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	61ba      	str	r2, [r7, #24]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4413      	add	r3, r2
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a03c:	2b1f      	cmp	r3, #31
 800a03e:	d940      	bls.n	800a0c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a042:	2b2f      	cmp	r3, #47	; 0x2f
 800a044:	d006      	beq.n	800a054 <create_name+0x48>
 800a046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a048:	2b5c      	cmp	r3, #92	; 0x5c
 800a04a:	d110      	bne.n	800a06e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a04c:	e002      	b.n	800a054 <create_name+0x48>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	3301      	adds	r3, #1
 800a052:	61bb      	str	r3, [r7, #24]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	4413      	add	r3, r2
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b2f      	cmp	r3, #47	; 0x2f
 800a05e:	d0f6      	beq.n	800a04e <create_name+0x42>
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	4413      	add	r3, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b5c      	cmp	r3, #92	; 0x5c
 800a06a:	d0f0      	beq.n	800a04e <create_name+0x42>
			break;
 800a06c:	e02a      	b.n	800a0c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2bfe      	cmp	r3, #254	; 0xfe
 800a072:	d901      	bls.n	800a078 <create_name+0x6c>
 800a074:	2306      	movs	r3, #6
 800a076:	e17d      	b.n	800a374 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a080:	2101      	movs	r1, #1
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fcaa 	bl	800b9dc <ff_convert>
 800a088:	4603      	mov	r3, r0
 800a08a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <create_name+0x8a>
 800a092:	2306      	movs	r3, #6
 800a094:	e16e      	b.n	800a374 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a098:	2b7f      	cmp	r3, #127	; 0x7f
 800a09a:	d809      	bhi.n	800a0b0 <create_name+0xa4>
 800a09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a09e:	4619      	mov	r1, r3
 800a0a0:	488d      	ldr	r0, [pc, #564]	; (800a2d8 <create_name+0x2cc>)
 800a0a2:	f7fe fce0 	bl	8008a66 <chk_chr>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <create_name+0xa4>
 800a0ac:	2306      	movs	r3, #6
 800a0ae:	e161      	b.n	800a374 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	617a      	str	r2, [r7, #20]
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a0c0:	e7b4      	b.n	800a02c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a0c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	441a      	add	r2, r3
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d0:	2b1f      	cmp	r3, #31
 800a0d2:	d801      	bhi.n	800a0d8 <create_name+0xcc>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	e000      	b.n	800a0da <create_name+0xce>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a0de:	e011      	b.n	800a104 <create_name+0xf8>
		w = lfn[di - 1];
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d002      	beq.n	800a0fe <create_name+0xf2>
 800a0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fc:	d106      	bne.n	800a10c <create_name+0x100>
		di--;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	3b01      	subs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1ea      	bne.n	800a0e0 <create_name+0xd4>
 800a10a:	e000      	b.n	800a10e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a10c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	2200      	movs	r2, #0
 800a118:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <create_name+0x118>
 800a120:	2306      	movs	r3, #6
 800a122:	e127      	b.n	800a374 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3324      	adds	r3, #36	; 0x24
 800a128:	220b      	movs	r2, #11
 800a12a:	2120      	movs	r1, #32
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fc58 	bl	80089e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a132:	2300      	movs	r3, #0
 800a134:	61bb      	str	r3, [r7, #24]
 800a136:	e002      	b.n	800a13e <create_name+0x132>
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	3301      	adds	r3, #1
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d0f5      	beq.n	800a138 <create_name+0x12c>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	2b2e      	cmp	r3, #46	; 0x2e
 800a158:	d0ee      	beq.n	800a138 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <create_name+0x168>
 800a160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a164:	f043 0303 	orr.w	r3, r3, #3
 800a168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a16c:	e002      	b.n	800a174 <create_name+0x168>
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	3b01      	subs	r3, #1
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <create_name+0x182>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a180:	3b01      	subs	r3, #1
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	2b2e      	cmp	r3, #46	; 0x2e
 800a18c:	d1ef      	bne.n	800a16e <create_name+0x162>

	i = b = 0; ni = 8;
 800a18e:	2300      	movs	r3, #0
 800a190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a194:	2300      	movs	r3, #0
 800a196:	623b      	str	r3, [r7, #32]
 800a198:	2308      	movs	r3, #8
 800a19a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	61ba      	str	r2, [r7, #24]
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 8090 	beq.w	800a2d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d006      	beq.n	800a1c8 <create_name+0x1bc>
 800a1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1be:	d10a      	bne.n	800a1d6 <create_name+0x1ca>
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d006      	beq.n	800a1d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1cc:	f043 0303 	orr.w	r3, r3, #3
 800a1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1d4:	e07d      	b.n	800a2d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d203      	bcs.n	800a1e6 <create_name+0x1da>
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d123      	bne.n	800a22e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	2b0b      	cmp	r3, #11
 800a1ea:	d106      	bne.n	800a1fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1f0:	f043 0303 	orr.w	r3, r3, #3
 800a1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1f8:	e075      	b.n	800a2e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d005      	beq.n	800a20e <create_name+0x202>
 800a202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a206:	f043 0303 	orr.w	r3, r3, #3
 800a20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	429a      	cmp	r2, r3
 800a214:	d866      	bhi.n	800a2e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	2308      	movs	r3, #8
 800a21c:	623b      	str	r3, [r7, #32]
 800a21e:	230b      	movs	r3, #11
 800a220:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a22c:	e051      	b.n	800a2d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a230:	2b7f      	cmp	r3, #127	; 0x7f
 800a232:	d914      	bls.n	800a25e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a236:	2100      	movs	r1, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fbcf 	bl	800b9dc <ff_convert>
 800a23e:	4603      	mov	r3, r0
 800a240:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <create_name+0x246>
 800a248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a24a:	3b80      	subs	r3, #128	; 0x80
 800a24c:	4a23      	ldr	r2, [pc, #140]	; (800a2dc <create_name+0x2d0>)
 800a24e:	5cd3      	ldrb	r3, [r2, r3]
 800a250:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a256:	f043 0302 	orr.w	r3, r3, #2
 800a25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a25e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <create_name+0x268>
 800a264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a266:	4619      	mov	r1, r3
 800a268:	481d      	ldr	r0, [pc, #116]	; (800a2e0 <create_name+0x2d4>)
 800a26a:	f7fe fbfc 	bl	8008a66 <chk_chr>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d008      	beq.n	800a286 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a274:	235f      	movs	r3, #95	; 0x5f
 800a276:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a27c:	f043 0303 	orr.w	r3, r3, #3
 800a280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a284:	e01b      	b.n	800a2be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a288:	2b40      	cmp	r3, #64	; 0x40
 800a28a:	d909      	bls.n	800a2a0 <create_name+0x294>
 800a28c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a28e:	2b5a      	cmp	r3, #90	; 0x5a
 800a290:	d806      	bhi.n	800a2a0 <create_name+0x294>
					b |= 2;
 800a292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a296:	f043 0302 	orr.w	r3, r3, #2
 800a29a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a29e:	e00e      	b.n	800a2be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a2a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2a2:	2b60      	cmp	r3, #96	; 0x60
 800a2a4:	d90b      	bls.n	800a2be <create_name+0x2b2>
 800a2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2a8:	2b7a      	cmp	r3, #122	; 0x7a
 800a2aa:	d808      	bhi.n	800a2be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a2ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2b0:	f043 0301 	orr.w	r3, r3, #1
 800a2b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ba:	3b20      	subs	r3, #32
 800a2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	623a      	str	r2, [r7, #32]
 800a2c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2c6:	b2d1      	uxtb	r1, r2
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a2d2:	e763      	b.n	800a19c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a2d4:	bf00      	nop
 800a2d6:	e006      	b.n	800a2e6 <create_name+0x2da>
 800a2d8:	0800c568 	.word	0x0800c568
 800a2dc:	0800c5f0 	.word	0x0800c5f0
 800a2e0:	0800c574 	.word	0x0800c574
			if (si > di) break;			/* No extension */
 800a2e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2ec:	2be5      	cmp	r3, #229	; 0xe5
 800a2ee:	d103      	bne.n	800a2f8 <create_name+0x2ec>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2205      	movs	r2, #5
 800a2f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b08      	cmp	r3, #8
 800a2fc:	d104      	bne.n	800a308 <create_name+0x2fc>
 800a2fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a30c:	f003 030c 	and.w	r3, r3, #12
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d005      	beq.n	800a320 <create_name+0x314>
 800a314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	d105      	bne.n	800a32c <create_name+0x320>
 800a320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a324:	f043 0302 	orr.w	r3, r3, #2
 800a328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	f003 0302 	and.w	r3, r3, #2
 800a334:	2b00      	cmp	r3, #0
 800a336:	d117      	bne.n	800a368 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	2b01      	cmp	r3, #1
 800a342:	d105      	bne.n	800a350 <create_name+0x344>
 800a344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a348:	f043 0310 	orr.w	r3, r3, #16
 800a34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a354:	f003 030c 	and.w	r3, r3, #12
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d105      	bne.n	800a368 <create_name+0x35c>
 800a35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a360:	f043 0308 	orr.w	r3, r3, #8
 800a364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a36e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a372:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a374:	4618      	mov	r0, r3
 800a376:	3728      	adds	r7, #40	; 0x28
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a390:	e002      	b.n	800a398 <follow_path+0x1c>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b2f      	cmp	r3, #47	; 0x2f
 800a39e:	d0f8      	beq.n	800a392 <follow_path+0x16>
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b5c      	cmp	r3, #92	; 0x5c
 800a3a6:	d0f4      	beq.n	800a392 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b1f      	cmp	r3, #31
 800a3b4:	d80a      	bhi.n	800a3cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2280      	movs	r2, #128	; 0x80
 800a3ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff f8fd 	bl	80095c0 <dir_sdi>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]
 800a3ca:	e048      	b.n	800a45e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff fe1b 	bl	800a00c <create_name>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d139      	bne.n	800a454 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff fc5a 	bl	8009c9a <dir_find>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d12c      	bne.n	800a458 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b00      	cmp	r3, #0
 800a406:	d127      	bne.n	800a458 <follow_path+0xdc>
 800a408:	2305      	movs	r3, #5
 800a40a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a40c:	e024      	b.n	800a458 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d121      	bne.n	800a45c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	799b      	ldrb	r3, [r3, #6]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a424:	2305      	movs	r3, #5
 800a426:	75fb      	strb	r3, [r7, #23]
 800a428:	e019      	b.n	800a45e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	8992      	ldrh	r2, [r2, #12]
 800a438:	fbb3 f0f2 	udiv	r0, r3, r2
 800a43c:	fb00 f202 	mul.w	r2, r0, r2
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	440b      	add	r3, r1
 800a444:	4619      	mov	r1, r3
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fa60 	bl	800990c <ld_clust>
 800a44c:	4602      	mov	r2, r0
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a452:	e7bb      	b.n	800a3cc <follow_path+0x50>
			if (res != FR_OK) break;
 800a454:	bf00      	nop
 800a456:	e002      	b.n	800a45e <follow_path+0xe2>
				break;
 800a458:	bf00      	nop
 800a45a:	e000      	b.n	800a45e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a45c:	bf00      	nop
			}
		}
	}

	return res;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d031      	beq.n	800a4e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e002      	b.n	800a48c <get_ldnumber+0x24>
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	3301      	adds	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b1f      	cmp	r3, #31
 800a492:	d903      	bls.n	800a49c <get_ldnumber+0x34>
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b3a      	cmp	r3, #58	; 0x3a
 800a49a:	d1f4      	bne.n	800a486 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b3a      	cmp	r3, #58	; 0x3a
 800a4a2:	d11c      	bne.n	800a4de <get_ldnumber+0x76>
			tp = *path;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	60fa      	str	r2, [r7, #12]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	3b30      	subs	r3, #48	; 0x30
 800a4b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b09      	cmp	r3, #9
 800a4ba:	d80e      	bhi.n	800a4da <get_ldnumber+0x72>
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d10a      	bne.n	800a4da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d107      	bne.n	800a4da <get_ldnumber+0x72>
					vol = (int)i;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	e002      	b.n	800a4e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4e2:	693b      	ldr	r3, [r7, #16]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	70da      	strb	r2, [r3, #3]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f04f 32ff 	mov.w	r2, #4294967295
 800a506:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7fe fc76 	bl	8008dfc <move_window>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <check_fs+0x2a>
 800a516:	2304      	movs	r3, #4
 800a518:	e038      	b.n	800a58c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3338      	adds	r3, #56	; 0x38
 800a51e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe f9ba 	bl	800889c <ld_word>
 800a528:	4603      	mov	r3, r0
 800a52a:	461a      	mov	r2, r3
 800a52c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a530:	429a      	cmp	r2, r3
 800a532:	d001      	beq.n	800a538 <check_fs+0x48>
 800a534:	2303      	movs	r3, #3
 800a536:	e029      	b.n	800a58c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a53e:	2be9      	cmp	r3, #233	; 0xe9
 800a540:	d009      	beq.n	800a556 <check_fs+0x66>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a548:	2beb      	cmp	r3, #235	; 0xeb
 800a54a:	d11e      	bne.n	800a58a <check_fs+0x9a>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a552:	2b90      	cmp	r3, #144	; 0x90
 800a554:	d119      	bne.n	800a58a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3338      	adds	r3, #56	; 0x38
 800a55a:	3336      	adds	r3, #54	; 0x36
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe f9b5 	bl	80088cc <ld_dword>
 800a562:	4603      	mov	r3, r0
 800a564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a568:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <check_fs+0xa4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d101      	bne.n	800a572 <check_fs+0x82>
 800a56e:	2300      	movs	r3, #0
 800a570:	e00c      	b.n	800a58c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3338      	adds	r3, #56	; 0x38
 800a576:	3352      	adds	r3, #82	; 0x52
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe f9a7 	bl	80088cc <ld_dword>
 800a57e:	4603      	mov	r3, r0
 800a580:	4a05      	ldr	r2, [pc, #20]	; (800a598 <check_fs+0xa8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d101      	bne.n	800a58a <check_fs+0x9a>
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a58a:	2302      	movs	r3, #2
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	00544146 	.word	0x00544146
 800a598:	33544146 	.word	0x33544146

0800a59c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b096      	sub	sp, #88	; 0x58
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff ff59 	bl	800a468 <get_ldnumber>
 800a5b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da01      	bge.n	800a5c2 <find_volume+0x26>
 800a5be:	230b      	movs	r3, #11
 800a5c0:	e265      	b.n	800aa8e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5c2:	4a9f      	ldr	r2, [pc, #636]	; (800a840 <find_volume+0x2a4>)
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <find_volume+0x3a>
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	e25b      	b.n	800aa8e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f023 0301 	bic.w	r3, r3, #1
 800a5e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01a      	beq.n	800a622 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe f8b5 	bl	8008760 <disk_status>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10c      	bne.n	800a622 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a608:	79fb      	ldrb	r3, [r7, #7]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d007      	beq.n	800a61e <find_volume+0x82>
 800a60e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a612:	f003 0304 	and.w	r3, r3, #4
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a61a:	230a      	movs	r3, #10
 800a61c:	e237      	b.n	800aa8e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a61e:	2300      	movs	r3, #0
 800a620:	e235      	b.n	800aa8e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe f8ad 	bl	8008794 <disk_initialize>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a64c:	2303      	movs	r3, #3
 800a64e:	e21e      	b.n	800aa8e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <find_volume+0xca>
 800a656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a662:	230a      	movs	r3, #10
 800a664:	e213      	b.n	800aa8e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	7858      	ldrb	r0, [r3, #1]
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	330c      	adds	r3, #12
 800a66e:	461a      	mov	r2, r3
 800a670:	2102      	movs	r1, #2
 800a672:	f7fe f8f5 	bl	8008860 <disk_ioctl>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <find_volume+0xe4>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e206      	b.n	800aa8e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	899b      	ldrh	r3, [r3, #12]
 800a684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a688:	d80d      	bhi.n	800a6a6 <find_volume+0x10a>
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	899b      	ldrh	r3, [r3, #12]
 800a68e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a692:	d308      	bcc.n	800a6a6 <find_volume+0x10a>
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	899b      	ldrh	r3, [r3, #12]
 800a698:	461a      	mov	r2, r3
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	899b      	ldrh	r3, [r3, #12]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <find_volume+0x10e>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e1f1      	b.n	800aa8e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b2:	f7ff ff1d 	bl	800a4f0 <check_fs>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d149      	bne.n	800a758 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6c8:	e01e      	b.n	800a708 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6d8:	4413      	add	r3, r2
 800a6da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	3304      	adds	r3, #4
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <find_volume+0x158>
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe f8ee 	bl	80088cc <ld_dword>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	e000      	b.n	800a6f6 <find_volume+0x15a>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	3358      	adds	r3, #88	; 0x58
 800a6fc:	443b      	add	r3, r7
 800a6fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a704:	3301      	adds	r3, #1
 800a706:	643b      	str	r3, [r7, #64]	; 0x40
 800a708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d9dd      	bls.n	800a6ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a70e:	2300      	movs	r3, #0
 800a710:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <find_volume+0x182>
 800a718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71a:	3b01      	subs	r3, #1
 800a71c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	3358      	adds	r3, #88	; 0x58
 800a724:	443b      	add	r3, r7
 800a726:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a72a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <find_volume+0x1a2>
 800a732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a736:	f7ff fedb 	bl	800a4f0 <check_fs>
 800a73a:	4603      	mov	r3, r0
 800a73c:	e000      	b.n	800a740 <find_volume+0x1a4>
 800a73e:	2303      	movs	r3, #3
 800a740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d905      	bls.n	800a758 <find_volume+0x1bc>
 800a74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74e:	3301      	adds	r3, #1
 800a750:	643b      	str	r3, [r7, #64]	; 0x40
 800a752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a754:	2b03      	cmp	r3, #3
 800a756:	d9e2      	bls.n	800a71e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d101      	bne.n	800a764 <find_volume+0x1c8>
 800a760:	2301      	movs	r3, #1
 800a762:	e194      	b.n	800aa8e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d901      	bls.n	800a770 <find_volume+0x1d4>
 800a76c:	230d      	movs	r3, #13
 800a76e:	e18e      	b.n	800aa8e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	3338      	adds	r3, #56	; 0x38
 800a774:	330b      	adds	r3, #11
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe f890 	bl	800889c <ld_word>
 800a77c:	4603      	mov	r3, r0
 800a77e:	461a      	mov	r2, r3
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	899b      	ldrh	r3, [r3, #12]
 800a784:	429a      	cmp	r2, r3
 800a786:	d001      	beq.n	800a78c <find_volume+0x1f0>
 800a788:	230d      	movs	r3, #13
 800a78a:	e180      	b.n	800aa8e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	3338      	adds	r3, #56	; 0x38
 800a790:	3316      	adds	r3, #22
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe f882 	bl	800889c <ld_word>
 800a798:	4603      	mov	r3, r0
 800a79a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a79c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <find_volume+0x214>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	3338      	adds	r3, #56	; 0x38
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe f88f 	bl	80088cc <ld_dword>
 800a7ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7b4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	789b      	ldrb	r3, [r3, #2]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d005      	beq.n	800a7d4 <find_volume+0x238>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	789b      	ldrb	r3, [r3, #2]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d001      	beq.n	800a7d4 <find_volume+0x238>
 800a7d0:	230d      	movs	r3, #13
 800a7d2:	e15c      	b.n	800aa8e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	789b      	ldrb	r3, [r3, #2]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	895b      	ldrh	r3, [r3, #10]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <find_volume+0x26c>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	895b      	ldrh	r3, [r3, #10]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	895b      	ldrh	r3, [r3, #10]
 800a800:	3b01      	subs	r3, #1
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <find_volume+0x270>
 800a808:	230d      	movs	r3, #13
 800a80a:	e140      	b.n	800aa8e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	3338      	adds	r3, #56	; 0x38
 800a810:	3311      	adds	r3, #17
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe f842 	bl	800889c <ld_word>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	891b      	ldrh	r3, [r3, #8]
 800a824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a826:	8992      	ldrh	r2, [r2, #12]
 800a828:	0952      	lsrs	r2, r2, #5
 800a82a:	b292      	uxth	r2, r2
 800a82c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a830:	fb01 f202 	mul.w	r2, r1, r2
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <find_volume+0x2a8>
 800a83c:	230d      	movs	r3, #13
 800a83e:	e126      	b.n	800aa8e <find_volume+0x4f2>
 800a840:	20002304 	.word	0x20002304

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	3338      	adds	r3, #56	; 0x38
 800a848:	3313      	adds	r3, #19
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe f826 	bl	800889c <ld_word>
 800a850:	4603      	mov	r3, r0
 800a852:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <find_volume+0x2cc>
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	3338      	adds	r3, #56	; 0x38
 800a85e:	3320      	adds	r3, #32
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe f833 	bl	80088cc <ld_dword>
 800a866:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	3338      	adds	r3, #56	; 0x38
 800a86c:	330e      	adds	r3, #14
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe f814 	bl	800889c <ld_word>
 800a874:	4603      	mov	r3, r0
 800a876:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a878:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <find_volume+0x2e6>
 800a87e:	230d      	movs	r3, #13
 800a880:	e105      	b.n	800aa8e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a882:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a886:	4413      	add	r3, r2
 800a888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88a:	8911      	ldrh	r1, [r2, #8]
 800a88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88e:	8992      	ldrh	r2, [r2, #12]
 800a890:	0952      	lsrs	r2, r2, #5
 800a892:	b292      	uxth	r2, r2
 800a894:	fbb1 f2f2 	udiv	r2, r1, r2
 800a898:	b292      	uxth	r2, r2
 800a89a:	4413      	add	r3, r2
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a89e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d201      	bcs.n	800a8aa <find_volume+0x30e>
 800a8a6:	230d      	movs	r3, #13
 800a8a8:	e0f1      	b.n	800aa8e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b2:	8952      	ldrh	r2, [r2, #10]
 800a8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <find_volume+0x328>
 800a8c0:	230d      	movs	r3, #13
 800a8c2:	e0e4      	b.n	800aa8e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d802      	bhi.n	800a8da <find_volume+0x33e>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d802      	bhi.n	800a8ea <find_volume+0x34e>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	1c9a      	adds	r2, r3, #2
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fc:	441a      	add	r2, r3
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a902:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	441a      	add	r2, r3
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a90c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a910:	2b03      	cmp	r3, #3
 800a912:	d11e      	bne.n	800a952 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	3338      	adds	r3, #56	; 0x38
 800a918:	332a      	adds	r3, #42	; 0x2a
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fd ffbe 	bl	800889c <ld_word>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <find_volume+0x38e>
 800a926:	230d      	movs	r3, #13
 800a928:	e0b1      	b.n	800aa8e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	891b      	ldrh	r3, [r3, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <find_volume+0x39a>
 800a932:	230d      	movs	r3, #13
 800a934:	e0ab      	b.n	800aa8e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	3338      	adds	r3, #56	; 0x38
 800a93a:	332c      	adds	r3, #44	; 0x2c
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fd ffc5 	bl	80088cc <ld_dword>
 800a942:	4602      	mov	r2, r0
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	647b      	str	r3, [r7, #68]	; 0x44
 800a950:	e01f      	b.n	800a992 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	891b      	ldrh	r3, [r3, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <find_volume+0x3c2>
 800a95a:	230d      	movs	r3, #13
 800a95c:	e097      	b.n	800aa8e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a964:	441a      	add	r2, r3
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a96a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d103      	bne.n	800a97a <find_volume+0x3de>
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	e00a      	b.n	800a990 <find_volume+0x3f4>
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	69da      	ldr	r2, [r3, #28]
 800a97e:	4613      	mov	r3, r2
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	4413      	add	r3, r2
 800a984:	085a      	lsrs	r2, r3, #1
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a990:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	6a1a      	ldr	r2, [r3, #32]
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	899b      	ldrh	r3, [r3, #12]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99e:	440b      	add	r3, r1
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9a4:	8989      	ldrh	r1, [r1, #12]
 800a9a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d201      	bcs.n	800a9b2 <find_volume+0x416>
 800a9ae:	230d      	movs	r3, #13
 800a9b0:	e06d      	b.n	800aa8e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b8:	619a      	str	r2, [r3, #24]
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	2280      	movs	r2, #128	; 0x80
 800a9c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d149      	bne.n	800aa64 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	3338      	adds	r3, #56	; 0x38
 800a9d4:	3330      	adds	r3, #48	; 0x30
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fd ff60 	bl	800889c <ld_word>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d140      	bne.n	800aa64 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9ea:	f7fe fa07 	bl	8008dfc <move_window>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d137      	bne.n	800aa64 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	3338      	adds	r3, #56	; 0x38
 800a9fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fd ff4a 	bl	800889c <ld_word>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d127      	bne.n	800aa64 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	3338      	adds	r3, #56	; 0x38
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fd ff57 	bl	80088cc <ld_dword>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4a1d      	ldr	r2, [pc, #116]	; (800aa98 <find_volume+0x4fc>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d11e      	bne.n	800aa64 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	3338      	adds	r3, #56	; 0x38
 800aa2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fd ff4c 	bl	80088cc <ld_dword>
 800aa34:	4603      	mov	r3, r0
 800aa36:	4a19      	ldr	r2, [pc, #100]	; (800aa9c <find_volume+0x500>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d113      	bne.n	800aa64 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	3338      	adds	r3, #56	; 0x38
 800aa40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fd ff41 	bl	80088cc <ld_dword>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa52:	3338      	adds	r3, #56	; 0x38
 800aa54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fd ff37 	bl	80088cc <ld_dword>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <find_volume+0x504>)
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	3301      	adds	r3, #1
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <find_volume+0x504>)
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <find_volume+0x504>)
 800aa7a:	881a      	ldrh	r2, [r3, #0]
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <find_volume+0x508>)
 800aa84:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa88:	f7fe f950 	bl	8008d2c <clear_lock>
#endif
	return FR_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3758      	adds	r7, #88	; 0x58
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	41615252 	.word	0x41615252
 800aa9c:	61417272 	.word	0x61417272
 800aaa0:	20002308 	.word	0x20002308
 800aaa4:	2000232c 	.word	0x2000232c

0800aaa8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aab2:	2309      	movs	r3, #9
 800aab4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01c      	beq.n	800aaf6 <validate+0x4e>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d018      	beq.n	800aaf6 <validate+0x4e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d013      	beq.n	800aaf6 <validate+0x4e>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	889a      	ldrh	r2, [r3, #4]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d10c      	bne.n	800aaf6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fd fe3c 	bl	8008760 <disk_status>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <validate+0x4e>
			res = FR_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <validate+0x5a>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	e000      	b.n	800ab04 <validate+0x5c>
 800ab02:	2300      	movs	r3, #0
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	6013      	str	r3, [r2, #0]
	return res;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab26:	f107 0310 	add.w	r3, r7, #16
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fc9c 	bl	800a468 <get_ldnumber>
 800ab30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da01      	bge.n	800ab3c <f_mount+0x28>
 800ab38:	230b      	movs	r3, #11
 800ab3a:	e02b      	b.n	800ab94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab3c:	4a17      	ldr	r2, [pc, #92]	; (800ab9c <f_mount+0x88>)
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab4c:	69b8      	ldr	r0, [r7, #24]
 800ab4e:	f7fe f8ed 	bl	8008d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	490d      	ldr	r1, [pc, #52]	; (800ab9c <f_mount+0x88>)
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <f_mount+0x66>
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d001      	beq.n	800ab7e <f_mount+0x6a>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e00a      	b.n	800ab94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab7e:	f107 010c 	add.w	r1, r7, #12
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	2200      	movs	r2, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff fd07 	bl	800a59c <find_volume>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20002304 	.word	0x20002304

0800aba0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b09a      	sub	sp, #104	; 0x68
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <f_open+0x18>
 800abb4:	2309      	movs	r3, #9
 800abb6:	e1bb      	b.n	800af30 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800abc0:	79fa      	ldrb	r2, [r7, #7]
 800abc2:	f107 0114 	add.w	r1, r7, #20
 800abc6:	f107 0308 	add.w	r3, r7, #8
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fce6 	bl	800a59c <find_volume>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800abd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f040 819f 	bne.w	800af1e <f_open+0x37e>
		dj.obj.fs = fs;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	f107 0318 	add.w	r3, r7, #24
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fbc5 	bl	800a37c <follow_path>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d11a      	bne.n	800ac36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	da03      	bge.n	800ac12 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac0a:	2306      	movs	r3, #6
 800ac0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac10:	e011      	b.n	800ac36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	f023 0301 	bic.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bf14      	ite	ne
 800ac1c:	2301      	movne	r3, #1
 800ac1e:	2300      	moveq	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	f107 0318 	add.w	r3, r7, #24
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fd ff36 	bl	8008a9c <chk_lock>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	f003 031c 	and.w	r3, r3, #28
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d07f      	beq.n	800ad40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d017      	beq.n	800ac78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d10e      	bne.n	800ac6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac50:	f7fd ff80 	bl	8008b54 <enq_lock>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <f_open+0xc8>
 800ac5a:	f107 0318 	add.w	r3, r7, #24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff f8dc 	bl	8009e1c <dir_register>
 800ac64:	4603      	mov	r3, r0
 800ac66:	e000      	b.n	800ac6a <f_open+0xca>
 800ac68:	2312      	movs	r3, #18
 800ac6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	f043 0308 	orr.w	r3, r3, #8
 800ac74:	71fb      	strb	r3, [r7, #7]
 800ac76:	e010      	b.n	800ac9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac78:	7fbb      	ldrb	r3, [r7, #30]
 800ac7a:	f003 0311 	and.w	r3, r3, #17
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <f_open+0xea>
					res = FR_DENIED;
 800ac82:	2307      	movs	r3, #7
 800ac84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac88:	e007      	b.n	800ac9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <f_open+0xfa>
 800ac94:	2308      	movs	r3, #8
 800ac96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d168      	bne.n	800ad74 <f_open+0x1d4>
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d063      	beq.n	800ad74 <f_open+0x1d4>
				dw = GET_FATTIME();
 800acac:	f7fd fcfa 	bl	80086a4 <get_fattime>
 800acb0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	330e      	adds	r3, #14
 800acb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fd fe45 	bl	8008948 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	3316      	adds	r3, #22
 800acc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fd fe3f 	bl	8008948 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	330b      	adds	r3, #11
 800acce:	2220      	movs	r2, #32
 800acd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe fe17 	bl	800990c <ld_clust>
 800acde:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ace4:	2200      	movs	r2, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe fe2f 	bl	800994a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	331c      	adds	r3, #28
 800acf0:	2100      	movs	r1, #0
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd fe28 	bl	8008948 <st_dword>
					fs->wflag = 1;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2201      	movs	r2, #1
 800acfc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800acfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d037      	beq.n	800ad74 <f_open+0x1d4>
						dw = fs->winsect;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad08:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ad0a:	f107 0318 	add.w	r3, r7, #24
 800ad0e:	2200      	movs	r2, #0
 800ad10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fb1f 	bl	8009356 <remove_chain>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ad1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d126      	bne.n	800ad74 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe f866 	bl	8008dfc <move_window>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad3a:	3a01      	subs	r2, #1
 800ad3c:	615a      	str	r2, [r3, #20]
 800ad3e:	e019      	b.n	800ad74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d115      	bne.n	800ad74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad48:	7fbb      	ldrb	r3, [r7, #30]
 800ad4a:	f003 0310 	and.w	r3, r3, #16
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad52:	2304      	movs	r3, #4
 800ad54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad58:	e00c      	b.n	800ad74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <f_open+0x1d4>
 800ad64:	7fbb      	ldrb	r3, [r7, #30]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <f_open+0x1d4>
						res = FR_DENIED;
 800ad6e:	2307      	movs	r3, #7
 800ad70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d128      	bne.n	800adce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	f023 0301 	bic.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	2300      	moveq	r3, #0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	461a      	mov	r2, r3
 800adae:	f107 0318 	add.w	r3, r7, #24
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fd feef 	bl	8008b98 <inc_lock>
 800adba:	4602      	mov	r2, r0
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <f_open+0x22e>
 800adc8:	2302      	movs	r3, #2
 800adca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800adce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800add2:	2b00      	cmp	r3, #0
 800add4:	f040 80a3 	bne.w	800af1e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe fd94 	bl	800990c <ld_clust>
 800ade4:	4602      	mov	r2, r0
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800adea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adec:	331c      	adds	r3, #28
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd fd6c 	bl	80088cc <ld_dword>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	88da      	ldrh	r2, [r3, #6]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	79fa      	ldrb	r2, [r7, #7]
 800ae12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3330      	adds	r3, #48	; 0x30
 800ae2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fd fdd6 	bl	80089e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d06e      	beq.n	800af1e <f_open+0x37e>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d06a      	beq.n	800af1e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68da      	ldr	r2, [r3, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	895b      	ldrh	r3, [r3, #10]
 800ae54:	461a      	mov	r2, r3
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	899b      	ldrh	r3, [r3, #12]
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae6c:	e016      	b.n	800ae9c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe f87f 	bl	8008f76 <get_fat>
 800ae78:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ae7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d802      	bhi.n	800ae86 <f_open+0x2e6>
 800ae80:	2302      	movs	r3, #2
 800ae82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8c:	d102      	bne.n	800ae94 <f_open+0x2f4>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <f_open+0x30c>
 800aea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d8e0      	bhi.n	800ae6e <f_open+0x2ce>
				}
				fp->clust = clst;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aeb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aeb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d131      	bne.n	800af1e <f_open+0x37e>
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	899b      	ldrh	r3, [r3, #12]
 800aebe:	461a      	mov	r2, r3
 800aec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aec2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aec6:	fb01 f202 	mul.w	r2, r1, r2
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d026      	beq.n	800af1e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe f82f 	bl	8008f38 <clust2sect>
 800aeda:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d103      	bne.n	800aeea <f_open+0x34a>
						res = FR_INT_ERR;
 800aee2:	2302      	movs	r3, #2
 800aee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aee8:	e019      	b.n	800af1e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	899b      	ldrh	r3, [r3, #12]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aef2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef8:	441a      	add	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	7858      	ldrb	r0, [r3, #1]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a1a      	ldr	r2, [r3, #32]
 800af0c:	2301      	movs	r3, #1
 800af0e:	f7fd fc67 	bl	80087e0 <disk_read>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <f_open+0x37e>
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <f_open+0x38c>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800af30:	4618      	mov	r0, r3
 800af32:	3768      	adds	r7, #104	; 0x68
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08c      	sub	sp, #48	; 0x30
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f107 0210 	add.w	r2, r7, #16
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fda5 	bl	800aaa8 <validate>
 800af5e:	4603      	mov	r3, r0
 800af60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d107      	bne.n	800af7c <f_write+0x44>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	7d5b      	ldrb	r3, [r3, #21]
 800af70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800af74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <f_write+0x4a>
 800af7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af80:	e16a      	b.n	800b258 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	7d1b      	ldrb	r3, [r3, #20]
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <f_write+0x5a>
 800af8e:	2307      	movs	r3, #7
 800af90:	e162      	b.n	800b258 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	441a      	add	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	f080 814c 	bcs.w	800b23c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	43db      	mvns	r3, r3
 800afaa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800afac:	e146      	b.n	800b23c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	8992      	ldrh	r2, [r2, #12]
 800afb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800afba:	fb01 f202 	mul.w	r2, r1, r2
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f040 80f1 	bne.w	800b1a8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	8992      	ldrh	r2, [r2, #12]
 800afce:	fbb3 f3f2 	udiv	r3, r3, r2
 800afd2:	693a      	ldr	r2, [r7, #16]
 800afd4:	8952      	ldrh	r2, [r2, #10]
 800afd6:	3a01      	subs	r2, #1
 800afd8:	4013      	ands	r3, r2
 800afda:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d143      	bne.n	800b06a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10c      	bne.n	800b004 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d11a      	bne.n	800b02c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fa10 	bl	8009420 <create_chain>
 800b000:	62b8      	str	r0, [r7, #40]	; 0x28
 800b002:	e013      	b.n	800b02c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d007      	beq.n	800b01c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	4619      	mov	r1, r3
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7fe fa9c 	bl	8009550 <clmt_clust>
 800b018:	62b8      	str	r0, [r7, #40]	; 0x28
 800b01a:	e007      	b.n	800b02c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7fe f9fb 	bl	8009420 <create_chain>
 800b02a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 8109 	beq.w	800b246 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	2b01      	cmp	r3, #1
 800b038:	d104      	bne.n	800b044 <f_write+0x10c>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2202      	movs	r2, #2
 800b03e:	755a      	strb	r2, [r3, #21]
 800b040:	2302      	movs	r3, #2
 800b042:	e109      	b.n	800b258 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04a:	d104      	bne.n	800b056 <f_write+0x11e>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	755a      	strb	r2, [r3, #21]
 800b052:	2301      	movs	r3, #1
 800b054:	e100      	b.n	800b258 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b05a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <f_write+0x132>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b068:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	7d1b      	ldrb	r3, [r3, #20]
 800b06e:	b25b      	sxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	da18      	bge.n	800b0a6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	7858      	ldrb	r0, [r3, #1]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6a1a      	ldr	r2, [r3, #32]
 800b082:	2301      	movs	r3, #1
 800b084:	f7fd fbcc 	bl	8008820 <disk_write>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d004      	beq.n	800b098 <f_write+0x160>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2201      	movs	r2, #1
 800b092:	755a      	strb	r2, [r3, #21]
 800b094:	2301      	movs	r3, #1
 800b096:	e0df      	b.n	800b258 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	7d1b      	ldrb	r3, [r3, #20]
 800b09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7fd ff42 	bl	8008f38 <clust2sect>
 800b0b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d104      	bne.n	800b0c6 <f_write+0x18e>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	755a      	strb	r2, [r3, #21]
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e0c8      	b.n	800b258 <f_write+0x320>
			sect += csect;
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	899b      	ldrh	r3, [r3, #12]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d043      	beq.n	800b16a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	8952      	ldrh	r2, [r2, #10]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d905      	bls.n	800b0fc <f_write+0x1c4>
					cc = fs->csize - csect;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	895b      	ldrh	r3, [r3, #10]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	7858      	ldrb	r0, [r3, #1]
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	69f9      	ldr	r1, [r7, #28]
 800b106:	f7fd fb8b 	bl	8008820 <disk_write>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <f_write+0x1e2>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	755a      	strb	r2, [r3, #21]
 800b116:	2301      	movs	r3, #1
 800b118:	e09e      	b.n	800b258 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6a1a      	ldr	r2, [r3, #32]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	6a3a      	ldr	r2, [r7, #32]
 800b124:	429a      	cmp	r2, r3
 800b126:	d918      	bls.n	800b15a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1a      	ldr	r2, [r3, #32]
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	8992      	ldrh	r2, [r2, #12]
 800b13a:	fb02 f303 	mul.w	r3, r2, r3
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	18d1      	adds	r1, r2, r3
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	899b      	ldrh	r3, [r3, #12]
 800b146:	461a      	mov	r2, r3
 800b148:	f7fd fc2a 	bl	80089a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
 800b150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b154:	b2da      	uxtb	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	899b      	ldrh	r3, [r3, #12]
 800b15e:	461a      	mov	r2, r3
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	fb02 f303 	mul.w	r3, r2, r3
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b168:	e04b      	b.n	800b202 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d016      	beq.n	800b1a2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	699a      	ldr	r2, [r3, #24]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d210      	bcs.n	800b1a2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	7858      	ldrb	r0, [r3, #1]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b18a:	2301      	movs	r3, #1
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	f7fd fb27 	bl	80087e0 <disk_read>
 800b192:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b194:	2b00      	cmp	r3, #0
 800b196:	d004      	beq.n	800b1a2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2201      	movs	r2, #1
 800b19c:	755a      	strb	r2, [r3, #21]
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e05a      	b.n	800b258 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	8992      	ldrh	r2, [r2, #12]
 800b1b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1ba:	fb01 f202 	mul.w	r2, r1, r2
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	1ac3      	subs	r3, r0, r3
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d901      	bls.n	800b1d0 <f_write+0x298>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	8992      	ldrh	r2, [r2, #12]
 800b1de:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1e2:	fb00 f202 	mul.w	r2, r0, r2
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	440b      	add	r3, r1
 800b1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ec:	69f9      	ldr	r1, [r7, #28]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fd fbd6 	bl	80089a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	7d1b      	ldrb	r3, [r3, #20]
 800b1f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	4413      	add	r3, r2
 800b208:	61fb      	str	r3, [r7, #28]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	699a      	ldr	r2, [r3, #24]
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	619a      	str	r2, [r3, #24]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	bf38      	it	cc
 800b222:	461a      	movcc	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	60da      	str	r2, [r3, #12]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	441a      	add	r2, r3
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f47f aeb5 	bne.w	800afae <f_write+0x76>
 800b244:	e000      	b.n	800b248 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b246:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	7d1b      	ldrb	r3, [r3, #20]
 800b24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b250:	b2da      	uxtb	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3730      	adds	r7, #48	; 0x30
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f107 0208 	add.w	r2, r7, #8
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff fc19 	bl	800aaa8 <validate>
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d168      	bne.n	800b352 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	7d1b      	ldrb	r3, [r3, #20]
 800b284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d062      	beq.n	800b352 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	7d1b      	ldrb	r3, [r3, #20]
 800b290:	b25b      	sxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	da15      	bge.n	800b2c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	7858      	ldrb	r0, [r3, #1]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1a      	ldr	r2, [r3, #32]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f7fd fabb 	bl	8008820 <disk_write>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <f_sync+0x54>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e04f      	b.n	800b354 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	7d1b      	ldrb	r3, [r3, #20]
 800b2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b2c2:	f7fd f9ef 	bl	80086a4 <get_fattime>
 800b2c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	f7fd fd93 	bl	8008dfc <move_window>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d138      	bne.n	800b352 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	330b      	adds	r3, #11
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	330b      	adds	r3, #11
 800b2f0:	f042 0220 	orr.w	r2, r2, #32
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	461a      	mov	r2, r3
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	f7fe fb21 	bl	800994a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f103 021c 	add.w	r2, r3, #28
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fd fb17 	bl	8008948 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3316      	adds	r3, #22
 800b31e:	6939      	ldr	r1, [r7, #16]
 800b320:	4618      	mov	r0, r3
 800b322:	f7fd fb11 	bl	8008948 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3312      	adds	r3, #18
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fd faf0 	bl	8008912 <st_word>
					fs->wflag = 1;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2201      	movs	r2, #1
 800b336:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fd fd8c 	bl	8008e58 <sync_fs>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b352:	7dfb      	ldrb	r3, [r7, #23]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ff7b 	bl	800b260 <f_sync>
 800b36a:	4603      	mov	r3, r0
 800b36c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d118      	bne.n	800b3a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f107 0208 	add.w	r2, r7, #8
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff fb93 	bl	800aaa8 <validate>
 800b382:	4603      	mov	r3, r0
 800b384:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10c      	bne.n	800b3a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	4618      	mov	r0, r3
 800b392:	f7fd fc8f 	bl	8008cb4 <dec_lock>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b3bc:	78fb      	ldrb	r3, [r7, #3]
 800b3be:	2b0a      	cmp	r3, #10
 800b3c0:	d103      	bne.n	800b3ca <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b3c2:	210d      	movs	r1, #13
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff fff3 	bl	800b3b0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	db25      	blt.n	800b422 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	60fa      	str	r2, [r7, #12]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	4413      	add	r3, r2
 800b3e0:	78fa      	ldrb	r2, [r7, #3]
 800b3e2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b3c      	cmp	r3, #60	; 0x3c
 800b3e8:	dd12      	ble.n	800b410 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f103 010c 	add.w	r1, r3, #12
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	f107 0308 	add.w	r3, r7, #8
 800b3fa:	f7ff fd9d 	bl	800af38 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	429a      	cmp	r2, r3
 800b404:	d101      	bne.n	800b40a <putc_bfd+0x5a>
 800b406:	2300      	movs	r3, #0
 800b408:	e001      	b.n	800b40e <putc_bfd+0x5e>
 800b40a:	f04f 33ff 	mov.w	r3, #4294967295
 800b40e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	609a      	str	r2, [r3, #8]
 800b420:	e000      	b.n	800b424 <putc_bfd+0x74>
	if (i < 0) return;
 800b422:	bf00      	nop
}
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	db16      	blt.n	800b468 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f103 010c 	add.w	r1, r3, #12
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	461a      	mov	r2, r3
 800b44a:	f107 030c 	add.w	r3, r7, #12
 800b44e:	f7ff fd73 	bl	800af38 <f_write>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d102      	bne.n	800b468 <putc_flush+0x3e>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	e001      	b.n	800b46c <putc_flush+0x42>
	return EOF;
 800b468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	609a      	str	r2, [r3, #8]
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b096      	sub	sp, #88	; 0x58
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b4a8:	f107 030c 	add.w	r3, r7, #12
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ffe0 	bl	800b474 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b4b4:	e009      	b.n	800b4ca <f_puts+0x2c>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	f107 030c 	add.w	r3, r7, #12
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ff73 	bl	800b3b0 <putc_bfd>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1f1      	bne.n	800b4b6 <f_puts+0x18>
	return putc_flush(&pb);
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff ffa7 	bl	800b42a <putc_flush>
 800b4dc:	4603      	mov	r3, r0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3758      	adds	r7, #88	; 0x58
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b4e8:	b40e      	push	{r1, r2, r3}
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b0a7      	sub	sp, #156	; 0x9c
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b4f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff ffbb 	bl	800b474 <putc_init>

	va_start(arp, fmt);
 800b4fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b502:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b514:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 81f2 	beq.w	800b902 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b51e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b522:	2b25      	cmp	r3, #37	; 0x25
 800b524:	d008      	beq.n	800b538 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b526:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b52a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b52e:	4611      	mov	r1, r2
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff ff3d 	bl	800b3b0 <putc_bfd>
			continue;
 800b536:	e1e3      	b.n	800b900 <f_printf+0x418>
		}
		w = f = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b53e:	2300      	movs	r3, #0
 800b540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b554:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d10b      	bne.n	800b574 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b55c:	2301      	movs	r3, #1
 800b55e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b572:	e024      	b.n	800b5be <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b574:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b578:	2b2d      	cmp	r3, #45	; 0x2d
 800b57a:	d120      	bne.n	800b5be <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b57c:	2302      	movs	r3, #2
 800b57e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b592:	e014      	b.n	800b5be <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b594:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5a6:	4413      	add	r3, r2
 800b5a8:	3b30      	subs	r3, #48	; 0x30
 800b5aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b5ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b5be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5c2:	2b2f      	cmp	r3, #47	; 0x2f
 800b5c4:	d903      	bls.n	800b5ce <f_printf+0xe6>
 800b5c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5ca:	2b39      	cmp	r3, #57	; 0x39
 800b5cc:	d9e2      	bls.n	800b594 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b5ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5d2:	2b6c      	cmp	r3, #108	; 0x6c
 800b5d4:	d003      	beq.n	800b5de <f_printf+0xf6>
 800b5d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5da:	2b4c      	cmp	r3, #76	; 0x4c
 800b5dc:	d10d      	bne.n	800b5fa <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b5de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5e2:	f043 0304 	orr.w	r3, r3, #4
 800b5e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b5fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 8181 	beq.w	800b906 <f_printf+0x41e>
		d = c;
 800b604:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b608:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b60c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b610:	2b60      	cmp	r3, #96	; 0x60
 800b612:	d908      	bls.n	800b626 <f_printf+0x13e>
 800b614:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b618:	2b7a      	cmp	r3, #122	; 0x7a
 800b61a:	d804      	bhi.n	800b626 <f_printf+0x13e>
 800b61c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b620:	3b20      	subs	r3, #32
 800b622:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b626:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b62a:	3b42      	subs	r3, #66	; 0x42
 800b62c:	2b16      	cmp	r3, #22
 800b62e:	f200 8098 	bhi.w	800b762 <f_printf+0x27a>
 800b632:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <f_printf+0x150>)
 800b634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b638:	0800b743 	.word	0x0800b743
 800b63c:	0800b72b 	.word	0x0800b72b
 800b640:	0800b753 	.word	0x0800b753
 800b644:	0800b763 	.word	0x0800b763
 800b648:	0800b763 	.word	0x0800b763
 800b64c:	0800b763 	.word	0x0800b763
 800b650:	0800b763 	.word	0x0800b763
 800b654:	0800b763 	.word	0x0800b763
 800b658:	0800b763 	.word	0x0800b763
 800b65c:	0800b763 	.word	0x0800b763
 800b660:	0800b763 	.word	0x0800b763
 800b664:	0800b763 	.word	0x0800b763
 800b668:	0800b763 	.word	0x0800b763
 800b66c:	0800b74b 	.word	0x0800b74b
 800b670:	0800b763 	.word	0x0800b763
 800b674:	0800b763 	.word	0x0800b763
 800b678:	0800b763 	.word	0x0800b763
 800b67c:	0800b695 	.word	0x0800b695
 800b680:	0800b763 	.word	0x0800b763
 800b684:	0800b753 	.word	0x0800b753
 800b688:	0800b763 	.word	0x0800b763
 800b68c:	0800b763 	.word	0x0800b763
 800b690:	0800b75b 	.word	0x0800b75b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	67ba      	str	r2, [r7, #120]	; 0x78
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6a4:	e004      	b.n	800b6b0 <f_printf+0x1c8>
 800b6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b6b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1f3      	bne.n	800b6a6 <f_printf+0x1be>
			if (!(f & 2)) {
 800b6be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d11a      	bne.n	800b700 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b6ca:	e005      	b.n	800b6d8 <f_printf+0x1f0>
 800b6cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6d0:	2120      	movs	r1, #32
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fe6c 	bl	800b3b0 <putc_bfd>
 800b6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6dc:	1c5a      	adds	r2, r3, #1
 800b6de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b6e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d8f0      	bhi.n	800b6cc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b6ea:	e009      	b.n	800b700 <f_printf+0x218>
 800b6ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b6f2:	781a      	ldrb	r2, [r3, #0]
 800b6f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fe58 	bl	800b3b0 <putc_bfd>
 800b700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f1      	bne.n	800b6ec <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b708:	e005      	b.n	800b716 <f_printf+0x22e>
 800b70a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b70e:	2120      	movs	r1, #32
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fe4d 	bl	800b3b0 <putc_bfd>
 800b716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b720:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b724:	429a      	cmp	r2, r3
 800b726:	d8f0      	bhi.n	800b70a <f_printf+0x222>
			continue;
 800b728:	e0ea      	b.n	800b900 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b72a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	67ba      	str	r2, [r7, #120]	; 0x78
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	b2da      	uxtb	r2, r3
 800b734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff fe38 	bl	800b3b0 <putc_bfd>
 800b740:	e0de      	b.n	800b900 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800b742:	2302      	movs	r3, #2
 800b744:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b748:	e014      	b.n	800b774 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b74a:	2308      	movs	r3, #8
 800b74c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b750:	e010      	b.n	800b774 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b752:	230a      	movs	r3, #10
 800b754:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b758:	e00c      	b.n	800b774 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b75a:	2310      	movs	r3, #16
 800b75c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b760:	e008      	b.n	800b774 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b762:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b76a:	4611      	mov	r1, r2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fe1f 	bl	800b3b0 <putc_bfd>
 800b772:	e0c5      	b.n	800b900 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b774:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d004      	beq.n	800b78a <f_printf+0x2a2>
 800b780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b782:	1d1a      	adds	r2, r3, #4
 800b784:	67ba      	str	r2, [r7, #120]	; 0x78
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	e00c      	b.n	800b7a4 <f_printf+0x2bc>
 800b78a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b78e:	2b44      	cmp	r3, #68	; 0x44
 800b790:	d104      	bne.n	800b79c <f_printf+0x2b4>
 800b792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b794:	1d1a      	adds	r2, r3, #4
 800b796:	67ba      	str	r2, [r7, #120]	; 0x78
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	e003      	b.n	800b7a4 <f_printf+0x2bc>
 800b79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b79e:	1d1a      	adds	r2, r3, #4
 800b7a0:	67ba      	str	r2, [r7, #120]	; 0x78
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b7a8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b7ac:	2b44      	cmp	r3, #68	; 0x44
 800b7ae:	d10e      	bne.n	800b7ce <f_printf+0x2e6>
 800b7b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da0a      	bge.n	800b7ce <f_printf+0x2e6>
			v = 0 - v;
 800b7b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7bc:	425b      	negs	r3, r3
 800b7be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b7c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7c6:	f043 0308 	orr.w	r3, r3, #8
 800b7ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b7d4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b7d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7e0:	fb01 f202 	mul.w	r2, r1, r2
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b7ea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b7ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b7fa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d90b      	bls.n	800b81a <f_printf+0x332>
 800b802:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b806:	2b78      	cmp	r3, #120	; 0x78
 800b808:	d101      	bne.n	800b80e <f_printf+0x326>
 800b80a:	2227      	movs	r2, #39	; 0x27
 800b80c:	e000      	b.n	800b810 <f_printf+0x328>
 800b80e:	2207      	movs	r2, #7
 800b810:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b814:	4413      	add	r3, r2
 800b816:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b81a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b824:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b828:	3230      	adds	r2, #48	; 0x30
 800b82a:	b2d2      	uxtb	r2, r2
 800b82c:	3398      	adds	r3, #152	; 0x98
 800b82e:	443b      	add	r3, r7
 800b830:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <f_printf+0x35c>
 800b83c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b840:	2b1f      	cmp	r3, #31
 800b842:	d9c7      	bls.n	800b7d4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b844:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d009      	beq.n	800b864 <f_printf+0x37c>
 800b850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b85a:	3398      	adds	r3, #152	; 0x98
 800b85c:	443b      	add	r3, r7
 800b85e:	222d      	movs	r2, #45	; 0x2d
 800b860:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b86c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <f_printf+0x394>
 800b878:	2330      	movs	r3, #48	; 0x30
 800b87a:	e000      	b.n	800b87e <f_printf+0x396>
 800b87c:	2320      	movs	r3, #32
 800b87e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b882:	e007      	b.n	800b894 <f_printf+0x3ac>
 800b884:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff fd8e 	bl	800b3b0 <putc_bfd>
 800b894:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d108      	bne.n	800b8b2 <f_printf+0x3ca>
 800b8a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8a4:	1c5a      	adds	r2, r3, #1
 800b8a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d8e8      	bhi.n	800b884 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800b8b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8bc:	f107 020c 	add.w	r2, r7, #12
 800b8c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8c4:	4413      	add	r3, r2
 800b8c6:	781a      	ldrb	r2, [r3, #0]
 800b8c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fd6e 	bl	800b3b0 <putc_bfd>
		} while (i);
 800b8d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1ea      	bne.n	800b8b2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800b8dc:	e007      	b.n	800b8ee <f_printf+0x406>
 800b8de:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b8e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fd61 	bl	800b3b0 <putc_bfd>
 800b8ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d8ee      	bhi.n	800b8de <f_printf+0x3f6>
		c = *fmt++;
 800b900:	e600      	b.n	800b504 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b902:	bf00      	nop
 800b904:	e000      	b.n	800b908 <f_printf+0x420>
		if (!c) break;
 800b906:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fd8c 	bl	800b42a <putc_flush>
 800b912:	4603      	mov	r3, r0
}
 800b914:	4618      	mov	r0, r3
 800b916:	379c      	adds	r7, #156	; 0x9c
 800b918:	46bd      	mov	sp, r7
 800b91a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b91e:	b003      	add	sp, #12
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop

0800b924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4613      	mov	r3, r2
 800b930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b932:	2301      	movs	r3, #1
 800b934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b93a:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b93c:	7a5b      	ldrb	r3, [r3, #9]
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b00      	cmp	r3, #0
 800b942:	d131      	bne.n	800b9a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b944:	4b1c      	ldr	r3, [pc, #112]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b946:	7a5b      	ldrb	r3, [r3, #9]
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	461a      	mov	r2, r3
 800b94c:	4b1a      	ldr	r3, [pc, #104]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b94e:	2100      	movs	r1, #0
 800b950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b952:	4b19      	ldr	r3, [pc, #100]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b954:	7a5b      	ldrb	r3, [r3, #9]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	4a17      	ldr	r2, [pc, #92]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b962:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b964:	7a5b      	ldrb	r3, [r3, #9]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b96c:	4413      	add	r3, r2
 800b96e:	79fa      	ldrb	r2, [r7, #7]
 800b970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b972:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b974:	7a5b      	ldrb	r3, [r3, #9]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	b2d1      	uxtb	r1, r2
 800b97c:	4a0e      	ldr	r2, [pc, #56]	; (800b9b8 <FATFS_LinkDriverEx+0x94>)
 800b97e:	7251      	strb	r1, [r2, #9]
 800b980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b982:	7dbb      	ldrb	r3, [r7, #22]
 800b984:	3330      	adds	r3, #48	; 0x30
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	3301      	adds	r3, #1
 800b990:	223a      	movs	r2, #58	; 0x3a
 800b992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	3302      	adds	r3, #2
 800b998:	222f      	movs	r2, #47	; 0x2f
 800b99a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3303      	adds	r3, #3
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	371c      	adds	r7, #28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	2000252c 	.word	0x2000252c

0800b9bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff ffaa 	bl	800b924 <FATFS_LinkDriverEx>
 800b9d0:	4603      	mov	r3, r0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6039      	str	r1, [r7, #0]
 800b9e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b9e8:	88fb      	ldrh	r3, [r7, #6]
 800b9ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b9ec:	d802      	bhi.n	800b9f4 <ff_convert+0x18>
		c = chr;
 800b9ee:	88fb      	ldrh	r3, [r7, #6]
 800b9f0:	81fb      	strh	r3, [r7, #14]
 800b9f2:	e025      	b.n	800ba40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00b      	beq.n	800ba12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	2bff      	cmp	r3, #255	; 0xff
 800b9fe:	d805      	bhi.n	800ba0c <ff_convert+0x30>
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	3b80      	subs	r3, #128	; 0x80
 800ba04:	4a12      	ldr	r2, [pc, #72]	; (800ba50 <ff_convert+0x74>)
 800ba06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba0a:	e000      	b.n	800ba0e <ff_convert+0x32>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	81fb      	strh	r3, [r7, #14]
 800ba10:	e016      	b.n	800ba40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ba12:	2300      	movs	r3, #0
 800ba14:	81fb      	strh	r3, [r7, #14]
 800ba16:	e009      	b.n	800ba2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	4a0d      	ldr	r2, [pc, #52]	; (800ba50 <ff_convert+0x74>)
 800ba1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba20:	88fa      	ldrh	r2, [r7, #6]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d006      	beq.n	800ba34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ba26:	89fb      	ldrh	r3, [r7, #14]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	81fb      	strh	r3, [r7, #14]
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba30:	d9f2      	bls.n	800ba18 <ff_convert+0x3c>
 800ba32:	e000      	b.n	800ba36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ba34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ba36:	89fb      	ldrh	r3, [r7, #14]
 800ba38:	3380      	adds	r3, #128	; 0x80
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ba40:	89fb      	ldrh	r3, [r7, #14]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	0800c680 	.word	0x0800c680

0800ba54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba64:	d201      	bcs.n	800ba6a <ff_wtoupper+0x16>
 800ba66:	4b3e      	ldr	r3, [pc, #248]	; (800bb60 <ff_wtoupper+0x10c>)
 800ba68:	e000      	b.n	800ba6c <ff_wtoupper+0x18>
 800ba6a:	4b3e      	ldr	r3, [pc, #248]	; (800bb64 <ff_wtoupper+0x110>)
 800ba6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	1c9a      	adds	r2, r3, #2
 800ba72:	617a      	str	r2, [r7, #20]
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ba78:	8a7b      	ldrh	r3, [r7, #18]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d068      	beq.n	800bb50 <ff_wtoupper+0xfc>
 800ba7e:	88fa      	ldrh	r2, [r7, #6]
 800ba80:	8a7b      	ldrh	r3, [r7, #18]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d364      	bcc.n	800bb50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	1c9a      	adds	r2, r3, #2
 800ba8a:	617a      	str	r2, [r7, #20]
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	823b      	strh	r3, [r7, #16]
 800ba90:	8a3b      	ldrh	r3, [r7, #16]
 800ba92:	0a1b      	lsrs	r3, r3, #8
 800ba94:	81fb      	strh	r3, [r7, #14]
 800ba96:	8a3b      	ldrh	r3, [r7, #16]
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ba9c:	88fa      	ldrh	r2, [r7, #6]
 800ba9e:	8a79      	ldrh	r1, [r7, #18]
 800baa0:	8a3b      	ldrh	r3, [r7, #16]
 800baa2:	440b      	add	r3, r1
 800baa4:	429a      	cmp	r2, r3
 800baa6:	da49      	bge.n	800bb3c <ff_wtoupper+0xe8>
			switch (cmd) {
 800baa8:	89fb      	ldrh	r3, [r7, #14]
 800baaa:	2b08      	cmp	r3, #8
 800baac:	d84f      	bhi.n	800bb4e <ff_wtoupper+0xfa>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <ff_wtoupper+0x60>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800baeb 	.word	0x0800baeb
 800babc:	0800bb01 	.word	0x0800bb01
 800bac0:	0800bb09 	.word	0x0800bb09
 800bac4:	0800bb11 	.word	0x0800bb11
 800bac8:	0800bb19 	.word	0x0800bb19
 800bacc:	0800bb21 	.word	0x0800bb21
 800bad0:	0800bb29 	.word	0x0800bb29
 800bad4:	0800bb31 	.word	0x0800bb31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bad8:	88fa      	ldrh	r2, [r7, #6]
 800bada:	8a7b      	ldrh	r3, [r7, #18]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4413      	add	r3, r2
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	80fb      	strh	r3, [r7, #6]
 800bae8:	e027      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800baea:	88fa      	ldrh	r2, [r7, #6]
 800baec:	8a7b      	ldrh	r3, [r7, #18]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	80fb      	strh	r3, [r7, #6]
 800bafe:	e01c      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bb00:	88fb      	ldrh	r3, [r7, #6]
 800bb02:	3b10      	subs	r3, #16
 800bb04:	80fb      	strh	r3, [r7, #6]
 800bb06:	e018      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	3b20      	subs	r3, #32
 800bb0c:	80fb      	strh	r3, [r7, #6]
 800bb0e:	e014      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bb10:	88fb      	ldrh	r3, [r7, #6]
 800bb12:	3b30      	subs	r3, #48	; 0x30
 800bb14:	80fb      	strh	r3, [r7, #6]
 800bb16:	e010      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bb18:	88fb      	ldrh	r3, [r7, #6]
 800bb1a:	3b1a      	subs	r3, #26
 800bb1c:	80fb      	strh	r3, [r7, #6]
 800bb1e:	e00c      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bb20:	88fb      	ldrh	r3, [r7, #6]
 800bb22:	3308      	adds	r3, #8
 800bb24:	80fb      	strh	r3, [r7, #6]
 800bb26:	e008      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	3b50      	subs	r3, #80	; 0x50
 800bb2c:	80fb      	strh	r3, [r7, #6]
 800bb2e:	e004      	b.n	800bb3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bb30:	88fb      	ldrh	r3, [r7, #6]
 800bb32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bb36:	80fb      	strh	r3, [r7, #6]
 800bb38:	bf00      	nop
			}
			break;
 800bb3a:	e008      	b.n	800bb4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bb3c:	89fb      	ldrh	r3, [r7, #14]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d195      	bne.n	800ba6e <ff_wtoupper+0x1a>
 800bb42:	8a3b      	ldrh	r3, [r7, #16]
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	4413      	add	r3, r2
 800bb4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bb4c:	e78f      	b.n	800ba6e <ff_wtoupper+0x1a>
			break;
 800bb4e:	bf00      	nop
	}

	return chr;
 800bb50:	88fb      	ldrh	r3, [r7, #6]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	371c      	adds	r7, #28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	0800c780 	.word	0x0800c780
 800bb64:	0800c974 	.word	0x0800c974

0800bb68 <__libc_init_array>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	4d0d      	ldr	r5, [pc, #52]	; (800bba0 <__libc_init_array+0x38>)
 800bb6c:	4c0d      	ldr	r4, [pc, #52]	; (800bba4 <__libc_init_array+0x3c>)
 800bb6e:	1b64      	subs	r4, r4, r5
 800bb70:	10a4      	asrs	r4, r4, #2
 800bb72:	2600      	movs	r6, #0
 800bb74:	42a6      	cmp	r6, r4
 800bb76:	d109      	bne.n	800bb8c <__libc_init_array+0x24>
 800bb78:	4d0b      	ldr	r5, [pc, #44]	; (800bba8 <__libc_init_array+0x40>)
 800bb7a:	4c0c      	ldr	r4, [pc, #48]	; (800bbac <__libc_init_array+0x44>)
 800bb7c:	f000 f820 	bl	800bbc0 <_init>
 800bb80:	1b64      	subs	r4, r4, r5
 800bb82:	10a4      	asrs	r4, r4, #2
 800bb84:	2600      	movs	r6, #0
 800bb86:	42a6      	cmp	r6, r4
 800bb88:	d105      	bne.n	800bb96 <__libc_init_array+0x2e>
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb90:	4798      	blx	r3
 800bb92:	3601      	adds	r6, #1
 800bb94:	e7ee      	b.n	800bb74 <__libc_init_array+0xc>
 800bb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9a:	4798      	blx	r3
 800bb9c:	3601      	adds	r6, #1
 800bb9e:	e7f2      	b.n	800bb86 <__libc_init_array+0x1e>
 800bba0:	0800ca30 	.word	0x0800ca30
 800bba4:	0800ca30 	.word	0x0800ca30
 800bba8:	0800ca30 	.word	0x0800ca30
 800bbac:	0800ca34 	.word	0x0800ca34

0800bbb0 <memset>:
 800bbb0:	4402      	add	r2, r0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d100      	bne.n	800bbba <memset+0xa>
 800bbb8:	4770      	bx	lr
 800bbba:	f803 1b01 	strb.w	r1, [r3], #1
 800bbbe:	e7f9      	b.n	800bbb4 <memset+0x4>

0800bbc0 <_init>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	bf00      	nop
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr

0800bbcc <_fini>:
 800bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbce:	bf00      	nop
 800bbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd2:	bc08      	pop	{r3}
 800bbd4:	469e      	mov	lr, r3
 800bbd6:	4770      	bx	lr
